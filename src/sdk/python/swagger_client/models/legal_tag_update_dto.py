# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LegalTagUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'contract_id': 'str',
        'description': 'str',
        'expiration_date': 'str'
    }

    attribute_map = {
        'name': 'name',
        'contract_id': 'contractId',
        'description': 'description',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, name=None, contract_id=None, description=None, expiration_date=None, _configuration=None):  # noqa: E501
        """LegalTagUpdateDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._contract_id = None
        self._description = None
        self._expiration_date = None
        self.discriminator = None

        self.name = name
        self.contract_id = contract_id
        if description is not None:
            self.description = description
        if expiration_date is not None:
            self.expiration_date = expiration_date

    @property
    def name(self):
        """Gets the name of this LegalTagUpdateDto.  # noqa: E501

        The name of the LegalTag.  # noqa: E501

        :return: The name of this LegalTagUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegalTagUpdateDto.

        The name of the LegalTag.  # noqa: E501

        :param name: The name of this LegalTagUpdateDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contract_id(self):
        """Gets the contract_id of this LegalTagUpdateDto.  # noqa: E501

        The Id of the physical contract associated with the data being ingested.  # noqa: E501

        :return: The contract_id of this LegalTagUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this LegalTagUpdateDto.

        The Id of the physical contract associated with the data being ingested.  # noqa: E501

        :param contract_id: The contract_id of this LegalTagUpdateDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def description(self):
        """Gets the description of this LegalTagUpdateDto.  # noqa: E501

        The optional description if the LegalTag to allow for easier discoverability of Legaltags overtime.  # noqa: E501

        :return: The description of this LegalTagUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LegalTagUpdateDto.

        The optional description if the LegalTag to allow for easier discoverability of Legaltags overtime.  # noqa: E501

        :param description: The description of this LegalTagUpdateDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expiration_date(self):
        """Gets the expiration_date of this LegalTagUpdateDto.  # noqa: E501

        The optional expiration date of the contract in the format YYYY-MM-DD  # noqa: E501

        :return: The expiration_date of this LegalTagUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this LegalTagUpdateDto.

        The optional expiration date of the contract in the format YYYY-MM-DD  # noqa: E501

        :param expiration_date: The expiration_date of this LegalTagUpdateDto.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegalTagUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalTagUpdateDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalTagUpdateDto):
            return True

        return self.to_dict() != other.to_dict()
