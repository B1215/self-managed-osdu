# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LegalTagPropertyValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'countries_of_origin': 'dict(str, str)',
        'other_relevant_data_countries': 'dict(str, str)',
        'security_classifications': 'list[str]',
        'export_classification_control_numbers': 'list[str]',
        'personal_data_types': 'list[str]'
    }

    attribute_map = {
        'countries_of_origin': 'countriesOfOrigin',
        'other_relevant_data_countries': 'otherRelevantDataCountries',
        'security_classifications': 'securityClassifications',
        'export_classification_control_numbers': 'exportClassificationControlNumbers',
        'personal_data_types': 'personalDataTypes'
    }

    def __init__(self, countries_of_origin=None, other_relevant_data_countries=None, security_classifications=None, export_classification_control_numbers=None, personal_data_types=None, _configuration=None):  # noqa: E501
        """LegalTagPropertyValues - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._countries_of_origin = None
        self._other_relevant_data_countries = None
        self._security_classifications = None
        self._export_classification_control_numbers = None
        self._personal_data_types = None
        self.discriminator = None

        if countries_of_origin is not None:
            self.countries_of_origin = countries_of_origin
        if other_relevant_data_countries is not None:
            self.other_relevant_data_countries = other_relevant_data_countries
        if security_classifications is not None:
            self.security_classifications = security_classifications
        if export_classification_control_numbers is not None:
            self.export_classification_control_numbers = export_classification_control_numbers
        if personal_data_types is not None:
            self.personal_data_types = personal_data_types

    @property
    def countries_of_origin(self):
        """Gets the countries_of_origin of this LegalTagPropertyValues.  # noqa: E501

        The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name.  # noqa: E501

        :return: The countries_of_origin of this LegalTagPropertyValues.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._countries_of_origin

    @countries_of_origin.setter
    def countries_of_origin(self, countries_of_origin):
        """Sets the countries_of_origin of this LegalTagPropertyValues.

        The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name.  # noqa: E501

        :param countries_of_origin: The countries_of_origin of this LegalTagPropertyValues.  # noqa: E501
        :type: dict(str, str)
        """

        self._countries_of_origin = countries_of_origin

    @property
    def other_relevant_data_countries(self):
        """Gets the other_relevant_data_countries of this LegalTagPropertyValues.  # noqa: E501

        The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name.  # noqa: E501

        :return: The other_relevant_data_countries of this LegalTagPropertyValues.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._other_relevant_data_countries

    @other_relevant_data_countries.setter
    def other_relevant_data_countries(self, other_relevant_data_countries):
        """Sets the other_relevant_data_countries of this LegalTagPropertyValues.

        The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name.  # noqa: E501

        :param other_relevant_data_countries: The other_relevant_data_countries of this LegalTagPropertyValues.  # noqa: E501
        :type: dict(str, str)
        """

        self._other_relevant_data_countries = other_relevant_data_countries

    @property
    def security_classifications(self):
        """Gets the security_classifications of this LegalTagPropertyValues.  # noqa: E501

        The values of all the allowed Security Classifications.  # noqa: E501

        :return: The security_classifications of this LegalTagPropertyValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_classifications

    @security_classifications.setter
    def security_classifications(self, security_classifications):
        """Sets the security_classifications of this LegalTagPropertyValues.

        The values of all the allowed Security Classifications.  # noqa: E501

        :param security_classifications: The security_classifications of this LegalTagPropertyValues.  # noqa: E501
        :type: list[str]
        """

        self._security_classifications = security_classifications

    @property
    def export_classification_control_numbers(self):
        """Gets the export_classification_control_numbers of this LegalTagPropertyValues.  # noqa: E501

        The name of all the allowed Export Classifications.  # noqa: E501

        :return: The export_classification_control_numbers of this LegalTagPropertyValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._export_classification_control_numbers

    @export_classification_control_numbers.setter
    def export_classification_control_numbers(self, export_classification_control_numbers):
        """Sets the export_classification_control_numbers of this LegalTagPropertyValues.

        The name of all the allowed Export Classifications.  # noqa: E501

        :param export_classification_control_numbers: The export_classification_control_numbers of this LegalTagPropertyValues.  # noqa: E501
        :type: list[str]
        """

        self._export_classification_control_numbers = export_classification_control_numbers

    @property
    def personal_data_types(self):
        """Gets the personal_data_types of this LegalTagPropertyValues.  # noqa: E501

        The name of all the allowed Personal Data Type values.  # noqa: E501

        :return: The personal_data_types of this LegalTagPropertyValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._personal_data_types

    @personal_data_types.setter
    def personal_data_types(self, personal_data_types):
        """Sets the personal_data_types of this LegalTagPropertyValues.

        The name of all the allowed Personal Data Type values.  # noqa: E501

        :param personal_data_types: The personal_data_types of this LegalTagPropertyValues.  # noqa: E501
        :type: list[str]
        """

        self._personal_data_types = personal_data_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegalTagPropertyValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalTagPropertyValues):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalTagPropertyValues):
            return True

        return self.to_dict() != other.to_dict()
