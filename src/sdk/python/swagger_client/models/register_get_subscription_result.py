# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RegisterGetSubscriptionResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'topic': 'str',
        'push_endpoint': 'str',
        'created_by': 'str',
        'notification_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'topic': 'topic',
        'push_endpoint': 'pushEndpoint',
        'created_by': 'createdBy',
        'notification_id': 'notificationId'
    }

    def __init__(self, id=None, name=None, description=None, topic=None, push_endpoint=None, created_by=None, notification_id=None, _configuration=None):  # noqa: E501
        """RegisterGetSubscriptionResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._topic = None
        self._push_endpoint = None
        self._created_by = None
        self._notification_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if topic is not None:
            self.topic = topic
        if push_endpoint is not None:
            self.push_endpoint = push_endpoint
        if created_by is not None:
            self.created_by = created_by
        if notification_id is not None:
            self.notification_id = notification_id

    @property
    def id(self):
        """Gets the id of this RegisterGetSubscriptionResult.  # noqa: E501


        :return: The id of this RegisterGetSubscriptionResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegisterGetSubscriptionResult.


        :param id: The id of this RegisterGetSubscriptionResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RegisterGetSubscriptionResult.  # noqa: E501


        :return: The name of this RegisterGetSubscriptionResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegisterGetSubscriptionResult.


        :param name: The name of this RegisterGetSubscriptionResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this RegisterGetSubscriptionResult.  # noqa: E501


        :return: The description of this RegisterGetSubscriptionResult.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegisterGetSubscriptionResult.


        :param description: The description of this RegisterGetSubscriptionResult.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def topic(self):
        """Gets the topic of this RegisterGetSubscriptionResult.  # noqa: E501


        :return: The topic of this RegisterGetSubscriptionResult.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this RegisterGetSubscriptionResult.


        :param topic: The topic of this RegisterGetSubscriptionResult.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def push_endpoint(self):
        """Gets the push_endpoint of this RegisterGetSubscriptionResult.  # noqa: E501


        :return: The push_endpoint of this RegisterGetSubscriptionResult.  # noqa: E501
        :rtype: str
        """
        return self._push_endpoint

    @push_endpoint.setter
    def push_endpoint(self, push_endpoint):
        """Sets the push_endpoint of this RegisterGetSubscriptionResult.


        :param push_endpoint: The push_endpoint of this RegisterGetSubscriptionResult.  # noqa: E501
        :type: str
        """

        self._push_endpoint = push_endpoint

    @property
    def created_by(self):
        """Gets the created_by of this RegisterGetSubscriptionResult.  # noqa: E501


        :return: The created_by of this RegisterGetSubscriptionResult.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RegisterGetSubscriptionResult.


        :param created_by: The created_by of this RegisterGetSubscriptionResult.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def notification_id(self):
        """Gets the notification_id of this RegisterGetSubscriptionResult.  # noqa: E501


        :return: The notification_id of this RegisterGetSubscriptionResult.  # noqa: E501
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this RegisterGetSubscriptionResult.


        :param notification_id: The notification_id of this RegisterGetSubscriptionResult.  # noqa: E501
        :type: str
        """

        self._notification_id = notification_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterGetSubscriptionResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterGetSubscriptionResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterGetSubscriptionResult):
            return True

        return self.to_dict() != other.to_dict()
