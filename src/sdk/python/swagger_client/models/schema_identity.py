# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SchemaIdentity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authority': 'str',
        'entity_type': 'str',
        'id': 'str',
        'schema_version_major': 'int',
        'schema_version_minor': 'int',
        'schema_version_patch': 'int',
        'source': 'str'
    }

    attribute_map = {
        'authority': 'authority',
        'entity_type': 'entityType',
        'id': 'id',
        'schema_version_major': 'schemaVersionMajor',
        'schema_version_minor': 'schemaVersionMinor',
        'schema_version_patch': 'schemaVersionPatch',
        'source': 'source'
    }

    def __init__(self, authority=None, entity_type=None, id=None, schema_version_major=None, schema_version_minor=None, schema_version_patch=None, source=None, _configuration=None):  # noqa: E501
        """SchemaIdentity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authority = None
        self._entity_type = None
        self._id = None
        self._schema_version_major = None
        self._schema_version_minor = None
        self._schema_version_patch = None
        self._source = None
        self.discriminator = None

        self.authority = authority
        self.entity_type = entity_type
        if id is not None:
            self.id = id
        self.schema_version_major = schema_version_major
        self.schema_version_minor = schema_version_minor
        self.schema_version_patch = schema_version_patch
        self.source = source

    @property
    def authority(self):
        """Gets the authority of this SchemaIdentity.  # noqa: E501

        Entity authority  # noqa: E501

        :return: The authority of this SchemaIdentity.  # noqa: E501
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this SchemaIdentity.

        Entity authority  # noqa: E501

        :param authority: The authority of this SchemaIdentity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and authority is None:
            raise ValueError("Invalid value for `authority`, must not be `None`")  # noqa: E501

        self._authority = authority

    @property
    def entity_type(self):
        """Gets the entity_type of this SchemaIdentity.  # noqa: E501

        EntityType Code  # noqa: E501

        :return: The entity_type of this SchemaIdentity.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this SchemaIdentity.

        EntityType Code  # noqa: E501

        :param entity_type: The entity_type of this SchemaIdentity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this SchemaIdentity.  # noqa: E501

        A read-only system defined id used for referencing of a schema.  # noqa: E501

        :return: The id of this SchemaIdentity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SchemaIdentity.

        A read-only system defined id used for referencing of a schema.  # noqa: E501

        :param id: The id of this SchemaIdentity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def schema_version_major(self):
        """Gets the schema_version_major of this SchemaIdentity.  # noqa: E501

        Major Schema Version Number  # noqa: E501

        :return: The schema_version_major of this SchemaIdentity.  # noqa: E501
        :rtype: int
        """
        return self._schema_version_major

    @schema_version_major.setter
    def schema_version_major(self, schema_version_major):
        """Sets the schema_version_major of this SchemaIdentity.

        Major Schema Version Number  # noqa: E501

        :param schema_version_major: The schema_version_major of this SchemaIdentity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and schema_version_major is None:
            raise ValueError("Invalid value for `schema_version_major`, must not be `None`")  # noqa: E501

        self._schema_version_major = schema_version_major

    @property
    def schema_version_minor(self):
        """Gets the schema_version_minor of this SchemaIdentity.  # noqa: E501

        Minor Schema Version Number  # noqa: E501

        :return: The schema_version_minor of this SchemaIdentity.  # noqa: E501
        :rtype: int
        """
        return self._schema_version_minor

    @schema_version_minor.setter
    def schema_version_minor(self, schema_version_minor):
        """Sets the schema_version_minor of this SchemaIdentity.

        Minor Schema Version Number  # noqa: E501

        :param schema_version_minor: The schema_version_minor of this SchemaIdentity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and schema_version_minor is None:
            raise ValueError("Invalid value for `schema_version_minor`, must not be `None`")  # noqa: E501

        self._schema_version_minor = schema_version_minor

    @property
    def schema_version_patch(self):
        """Gets the schema_version_patch of this SchemaIdentity.  # noqa: E501

        Patch Schema Version Number  # noqa: E501

        :return: The schema_version_patch of this SchemaIdentity.  # noqa: E501
        :rtype: int
        """
        return self._schema_version_patch

    @schema_version_patch.setter
    def schema_version_patch(self, schema_version_patch):
        """Sets the schema_version_patch of this SchemaIdentity.

        Patch Schema Version Number  # noqa: E501

        :param schema_version_patch: The schema_version_patch of this SchemaIdentity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and schema_version_patch is None:
            raise ValueError("Invalid value for `schema_version_patch`, must not be `None`")  # noqa: E501

        self._schema_version_patch = schema_version_patch

    @property
    def source(self):
        """Gets the source of this SchemaIdentity.  # noqa: E501

        Entity source  # noqa: E501

        :return: The source of this SchemaIdentity.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SchemaIdentity.

        Entity source  # noqa: E501

        :param source: The source of this SchemaIdentity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaIdentity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaIdentity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchemaIdentity):
            return True

        return self.to_dict() != other.to_dict()
