# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LegalTagProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contract_id': 'str',
        'country_of_origin': 'list[str]',
        'data_type': 'str',
        'expiration_date': 'str',
        'export_classification': 'str',
        'originator': 'str',
        'personal_data': 'str',
        'security_classification': 'str'
    }

    attribute_map = {
        'contract_id': 'contractId',
        'country_of_origin': 'countryOfOrigin',
        'data_type': 'dataType',
        'expiration_date': 'expirationDate',
        'export_classification': 'exportClassification',
        'originator': 'originator',
        'personal_data': 'personalData',
        'security_classification': 'securityClassification'
    }

    def __init__(self, contract_id=None, country_of_origin=None, data_type=None, expiration_date=None, export_classification=None, originator=None, personal_data=None, security_classification=None, _configuration=None):  # noqa: E501
        """LegalTagProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contract_id = None
        self._country_of_origin = None
        self._data_type = None
        self._expiration_date = None
        self._export_classification = None
        self._originator = None
        self._personal_data = None
        self._security_classification = None
        self.discriminator = None

        self.contract_id = contract_id
        self.country_of_origin = country_of_origin
        self.data_type = data_type
        self.expiration_date = expiration_date
        self.export_classification = export_classification
        self.originator = originator
        self.personal_data = personal_data
        self.security_classification = security_classification

    @property
    def contract_id(self):
        """Gets the contract_id of this LegalTagProperties.  # noqa: E501

        The Id of the physical contract associated with the data being ingested.  # noqa: E501

        :return: The contract_id of this LegalTagProperties.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this LegalTagProperties.

        The Id of the physical contract associated with the data being ingested.  # noqa: E501

        :param contract_id: The contract_id of this LegalTagProperties.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this LegalTagProperties.  # noqa: E501

        The ISO Alpha 2 country code(s) of where the data relates to.  # noqa: E501

        :return: The country_of_origin of this LegalTagProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this LegalTagProperties.

        The ISO Alpha 2 country code(s) of where the data relates to.  # noqa: E501

        :param country_of_origin: The country_of_origin of this LegalTagProperties.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and country_of_origin is None:
            raise ValueError("Invalid value for `country_of_origin`, must not be `None`")  # noqa: E501

        self._country_of_origin = country_of_origin

    @property
    def data_type(self):
        """Gets the data_type of this LegalTagProperties.  # noqa: E501

        The type of data being ingested.  # noqa: E501

        :return: The data_type of this LegalTagProperties.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this LegalTagProperties.

        The type of data being ingested.  # noqa: E501

        :param data_type: The data_type of this LegalTagProperties.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def expiration_date(self):
        """Gets the expiration_date of this LegalTagProperties.  # noqa: E501

        The optional expiration date of the contract in the format YYYY-MM-DD  # noqa: E501

        :return: The expiration_date of this LegalTagProperties.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this LegalTagProperties.

        The optional expiration date of the contract in the format YYYY-MM-DD  # noqa: E501

        :param expiration_date: The expiration_date of this LegalTagProperties.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    @property
    def export_classification(self):
        """Gets the export_classification of this LegalTagProperties.  # noqa: E501

        The ECCN value of the data if one applies.  # noqa: E501

        :return: The export_classification of this LegalTagProperties.  # noqa: E501
        :rtype: str
        """
        return self._export_classification

    @export_classification.setter
    def export_classification(self, export_classification):
        """Sets the export_classification of this LegalTagProperties.

        The ECCN value of the data if one applies.  # noqa: E501

        :param export_classification: The export_classification of this LegalTagProperties.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and export_classification is None:
            raise ValueError("Invalid value for `export_classification`, must not be `None`")  # noqa: E501

        self._export_classification = export_classification

    @property
    def originator(self):
        """Gets the originator of this LegalTagProperties.  # noqa: E501

        The company who owns the data.  # noqa: E501

        :return: The originator of this LegalTagProperties.  # noqa: E501
        :rtype: str
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this LegalTagProperties.

        The company who owns the data.  # noqa: E501

        :param originator: The originator of this LegalTagProperties.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and originator is None:
            raise ValueError("Invalid value for `originator`, must not be `None`")  # noqa: E501

        self._originator = originator

    @property
    def personal_data(self):
        """Gets the personal_data of this LegalTagProperties.  # noqa: E501

        Whether the data contains any personally identifiable data.  # noqa: E501

        :return: The personal_data of this LegalTagProperties.  # noqa: E501
        :rtype: str
        """
        return self._personal_data

    @personal_data.setter
    def personal_data(self, personal_data):
        """Sets the personal_data of this LegalTagProperties.

        Whether the data contains any personally identifiable data.  # noqa: E501

        :param personal_data: The personal_data of this LegalTagProperties.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and personal_data is None:
            raise ValueError("Invalid value for `personal_data`, must not be `None`")  # noqa: E501

        self._personal_data = personal_data

    @property
    def security_classification(self):
        """Gets the security_classification of this LegalTagProperties.  # noqa: E501

        The security classification of the data.  # noqa: E501

        :return: The security_classification of this LegalTagProperties.  # noqa: E501
        :rtype: str
        """
        return self._security_classification

    @security_classification.setter
    def security_classification(self, security_classification):
        """Sets the security_classification of this LegalTagProperties.

        The security classification of the data.  # noqa: E501

        :param security_classification: The security_classification of this LegalTagProperties.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and security_classification is None:
            raise ValueError("Invalid value for `security_classification`, must not be `None`")  # noqa: E501

        self._security_classification = security_classification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegalTagProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalTagProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalTagProperties):
            return True

        return self.to_dict() != other.to_dict()
