# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FileMetaItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'name': 'str',
        'persistable_reference': 'str',
        'property_names': 'list[str]',
        'property_values': 'list[str]',
        'uncertainty': 'float'
    }

    attribute_map = {
        'kind': 'kind',
        'name': 'name',
        'persistable_reference': 'persistableReference',
        'property_names': 'propertyNames',
        'property_values': 'propertyValues',
        'uncertainty': 'uncertainty'
    }

    def __init__(self, kind=None, name=None, persistable_reference=None, property_names=None, property_values=None, uncertainty=None, _configuration=None):  # noqa: E501
        """FileMetaItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._kind = None
        self._name = None
        self._persistable_reference = None
        self._property_names = None
        self._property_values = None
        self._uncertainty = None
        self.discriminator = None

        self.kind = kind
        if name is not None:
            self.name = name
        self.persistable_reference = persistable_reference
        if property_names is not None:
            self.property_names = property_names
        if property_values is not None:
            self.property_values = property_values
        if uncertainty is not None:
            self.uncertainty = uncertainty

    @property
    def kind(self):
        """Gets the kind of this FileMetaItem.  # noqa: E501

        The kind of reference, unit, measurement, CRS or azimuth reference.  # noqa: E501

        :return: The kind of this FileMetaItem.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this FileMetaItem.

        The kind of reference, unit, measurement, CRS or azimuth reference.  # noqa: E501

        :param kind: The kind of this FileMetaItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["CRS", "Unit", "Measurement", "AzimuthReference", "DateTime"]  # noqa: E501
        if (self._configuration.client_side_validation and
                kind not in allowed_values):
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this FileMetaItem.  # noqa: E501

        The name of the CRS or the symbol/name of the unit  # noqa: E501

        :return: The name of this FileMetaItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileMetaItem.

        The name of the CRS or the symbol/name of the unit  # noqa: E501

        :param name: The name of this FileMetaItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def persistable_reference(self):
        """Gets the persistable_reference of this FileMetaItem.  # noqa: E501

        The persistable reference string uniquely identifying the CRS or Unit  # noqa: E501

        :return: The persistable_reference of this FileMetaItem.  # noqa: E501
        :rtype: str
        """
        return self._persistable_reference

    @persistable_reference.setter
    def persistable_reference(self, persistable_reference):
        """Sets the persistable_reference of this FileMetaItem.

        The persistable reference string uniquely identifying the CRS or Unit  # noqa: E501

        :param persistable_reference: The persistable_reference of this FileMetaItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and persistable_reference is None:
            raise ValueError("Invalid value for `persistable_reference`, must not be `None`")  # noqa: E501

        self._persistable_reference = persistable_reference

    @property
    def property_names(self):
        """Gets the property_names of this FileMetaItem.  # noqa: E501

        The list of property names, to which this meta data item provides Unit/CRS context to. Data structures, which come in a single frame of reference, can register the property name, others require a full path like \"data.structureA.propertyB\" to define a unique context.  # noqa: E501

        :return: The property_names of this FileMetaItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_names

    @property_names.setter
    def property_names(self, property_names):
        """Sets the property_names of this FileMetaItem.

        The list of property names, to which this meta data item provides Unit/CRS context to. Data structures, which come in a single frame of reference, can register the property name, others require a full path like \"data.structureA.propertyB\" to define a unique context.  # noqa: E501

        :param property_names: The property_names of this FileMetaItem.  # noqa: E501
        :type: list[str]
        """

        self._property_names = property_names

    @property
    def property_values(self):
        """Gets the property_values of this FileMetaItem.  # noqa: E501

        The list of property values, to which this meta data item provides Unit/CRS context to. Typically a unit symbol is a value to a data structure; this symbol is then registered in this propertyValues array and the persistableReference provides the absolute reference.  # noqa: E501

        :return: The property_values of this FileMetaItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_values

    @property_values.setter
    def property_values(self, property_values):
        """Sets the property_values of this FileMetaItem.

        The list of property values, to which this meta data item provides Unit/CRS context to. Typically a unit symbol is a value to a data structure; this symbol is then registered in this propertyValues array and the persistableReference provides the absolute reference.  # noqa: E501

        :param property_values: The property_values of this FileMetaItem.  # noqa: E501
        :type: list[str]
        """

        self._property_values = property_values

    @property
    def uncertainty(self):
        """Gets the uncertainty of this FileMetaItem.  # noqa: E501

        The uncertainty of the values measured given the unit or CRS unit.  # noqa: E501

        :return: The uncertainty of this FileMetaItem.  # noqa: E501
        :rtype: float
        """
        return self._uncertainty

    @uncertainty.setter
    def uncertainty(self, uncertainty):
        """Sets the uncertainty of this FileMetaItem.

        The uncertainty of the values measured given the unit or CRS unit.  # noqa: E501

        :param uncertainty: The uncertainty of this FileMetaItem.  # noqa: E501
        :type: float
        """

        self._uncertainty = uncertainty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileMetaItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileMetaItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileMetaItem):
            return True

        return self.to_dict() != other.to_dict()
