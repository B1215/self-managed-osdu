# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SchemaInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'date_created': 'datetime',
        'schema_identity': 'SchemaIdentity',
        'scope': 'str',
        'status': 'str',
        'superseded_by': 'SchemaIdentity'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'date_created': 'dateCreated',
        'schema_identity': 'schemaIdentity',
        'scope': 'scope',
        'status': 'status',
        'superseded_by': 'supersededBy'
    }

    def __init__(self, created_by=None, date_created=None, schema_identity=None, scope=None, status=None, superseded_by=None, _configuration=None):  # noqa: E501
        """SchemaInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_by = None
        self._date_created = None
        self._schema_identity = None
        self._scope = None
        self._status = None
        self._superseded_by = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        self.schema_identity = schema_identity
        if scope is not None:
            self.scope = scope
        self.status = status
        if superseded_by is not None:
            self.superseded_by = superseded_by

    @property
    def created_by(self):
        """Gets the created_by of this SchemaInfo.  # noqa: E501

        The user who created the schema. This value is taken from API caller token.  # noqa: E501

        :return: The created_by of this SchemaInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SchemaInfo.

        The user who created the schema. This value is taken from API caller token.  # noqa: E501

        :param created_by: The created_by of this SchemaInfo.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this SchemaInfo.  # noqa: E501

        The UTC date time of the entity creation  # noqa: E501

        :return: The date_created of this SchemaInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SchemaInfo.

        The UTC date time of the entity creation  # noqa: E501

        :param date_created: The date_created of this SchemaInfo.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def schema_identity(self):
        """Gets the schema_identity of this SchemaInfo.  # noqa: E501


        :return: The schema_identity of this SchemaInfo.  # noqa: E501
        :rtype: SchemaIdentity
        """
        return self._schema_identity

    @schema_identity.setter
    def schema_identity(self, schema_identity):
        """Sets the schema_identity of this SchemaInfo.


        :param schema_identity: The schema_identity of this SchemaInfo.  # noqa: E501
        :type: SchemaIdentity
        """
        if self._configuration.client_side_validation and schema_identity is None:
            raise ValueError("Invalid value for `schema_identity`, must not be `None`")  # noqa: E501

        self._schema_identity = schema_identity

    @property
    def scope(self):
        """Gets the scope of this SchemaInfo.  # noqa: E501

        Schema Scope - is it internal or shared. This is a system defined attribute based on partition-id passed.  # noqa: E501

        :return: The scope of this SchemaInfo.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SchemaInfo.

        Schema Scope - is it internal or shared. This is a system defined attribute based on partition-id passed.  # noqa: E501

        :param scope: The scope of this SchemaInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL", "SHARED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                scope not in allowed_values):
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def status(self):
        """Gets the status of this SchemaInfo.  # noqa: E501

        Schema lifecycle status  # noqa: E501

        :return: The status of this SchemaInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SchemaInfo.

        Schema lifecycle status  # noqa: E501

        :param status: The status of this SchemaInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PUBLISHED", "OBSOLETE", "DEVELOPMENT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def superseded_by(self):
        """Gets the superseded_by of this SchemaInfo.  # noqa: E501


        :return: The superseded_by of this SchemaInfo.  # noqa: E501
        :rtype: SchemaIdentity
        """
        return self._superseded_by

    @superseded_by.setter
    def superseded_by(self, superseded_by):
        """Sets the superseded_by of this SchemaInfo.


        :param superseded_by: The superseded_by of this SchemaInfo.  # noqa: E501
        :type: SchemaIdentity
        """

        self._superseded_by = superseded_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchemaInfo):
            return True

        return self.to_dict() != other.to_dict()
