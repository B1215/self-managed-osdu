# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StorageRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'kind': 'str',
        'acl': 'StorageAcl',
        'legal': 'StorageLegal',
        'data': 'dict(str, object)',
        'history': 'StorageRecordHistory'
    }

    attribute_map = {
        'id': 'id',
        'kind': 'kind',
        'acl': 'acl',
        'legal': 'legal',
        'data': 'data',
        'history': 'history'
    }

    def __init__(self, id=None, kind=None, acl=None, legal=None, data=None, history=None, _configuration=None):  # noqa: E501
        """StorageRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._kind = None
        self._acl = None
        self._legal = None
        self._data = None
        self._history = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.kind = kind
        self.acl = acl
        self.legal = legal
        self.data = data
        if history is not None:
            self.history = history

    @property
    def id(self):
        """Gets the id of this StorageRecord.  # noqa: E501

        Unique identifier in whole Data Lake. When not provided, Data Lake will create and assign an id to the record. Must follow the naming convention: {OSDU-Account-Id}:{object-type}:{uuid}.  # noqa: E501

        :return: The id of this StorageRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageRecord.

        Unique identifier in whole Data Lake. When not provided, Data Lake will create and assign an id to the record. Must follow the naming convention: {OSDU-Account-Id}:{object-type}:{uuid}.  # noqa: E501

        :param id: The id of this StorageRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and not re.search(r'^[\\w\\-\\.]+:[\\w-\\.\/]+:.+$', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^[\\w\\-\\.]+:[\\w-\\.\/]+:.+$/`")  # noqa: E501

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this StorageRecord.  # noqa: E501

        Kind of data it is being ingested. Must follow the naming convention: {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}.  # noqa: E501

        :return: The kind of this StorageRecord.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this StorageRecord.

        Kind of data it is being ingested. Must follow the naming convention: {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}.  # noqa: E501

        :param kind: The kind of this StorageRecord.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                kind is not None and not re.search(r'^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\/]+:[0-9]+.[0-9]+.[0-9]+$', kind)):  # noqa: E501
            raise ValueError(r"Invalid value for `kind`, must be a follow pattern or equal to `/^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\/]+:[0-9]+.[0-9]+.[0-9]+$/`")  # noqa: E501

        self._kind = kind

    @property
    def acl(self):
        """Gets the acl of this StorageRecord.  # noqa: E501

        Group of users who have access to the record.  # noqa: E501

        :return: The acl of this StorageRecord.  # noqa: E501
        :rtype: StorageAcl
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this StorageRecord.

        Group of users who have access to the record.  # noqa: E501

        :param acl: The acl of this StorageRecord.  # noqa: E501
        :type: StorageAcl
        """
        if self._configuration.client_side_validation and acl is None:
            raise ValueError("Invalid value for `acl`, must not be `None`")  # noqa: E501

        self._acl = acl

    @property
    def legal(self):
        """Gets the legal of this StorageRecord.  # noqa: E501

        Attributes which represent the legal constraints associated with the record.  # noqa: E501

        :return: The legal of this StorageRecord.  # noqa: E501
        :rtype: StorageLegal
        """
        return self._legal

    @legal.setter
    def legal(self, legal):
        """Sets the legal of this StorageRecord.

        Attributes which represent the legal constraints associated with the record.  # noqa: E501

        :param legal: The legal of this StorageRecord.  # noqa: E501
        :type: StorageLegal
        """
        if self._configuration.client_side_validation and legal is None:
            raise ValueError("Invalid value for `legal`, must not be `None`")  # noqa: E501

        self._legal = legal

    @property
    def data(self):
        """Gets the data of this StorageRecord.  # noqa: E501

        Record payload represented as a list of key-value pairs.  # noqa: E501

        :return: The data of this StorageRecord.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StorageRecord.

        Record payload represented as a list of key-value pairs.  # noqa: E501

        :param data: The data of this StorageRecord.  # noqa: E501
        :type: dict(str, object)
        """
        if self._configuration.client_side_validation and data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def history(self):
        """Gets the history of this StorageRecord.  # noqa: E501

        Record ancestry information.  # noqa: E501

        :return: The history of this StorageRecord.  # noqa: E501
        :rtype: StorageRecordHistory
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this StorageRecord.

        Record ancestry information.  # noqa: E501

        :param history: The history of this StorageRecord.  # noqa: E501
        :type: StorageRecordHistory
        """

        self._history = history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageRecord):
            return True

        return self.to_dict() != other.to_dict()
