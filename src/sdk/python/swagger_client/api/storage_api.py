# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StorageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_or_update_records(self, osdu_account_id, **kwargs):  # noqa: E501
        """Create or update records  # noqa: E501

        The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_records(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param bool skipdupes: Skip duplicates when updating records with the same value.
        :param list[StorageRecord] body:
        :return: StorageRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_records_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_records_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
            return data

    def create_or_update_records_with_http_info(self, osdu_account_id, **kwargs):  # noqa: E501
        """Create or update records  # noqa: E501

        The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_records_with_http_info(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param bool skipdupes: Skip duplicates when updating records with the same value.
        :param list[StorageRecord] body:
        :return: StorageRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'skipdupes', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `create_or_update_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skipdupes' in params:
            query_params.append(('skipdupes', params['skipdupes']))  # noqa: E501

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/records', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_record(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Delete record  # noqa: E501

        The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_record(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_record_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_record_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
            return data

    def delete_record_with_http_info(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Delete record  # noqa: E501

        The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_record_with_http_info(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'osdu_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_record`")  # noqa: E501
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `delete_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/records/{id}:delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_records(self, data_partition_id, partition_info, **kwargs):  # noqa: E501
        """Soft delete of multiple records  # noqa: E501

        The API performs a soft deletion of the given list of records. Required roles: 'users.datalake.editors' or 'users.datalake.admins'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_records(data_partition_id, partition_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Partition Id (required)
        :param list[str] partition_info: partitionInfo (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_records_with_http_info(data_partition_id, partition_info, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_records_with_http_info(data_partition_id, partition_info, **kwargs)  # noqa: E501
            return data

    def delete_records_with_http_info(self, data_partition_id, partition_info, **kwargs):  # noqa: E501
        """Soft delete of multiple records  # noqa: E501

        The API performs a soft deletion of the given list of records. Required roles: 'users.datalake.editors' or 'users.datalake.admins'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_records_with_http_info(data_partition_id, partition_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Partition Id (required)
        :param list[str] partition_info: partitionInfo (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'partition_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `delete_records`")  # noqa: E501
        # verify the required parameter 'partition_info' is set
        if self.api_client.client_side_validation and ('partition_info' not in params or
                                                       params['partition_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `partition_info` when calling `delete_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partition_info' in params:
            body_params = params['partition_info']
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/records/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_records(self, osdu_account_id, **kwargs):  # noqa: E501
        """Fetch records  # noqa: E501

        The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_records(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param StorageMultiRecordIds body:
        :return: StorageMultiRecordIds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_records_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_records_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
            return data

    def fetch_records_with_http_info(self, osdu_account_id, **kwargs):  # noqa: E501
        """Fetch records  # noqa: E501

        The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_records_with_http_info(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param StorageMultiRecordIds body:
        :return: StorageMultiRecordIds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `fetch_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/query/records', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageMultiRecordIds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_kinds(self, osdu_account_id, **kwargs):  # noqa: E501
        """Get all kinds  # noqa: E501

        The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_kinds(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active account account) which the users choose to use with the Search API. (required)
        :param str cursor: Cursor
        :param int limit: Page Size
        :return: StorageQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_kinds_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_kinds_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
            return data

    def get_all_kinds_with_http_info(self, osdu_account_id, **kwargs):  # noqa: E501
        """Get all kinds  # noqa: E501

        The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_kinds_with_http_info(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active account account) which the users choose to use with the Search API. (required)
        :param str cursor: Cursor
        :param int limit: Page Size
        :return: StorageQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'cursor', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_kinds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `get_all_kinds`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/query/kinds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_record_from_kind(self, osdu_account_id, **kwargs):  # noqa: E501
        """Get all record from kind  # noqa: E501

        The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_record_from_kind(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param str cursor: Cursor
        :param int limit: Page Size
        :param str kind: Filter Kind
        :return: StorageQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_record_from_kind_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_record_from_kind_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
            return data

    def get_all_record_from_kind_with_http_info(self, osdu_account_id, **kwargs):  # noqa: E501
        """Get all record from kind  # noqa: E501

        The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_record_from_kind_with_http_info(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param str cursor: Cursor
        :param int limit: Page Size
        :param str kind: Filter Kind
        :return: StorageQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'cursor', 'limit', 'kind']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_record_from_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `get_all_record_from_kind`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/query/records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_record_versions(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Get all record versions  # noqa: E501

        The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_record_versions(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :return: StorageRecordVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_record_versions_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_record_versions_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
            return data

    def get_all_record_versions_with_http_info(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Get all record versions  # noqa: E501

        The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_record_versions_with_http_info(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :return: StorageRecordVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'osdu_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_record_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_all_record_versions`")  # noqa: E501
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `get_all_record_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/records/versions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageRecordVersions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_record(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Get record  # noqa: E501

        This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_record(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param list[str] attribute: Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.
        :return: StorageRecordData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_record_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_record_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
            return data

    def get_record_with_http_info(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Get record  # noqa: E501

        This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_record_with_http_info(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param list[str] attribute: Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.
        :return: StorageRecordData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'osdu_account_id', 'attribute']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_record`")  # noqa: E501
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `get_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attribute' in params:
            query_params.append(('attribute', params['attribute']))  # noqa: E501
            collection_formats['attribute'] = 'multi'  # noqa: E501

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/records/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageRecordData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_record_version(self, id, version, osdu_account_id, **kwargs):  # noqa: E501
        """Get record version  # noqa: E501

        The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_record_version(id, version, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param int version: Record version (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param list[str] attribute: Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.
        :return: StorageRecordData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_record_version_with_http_info(id, version, osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_record_version_with_http_info(id, version, osdu_account_id, **kwargs)  # noqa: E501
            return data

    def get_record_version_with_http_info(self, id, version, osdu_account_id, **kwargs):  # noqa: E501
        """Get record version  # noqa: E501

        The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_record_version_with_http_info(id, version, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param int version: Record version (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param list[str] attribute: Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.
        :return: StorageRecordData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'version', 'osdu_account_id', 'attribute']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_record_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_record_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `get_record_version`")  # noqa: E501
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `get_record_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'attribute' in params:
            query_params.append(('attribute', params['attribute']))  # noqa: E501
            collection_formats['attribute'] = 'multi'  # noqa: E501

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/records/{id}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageRecordData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_update_records(self, osdu_account_id, **kwargs):  # noqa: E501
        """Modify record metadata attributes using patch operations  # noqa: E501

        The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: 'users.datalake.editors' or 'users.datalake.admins'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_update_records(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param list[StorageRecordBulkUpdateParam] body:
        :return: StorageBulkUpdateRecordsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_update_records_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_update_records_with_http_info(osdu_account_id, **kwargs)  # noqa: E501
            return data

    def patch_update_records_with_http_info(self, osdu_account_id, **kwargs):  # noqa: E501
        """Modify record metadata attributes using patch operations  # noqa: E501

        The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: 'users.datalake.editors' or 'users.datalake.admins'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_update_records_with_http_info(osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param list[StorageRecordBulkUpdateParam] body:
        :return: StorageBulkUpdateRecordsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_update_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `patch_update_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/records', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageBulkUpdateRecordsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purge_record(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Purge record  # noqa: E501

        The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purge_record(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purge_record_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purge_record_with_http_info(id, osdu_account_id, **kwargs)  # noqa: E501
            return data

    def purge_record_with_http_info(self, id, osdu_account_id, **kwargs):  # noqa: E501
        """Purge record  # noqa: E501

        The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purge_record_with_http_info(id, osdu_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Record id (required)
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'osdu_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purge_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `purge_record`")  # noqa: E501
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `purge_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/storage/v2/records/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
