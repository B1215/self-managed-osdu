# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EntitlementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_member_using_post(self, data_partition_id, group_email, partition_info, **kwargs):  # noqa: E501
        """Add Member to Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_using_post(data_partition_id, group_email, partition_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Partition Name (required)
        :param str group_email: group_email (required)
        :param EntitlementMemberDto partition_info: partitionInfo (required)
        :return: EntitlementMemberDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_member_using_post_with_http_info(data_partition_id, group_email, partition_info, **kwargs)  # noqa: E501
        else:
            (data) = self.add_member_using_post_with_http_info(data_partition_id, group_email, partition_info, **kwargs)  # noqa: E501
            return data

    def add_member_using_post_with_http_info(self, data_partition_id, group_email, partition_info, **kwargs):  # noqa: E501
        """Add Member to Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_using_post_with_http_info(data_partition_id, group_email, partition_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Partition Name (required)
        :param str group_email: group_email (required)
        :param EntitlementMemberDto partition_info: partitionInfo (required)
        :return: EntitlementMemberDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'group_email', 'partition_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `add_member_using_post`")  # noqa: E501
        # verify the required parameter 'group_email' is set
        if self.api_client.client_side_validation and ('group_email' not in params or
                                                       params['group_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_email` when calling `add_member_using_post`")  # noqa: E501
        # verify the required parameter 'partition_info' is set
        if self.api_client.client_side_validation and ('partition_info' not in params or
                                                       params['partition_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `partition_info` when calling `add_member_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_email' in params:
            path_params['group_email'] = params['group_email']  # noqa: E501

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partition_info' in params:
            body_params = params['partition_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/groups/{group_email}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntitlementMemberDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_group_using_post(self, data_partition_id, **kwargs):  # noqa: E501
        """Create a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_using_post(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Partition Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_group_using_post_with_http_info(data_partition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_group_using_post_with_http_info(data_partition_id, **kwargs)  # noqa: E501
            return data

    def create_group_using_post_with_http_info(self, data_partition_id, **kwargs):  # noqa: E501
        """Create a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_using_post_with_http_info(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Partition Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `create_group_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_group_using_delete(self, data_partition_id, group_email, **kwargs):  # noqa: E501
        """Delete a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group_using_delete(data_partition_id, group_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :param str group_email: group_email (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_group_using_delete_with_http_info(data_partition_id, group_email, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_group_using_delete_with_http_info(data_partition_id, group_email, **kwargs)  # noqa: E501
            return data

    def delete_group_using_delete_with_http_info(self, data_partition_id, group_email, **kwargs):  # noqa: E501
        """Delete a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group_using_delete_with_http_info(data_partition_id, group_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :param str group_email: group_email (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'group_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `delete_group_using_delete`")  # noqa: E501
        # verify the required parameter 'group_email' is set
        if self.api_client.client_side_validation and ('group_email' not in params or
                                                       params['group_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_email` when calling `delete_group_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_email' in params:
            path_params['group_email'] = params['group_email']  # noqa: E501

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/groups/{group_email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_member_using_delete(self, data_partition_id, member_email, **kwargs):  # noqa: E501
        """Delete a User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_using_delete(data_partition_id, member_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Data Partition Id (required)
        :param str member_email: member_email (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_member_using_delete_with_http_info(data_partition_id, member_email, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_member_using_delete_with_http_info(data_partition_id, member_email, **kwargs)  # noqa: E501
            return data

    def delete_member_using_delete_with_http_info(self, data_partition_id, member_email, **kwargs):  # noqa: E501
        """Delete a User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_using_delete_with_http_info(data_partition_id, member_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Data Partition Id (required)
        :param str member_email: member_email (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'member_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_member_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `delete_member_using_delete`")  # noqa: E501
        # verify the required parameter 'member_email' is set
        if self.api_client.client_side_validation and ('member_email' not in params or
                                                       params['member_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member_email` when calling `delete_member_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'member_email' in params:
            path_params['member_email'] = params['member_email']  # noqa: E501

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/members/{member_email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_member_using_delete1(self, data_partition_id, group_email, member_email, **kwargs):  # noqa: E501
        """Remove Member from Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_using_delete1(data_partition_id, group_email, member_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Data Partition Id (required)
        :param str group_email: group_email (required)
        :param str member_email: member_email (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_member_using_delete1_with_http_info(data_partition_id, group_email, member_email, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_member_using_delete1_with_http_info(data_partition_id, group_email, member_email, **kwargs)  # noqa: E501
            return data

    def delete_member_using_delete1_with_http_info(self, data_partition_id, group_email, member_email, **kwargs):  # noqa: E501
        """Remove Member from Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_member_using_delete1_with_http_info(data_partition_id, group_email, member_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Data Partition Id (required)
        :param str group_email: group_email (required)
        :param str member_email: member_email (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'group_email', 'member_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_member_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `delete_member_using_delete1`")  # noqa: E501
        # verify the required parameter 'group_email' is set
        if self.api_client.client_side_validation and ('group_email' not in params or
                                                       params['group_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_email` when calling `delete_member_using_delete1`")  # noqa: E501
        # verify the required parameter 'member_email' is set
        if self.api_client.client_side_validation and ('member_email' not in params or
                                                       params['member_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member_email` when calling `delete_member_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_email' in params:
            path_params['group_email'] = params['group_email']  # noqa: E501
        if 'member_email' in params:
            path_params['member_email'] = params['member_email']  # noqa: E501

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/groups/{group_email}/members/{member_email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_group_members_using_get(self, data_partition_id, group_email, **kwargs):  # noqa: E501
        """List Group Members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_group_members_using_get(data_partition_id, group_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Data Partition Id (required)
        :param str group_email: group_email (required)
        :param str role: role
        :param bool include_type: includeType
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_group_members_using_get_with_http_info(data_partition_id, group_email, **kwargs)  # noqa: E501
        else:
            (data) = self.list_group_members_using_get_with_http_info(data_partition_id, group_email, **kwargs)  # noqa: E501
            return data

    def list_group_members_using_get_with_http_info(self, data_partition_id, group_email, **kwargs):  # noqa: E501
        """List Group Members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_group_members_using_get_with_http_info(data_partition_id, group_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Data Partition Id (required)
        :param str group_email: group_email (required)
        :param str role: role
        :param bool include_type: includeType
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'group_email', 'role', 'include_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_group_members_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `list_group_members_using_get`")  # noqa: E501
        # verify the required parameter 'group_email' is set
        if self.api_client.client_side_validation and ('group_email' not in params or
                                                       params['group_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_email` when calling `list_group_members_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_email' in params:
            path_params['group_email'] = params['group_email']  # noqa: E501

        query_params = []
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'include_type' in params:
            query_params.append(('includeType', params['include_type']))  # noqa: E501

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/groups/{group_email}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_groups_on_behalf_of_using_get(self, data_partition_id, member_email, **kwargs):  # noqa: E501
        """List Assigned Groups for User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups_on_behalf_of_using_get(data_partition_id, member_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :param str member_email: member_email (required)
        :param str type: type
        :param str appid: appid
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_groups_on_behalf_of_using_get_with_http_info(data_partition_id, member_email, **kwargs)  # noqa: E501
        else:
            (data) = self.list_groups_on_behalf_of_using_get_with_http_info(data_partition_id, member_email, **kwargs)  # noqa: E501
            return data

    def list_groups_on_behalf_of_using_get_with_http_info(self, data_partition_id, member_email, **kwargs):  # noqa: E501
        """List Assigned Groups for User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups_on_behalf_of_using_get_with_http_info(data_partition_id, member_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :param str member_email: member_email (required)
        :param str type: type
        :param str appid: appid
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'member_email', 'type', 'appid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_groups_on_behalf_of_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `list_groups_on_behalf_of_using_get`")  # noqa: E501
        # verify the required parameter 'member_email' is set
        if self.api_client.client_side_validation and ('member_email' not in params or
                                                       params['member_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member_email` when calling `list_groups_on_behalf_of_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'member_email' in params:
            path_params['member_email'] = params['member_email']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'appid' in params:
            query_params.append(('appid', params['appid']))  # noqa: E501

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/members/{member_email}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_groups_using_get(self, data_partition_id, **kwargs):  # noqa: E501
        """List Assigned Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups_using_get(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :return: EntitlementGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_groups_using_get_with_http_info(data_partition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_groups_using_get_with_http_info(data_partition_id, **kwargs)  # noqa: E501
            return data

    def list_groups_using_get_with_http_info(self, data_partition_id, **kwargs):  # noqa: E501
        """List Assigned Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups_using_get_with_http_info(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :return: EntitlementGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_groups_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `list_groups_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntitlementGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_group_using_patch(self, data_partition_id, group_email, **kwargs):  # noqa: E501
        """Updates Items in Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_using_patch(data_partition_id, group_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :param str group_email: group_email (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_group_using_patch_with_http_info(data_partition_id, group_email, **kwargs)  # noqa: E501
        else:
            (data) = self.update_group_using_patch_with_http_info(data_partition_id, group_email, **kwargs)  # noqa: E501
            return data

    def update_group_using_patch_with_http_info(self, data_partition_id, group_email, **kwargs):  # noqa: E501
        """Updates Items in Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_using_patch_with_http_info(data_partition_id, group_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: tenant (required)
        :param str group_email: group_email (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'group_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group_using_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `update_group_using_patch`")  # noqa: E501
        # verify the required parameter 'group_email' is set
        if self.api_client.client_side_validation and ('group_email' not in params or
                                                       params['group_email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_email` when calling `update_group_using_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_email' in params:
            path_params['group_email'] = params['group_email']  # noqa: E501

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/entitlements/v2/groups/{group_email}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
