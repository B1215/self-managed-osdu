# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkflowApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_workflow(self, workflow_name, **kwargs):  # noqa: E501
        """Delete a workflow defintion.  # noqa: E501

        Delete a workflow by it's name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of the Workflow to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflow_with_http_info(workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflow_with_http_info(workflow_name, **kwargs)  # noqa: E501
            return data

    def delete_workflow_with_http_info(self, workflow_name, **kwargs):  # noqa: E501
        """Delete a workflow defintion.  # noqa: E501

        Delete a workflow by it's name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_with_http_info(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of the Workflow to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_name' is set
        if self.api_client.client_side_validation and ('workflow_name' not in params or
                                                       params['workflow_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_name` when calling `delete_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_name' in params:
            path_params['workflow_name'] = params['workflow_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow/{workflow_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy_workflow(self, **kwargs):  # noqa: E501
        """Creates workflow definition with standard orchestrator operators.  # noqa: E501

        API to create a new workflow using standard operators of orchestrator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_workflow(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Workflow body: Request payload for deploying new workflow.
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_workflow_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deploy_workflow_with_http_info(**kwargs)  # noqa: E501
            return data

    def deploy_workflow_with_http_info(self, **kwargs):  # noqa: E501
        """Creates workflow definition with standard orchestrator operators.  # noqa: E501

        API to create a new workflow using standard operators of orchestrator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_workflow_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Workflow body: Request payload for deploying new workflow.
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_workflow" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_workflow_runs(self, workflow_name, **kwargs):  # noqa: E501
        """Get all run instances of a workflow.  # noqa: E501

        Get all run instances for a worflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_workflow_runs(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of the Workflow for which the execution details has to be fetched. (required)
        :param str prefix: A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \"backfill\"
        :param str start_date: The start date where this call should start creating workflow runs from (inclusive)
        :param bool end_date: The end date where this call should stop creating workflow runs at (inclusive)
        :param int limit: The maximum number of workflow runs to create in a single request. Maximum is 500.
        :param str cursor: Cursor for subsequent request.
        :param bool partial: Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created.
        :param str conf: JSON configuration added to the Workflow run conf attribute
        :return: list[WorkflowRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_workflow_runs_with_http_info(workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_workflow_runs_with_http_info(workflow_name, **kwargs)  # noqa: E501
            return data

    def get_all_workflow_runs_with_http_info(self, workflow_name, **kwargs):  # noqa: E501
        """Get all run instances of a workflow.  # noqa: E501

        Get all run instances for a worflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_workflow_runs_with_http_info(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of the Workflow for which the execution details has to be fetched. (required)
        :param str prefix: A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \"backfill\"
        :param str start_date: The start date where this call should start creating workflow runs from (inclusive)
        :param bool end_date: The end date where this call should stop creating workflow runs at (inclusive)
        :param int limit: The maximum number of workflow runs to create in a single request. Maximum is 500.
        :param str cursor: Cursor for subsequent request.
        :param bool partial: Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created.
        :param str conf: JSON configuration added to the Workflow run conf attribute
        :return: list[WorkflowRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_name', 'prefix', 'start_date', 'end_date', 'limit', 'cursor', 'partial', 'conf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_workflow_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_name' is set
        if self.api_client.client_side_validation and ('workflow_name' not in params or
                                                       params['workflow_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_name` when calling `get_all_workflow_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_name' in params:
            path_params['workflow_name'] = params['workflow_name']  # noqa: E501

        query_params = []
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'partial' in params:
            query_params.append(('partial', params['partial']))  # noqa: E501
        if 'conf' in params:
            query_params.append(('conf', params['conf']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow/{workflow_name}/workflowRun', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkflowRun]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_run(self, workflow_name, run_id, **kwargs):  # noqa: E501
        """Get details for a speciffic workflow run instance.  # noqa: E501

        Get an execution instances for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_run(workflow_name, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of Workflow. (required)
        :param str run_id: Run id for the worfkow. (required)
        :return: WorkflowRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_run_with_http_info(workflow_name, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_run_with_http_info(workflow_name, run_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_run_with_http_info(self, workflow_name, run_id, **kwargs):  # noqa: E501
        """Get details for a speciffic workflow run instance.  # noqa: E501

        Get an execution instances for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_run_with_http_info(workflow_name, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of Workflow. (required)
        :param str run_id: Run id for the worfkow. (required)
        :return: WorkflowRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_name', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_name' is set
        if self.api_client.client_side_validation and ('workflow_name' not in params or
                                                       params['workflow_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_name` when calling `get_workflow_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if self.api_client.client_side_validation and ('run_id' not in params or
                                                       params['run_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `run_id` when calling `get_workflow_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_name' in params:
            path_params['workflow_name'] = params['workflow_name']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_workflow(self, **kwargs):  # noqa: E501
        """List all the workflow applicable for a tenant.  # noqa: E501

        List all the workflows for the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_workflow(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: Filter workflow names which start with  the full prefix specified.
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_workflow_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_all_workflow_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_all_workflow_with_http_info(self, **kwargs):  # noqa: E501
        """List all the workflow applicable for a tenant.  # noqa: E501

        List all the workflows for the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_workflow_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: Filter workflow names which start with  the full prefix specified.
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_workflow" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Workflow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_workflow(self, workflow_name, **kwargs):  # noqa: E501
        """Trigger a workflow.  # noqa: E501

        Trigger a workflow mentioned in payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_workflow(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of the Workflow to run. (required)
        :param WorkflowTriggerRequest body:
        :return: WorkflowRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_workflow_with_http_info(workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_workflow_with_http_info(workflow_name, **kwargs)  # noqa: E501
            return data

    def trigger_workflow_with_http_info(self, workflow_name, **kwargs):  # noqa: E501
        """Trigger a workflow.  # noqa: E501

        Trigger a workflow mentioned in payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_workflow_with_http_info(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of the Workflow to run. (required)
        :param WorkflowTriggerRequest body:
        :return: WorkflowRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_name' is set
        if self.api_client.client_side_validation and ('workflow_name' not in params or
                                                       params['workflow_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_name` when calling `trigger_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_name' in params:
            path_params['workflow_name'] = params['workflow_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow/{workflow_name}/workflowRun', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_workflow_run(self, workflow_name, run_id, **kwargs):  # noqa: E501
        """Update the workflow run instance.  # noqa: E501

        Update workflow run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_run(workflow_name, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of Workflow. (required)
        :param str run_id: Run id for the worfkow. (required)
        :param WorkflowRun body:
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_workflow_run_with_http_info(workflow_name, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_workflow_run_with_http_info(workflow_name, run_id, **kwargs)  # noqa: E501
            return data

    def update_workflow_run_with_http_info(self, workflow_name, run_id, **kwargs):  # noqa: E501
        """Update the workflow run instance.  # noqa: E501

        Update workflow run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_run_with_http_info(workflow_name, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Unique Name of Workflow. (required)
        :param str run_id: Run id for the worfkow. (required)
        :param WorkflowRun body:
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_name', 'run_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workflow_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_name' is set
        if self.api_client.client_side_validation and ('workflow_name' not in params or
                                                       params['workflow_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_name` when calling `update_workflow_run`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if self.api_client.client_side_validation and ('run_id' not in params or
                                                       params['run_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `run_id` when calling `update_workflow_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_name' in params:
            path_params['workflow_name'] = params['workflow_name']  # noqa: E501
        if 'run_id' in params:
            path_params['runId'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_workflow(self, workflow_name, **kwargs):  # noqa: E501
        """Get complete details for a workflow.  # noqa: E501

        Get complete details for an workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_workflow(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Name of the Workflow. (required)
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_workflow_with_http_info(workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.view_workflow_with_http_info(workflow_name, **kwargs)  # noqa: E501
            return data

    def view_workflow_with_http_info(self, workflow_name, **kwargs):  # noqa: E501
        """Get complete details for a workflow.  # noqa: E501

        Get complete details for an workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_workflow_with_http_info(workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_name: Name of the Workflow. (required)
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_name' is set
        if self.api_client.client_side_validation and ('workflow_name' not in params or
                                                       params['workflow_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_name` when calling `view_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_name' in params:
            path_params['workflow_name'] = params['workflow_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/workflow/v1/workflow/{workflow_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
