# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from OsduClient.configuration import Configuration


class FileToManyRelationship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confidences': 'list[float]',
        'ids': 'list[str]',
        'names': 'list[str]',
        'versions': 'list[float]'
    }

    attribute_map = {
        'confidences': 'confidences',
        'ids': 'ids',
        'names': 'names',
        'versions': 'versions'
    }

    def __init__(self, confidences=None, ids=None, names=None, versions=None, _configuration=None):  # noqa: E501
        """FileToManyRelationship - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._confidences = None
        self._ids = None
        self._names = None
        self._versions = None
        self.discriminator = None

        if confidences is not None:
            self.confidences = confidences
        if ids is not None:
            self.ids = ids
        if names is not None:
            self.names = names
        if versions is not None:
            self.versions = versions

    @property
    def confidences(self):
        """Gets the confidences of this FileToManyRelationship.  # noqa: E501

        The confidences of the relationships. Keep all the arrays ordered and aligned.  # noqa: E501

        :return: The confidences of this FileToManyRelationship.  # noqa: E501
        :rtype: list[float]
        """
        return self._confidences

    @confidences.setter
    def confidences(self, confidences):
        """Sets the confidences of this FileToManyRelationship.

        The confidences of the relationships. Keep all the arrays ordered and aligned.  # noqa: E501

        :param confidences: The confidences of this FileToManyRelationship.  # noqa: E501
        :type: list[float]
        """

        self._confidences = confidences

    @property
    def ids(self):
        """Gets the ids of this FileToManyRelationship.  # noqa: E501

        The ids of the related objects. It is populated for an explicit relationship where the target entity is present as a record in the data ecosystem. Keep all the arrays ordered and aligned.  # noqa: E501

        :return: The ids of this FileToManyRelationship.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this FileToManyRelationship.

        The ids of the related objects. It is populated for an explicit relationship where the target entity is present as a record in the data ecosystem. Keep all the arrays ordered and aligned.  # noqa: E501

        :param ids: The ids of this FileToManyRelationship.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def names(self):
        """Gets the names of this FileToManyRelationship.  # noqa: E501

        The names or natural keys of the related objects. Keep all the arrays ordered and aligned.  # noqa: E501

        :return: The names of this FileToManyRelationship.  # noqa: E501
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this FileToManyRelationship.

        The names or natural keys of the related objects. Keep all the arrays ordered and aligned.  # noqa: E501

        :param names: The names of this FileToManyRelationship.  # noqa: E501
        :type: list[str]
        """

        self._names = names

    @property
    def versions(self):
        """Gets the versions of this FileToManyRelationship.  # noqa: E501

        The specific version numbers of the related instances. This is only specified if a specific version is required. If not populated the last version is implied. Keep all the arrays ordered and aligned.  # noqa: E501

        :return: The versions of this FileToManyRelationship.  # noqa: E501
        :rtype: list[float]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this FileToManyRelationship.

        The specific version numbers of the related instances. This is only specified if a specific version is required. If not populated the last version is implied. Keep all the arrays ordered and aligned.  # noqa: E501

        :param versions: The versions of this FileToManyRelationship.  # noqa: E501
        :type: list[float]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileToManyRelationship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileToManyRelationship):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileToManyRelationship):
            return True

        return self.to_dict() != other.to_dict()
