# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from OsduClient.configuration import Configuration


class Files(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'total_size': 'str',
        'encoding_format_type_id': 'str',
        'schema_format_type_id': 'str',
        'endian': 'str',
        'checksum': 'str',
        'dataset_properties': 'object',
        'extension_properties': 'object'
    }

    attribute_map = {
        'name': 'Name',
        'description': 'Description',
        'total_size': 'TotalSize',
        'encoding_format_type_id': 'EncodingFormatTypeID',
        'schema_format_type_id': 'SchemaFormatTypeID',
        'endian': 'Endian',
        'checksum': 'Checksum',
        'dataset_properties': 'DatasetProperties',
        'extension_properties': 'ExtensionProperties'
    }

    def __init__(self, name=None, description=None, total_size=None, encoding_format_type_id=None, schema_format_type_id=None, endian=None, checksum=None, dataset_properties=None, extension_properties=None, _configuration=None):  # noqa: E501
        """Files - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._total_size = None
        self._encoding_format_type_id = None
        self._schema_format_type_id = None
        self._endian = None
        self._checksum = None
        self._dataset_properties = None
        self._extension_properties = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if total_size is not None:
            self.total_size = total_size
        if encoding_format_type_id is not None:
            self.encoding_format_type_id = encoding_format_type_id
        if schema_format_type_id is not None:
            self.schema_format_type_id = schema_format_type_id
        self.endian = endian
        if checksum is not None:
            self.checksum = checksum
        self.dataset_properties = dataset_properties
        if extension_properties is not None:
            self.extension_properties = extension_properties

    @property
    def name(self):
        """Gets the name of this Files.  # noqa: E501

        An optional name of the dataset, e.g. a user friendly file or file collection name.  # noqa: E501

        :return: The name of this Files.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Files.

        An optional name of the dataset, e.g. a user friendly file or file collection name.  # noqa: E501

        :param name: The name of this Files.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Files.  # noqa: E501

        An optional, textual description of the dataset.  # noqa: E501

        :return: The description of this Files.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Files.

        An optional, textual description of the dataset.  # noqa: E501

        :param description: The description of this Files.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def total_size(self):
        """Gets the total_size of this Files.  # noqa: E501

        Total size of the dataset in bytes; for files it is the same as declared in FileSourceInfo.FileSize or the sum of all individual files. Implemented as string. The value must be convertible to a long integer (sizes can become very large).  # noqa: E501

        :return: The total_size of this Files.  # noqa: E501
        :rtype: str
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this Files.

        Total size of the dataset in bytes; for files it is the same as declared in FileSourceInfo.FileSize or the sum of all individual files. Implemented as string. The value must be convertible to a long integer (sizes can become very large).  # noqa: E501

        :param total_size: The total_size of this Files.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                total_size is not None and not re.search(r'^[0-9]+$', total_size)):  # noqa: E501
            raise ValueError(r"Invalid value for `total_size`, must be a follow pattern or equal to `/^[0-9]+$/`")  # noqa: E501

        self._total_size = total_size

    @property
    def encoding_format_type_id(self):
        """Gets the encoding_format_type_id of this Files.  # noqa: E501

        Encoding Format Type ID  # noqa: E501

        :return: The encoding_format_type_id of this Files.  # noqa: E501
        :rtype: str
        """
        return self._encoding_format_type_id

    @encoding_format_type_id.setter
    def encoding_format_type_id(self, encoding_format_type_id):
        """Sets the encoding_format_type_id of this Files.

        Encoding Format Type ID  # noqa: E501

        :param encoding_format_type_id: The encoding_format_type_id of this Files.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                encoding_format_type_id is not None and not re.search(r'^srn:<namespace>:reference-data\\\/EncodingFormatType:[^:]+:[0-9]*$', encoding_format_type_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `encoding_format_type_id`, must be a follow pattern or equal to `/^srn:<namespace>:reference-data\\\/EncodingFormatType:[^:]+:[0-9]*$/`")  # noqa: E501

        self._encoding_format_type_id = encoding_format_type_id

    @property
    def schema_format_type_id(self):
        """Gets the schema_format_type_id of this Files.  # noqa: E501

        Schema Format Type ID  # noqa: E501

        :return: The schema_format_type_id of this Files.  # noqa: E501
        :rtype: str
        """
        return self._schema_format_type_id

    @schema_format_type_id.setter
    def schema_format_type_id(self, schema_format_type_id):
        """Sets the schema_format_type_id of this Files.

        Schema Format Type ID  # noqa: E501

        :param schema_format_type_id: The schema_format_type_id of this Files.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                schema_format_type_id is not None and not re.search(r'^srn:<namespace>:reference-data\\\/SchemaFormatType:[^:]+:[0-9]*$', schema_format_type_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `schema_format_type_id`, must be a follow pattern or equal to `/^srn:<namespace>:reference-data\\\/SchemaFormatType:[^:]+:[0-9]*$/`")  # noqa: E501

        self._schema_format_type_id = schema_format_type_id

    @property
    def endian(self):
        """Gets the endian of this Files.  # noqa: E501

        Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.  # noqa: E501

        :return: The endian of this Files.  # noqa: E501
        :rtype: str
        """
        return self._endian

    @endian.setter
    def endian(self, endian):
        """Sets the endian of this Files.

        Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.  # noqa: E501

        :param endian: The endian of this Files.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and endian is None:
            raise ValueError("Invalid value for `endian`, must not be `None`")  # noqa: E501
        allowed_values = ["BIG LITTLE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                endian not in allowed_values):
            raise ValueError(
                "Invalid value for `endian` ({0}), must be one of {1}"  # noqa: E501
                .format(endian, allowed_values)
            )

        self._endian = endian

    @property
    def checksum(self):
        """Gets the checksum of this Files.  # noqa: E501

        MD5 checksum of file bytes - a 32 byte hexadecimal number  # noqa: E501

        :return: The checksum of this Files.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Files.

        MD5 checksum of file bytes - a 32 byte hexadecimal number  # noqa: E501

        :param checksum: The checksum of this Files.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                checksum is not None and not re.search(r'^[0-9a-fA-F]32}$', checksum)):  # noqa: E501
            raise ValueError(r"Invalid value for `checksum`, must be a follow pattern or equal to `/^[0-9a-fA-F]32}$/`")  # noqa: E501

        self._checksum = checksum

    @property
    def dataset_properties(self):
        """Gets the dataset_properties of this Files.  # noqa: E501


        :return: The dataset_properties of this Files.  # noqa: E501
        :rtype: object
        """
        return self._dataset_properties

    @dataset_properties.setter
    def dataset_properties(self, dataset_properties):
        """Sets the dataset_properties of this Files.


        :param dataset_properties: The dataset_properties of this Files.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and dataset_properties is None:
            raise ValueError("Invalid value for `dataset_properties`, must not be `None`")  # noqa: E501

        self._dataset_properties = dataset_properties

    @property
    def extension_properties(self):
        """Gets the extension_properties of this Files.  # noqa: E501


        :return: The extension_properties of this Files.  # noqa: E501
        :rtype: object
        """
        return self._extension_properties

    @extension_properties.setter
    def extension_properties(self, extension_properties):
        """Sets the extension_properties of this Files.


        :param extension_properties: The extension_properties of this Files.  # noqa: E501
        :type: object
        """

        self._extension_properties = extension_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Files, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Files):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Files):
            return True

        return self.to_dict() != other.to_dict()
