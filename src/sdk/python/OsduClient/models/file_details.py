# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from OsduClient.configuration import Configuration


class FileDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_kind': 'str',
        'file_type': 'str',
        'frame_of_reference': 'list[FileMetaItem]',
        'extension_properties': 'FileExtensionProperties',
        'parent_reference': 'str'
    }

    attribute_map = {
        'target_kind': 'TargetKind',
        'file_type': 'FileType',
        'frame_of_reference': 'FrameOfReference',
        'extension_properties': 'ExtensionProperties',
        'parent_reference': 'ParentReference'
    }

    def __init__(self, target_kind=None, file_type=None, frame_of_reference=None, extension_properties=None, parent_reference=None, _configuration=None):  # noqa: E501
        """FileDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._target_kind = None
        self._file_type = None
        self._frame_of_reference = None
        self._extension_properties = None
        self._parent_reference = None
        self.discriminator = None

        if target_kind is not None:
            self.target_kind = target_kind
        if file_type is not None:
            self.file_type = file_type
        if frame_of_reference is not None:
            self.frame_of_reference = frame_of_reference
        if extension_properties is not None:
            self.extension_properties = extension_properties
        if parent_reference is not None:
            self.parent_reference = parent_reference

    @property
    def target_kind(self):
        """Gets the target_kind of this FileDetails.  # noqa: E501

        The target kind or schema ID which is to be used by the parser.  # noqa: E501

        :return: The target_kind of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._target_kind

    @target_kind.setter
    def target_kind(self, target_kind):
        """Sets the target_kind of this FileDetails.

        The target kind or schema ID which is to be used by the parser.  # noqa: E501

        :param target_kind: The target_kind of this FileDetails.  # noqa: E501
        :type: str
        """

        self._target_kind = target_kind

    @property
    def file_type(self):
        """Gets the file_type of this FileDetails.  # noqa: E501

        Type of File to decide what kind of ingestion to be triggered  # noqa: E501

        :return: The file_type of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this FileDetails.

        Type of File to decide what kind of ingestion to be triggered  # noqa: E501

        :param file_type: The file_type of this FileDetails.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def frame_of_reference(self):
        """Gets the frame_of_reference of this FileDetails.  # noqa: E501

        The list metaItem definitions which maps a named frame of reference symbol or name to the self-contained persistableReference.  # noqa: E501

        :return: The frame_of_reference of this FileDetails.  # noqa: E501
        :rtype: list[FileMetaItem]
        """
        return self._frame_of_reference

    @frame_of_reference.setter
    def frame_of_reference(self, frame_of_reference):
        """Sets the frame_of_reference of this FileDetails.

        The list metaItem definitions which maps a named frame of reference symbol or name to the self-contained persistableReference.  # noqa: E501

        :param frame_of_reference: The frame_of_reference of this FileDetails.  # noqa: E501
        :type: list[FileMetaItem]
        """

        self._frame_of_reference = frame_of_reference

    @property
    def extension_properties(self):
        """Gets the extension_properties of this FileDetails.  # noqa: E501


        :return: The extension_properties of this FileDetails.  # noqa: E501
        :rtype: FileExtensionProperties
        """
        return self._extension_properties

    @extension_properties.setter
    def extension_properties(self, extension_properties):
        """Sets the extension_properties of this FileDetails.


        :param extension_properties: The extension_properties of this FileDetails.  # noqa: E501
        :type: FileExtensionProperties
        """

        self._extension_properties = extension_properties

    @property
    def parent_reference(self):
        """Gets the parent_reference of this FileDetails.  # noqa: E501

        The parent reference for this file.  # noqa: E501

        :return: The parent_reference of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._parent_reference

    @parent_reference.setter
    def parent_reference(self, parent_reference):
        """Sets the parent_reference of this FileDetails.

        The parent reference for this file.  # noqa: E501

        :param parent_reference: The parent_reference of this FileDetails.  # noqa: E501
        :type: str
        """

        self._parent_reference = parent_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileDetails):
            return True

        return self.to_dict() != other.to_dict()
