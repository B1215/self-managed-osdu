# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from OsduClient.configuration import Configuration


class WorkflowRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_id': 'str',
        'run_id': 'str',
        'start_timestamp': 'float',
        'end_timestamp': 'float',
        'status': 'str',
        'submitted_by': 'str'
    }

    attribute_map = {
        'workflow_id': 'workflowId',
        'run_id': 'runId',
        'start_timestamp': 'startTimestamp',
        'end_timestamp': 'endTimestamp',
        'status': 'status',
        'submitted_by': 'submittedBy'
    }

    def __init__(self, workflow_id=None, run_id=None, start_timestamp=None, end_timestamp=None, status=None, submitted_by=None, _configuration=None):  # noqa: E501
        """WorkflowRun - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._workflow_id = None
        self._run_id = None
        self._start_timestamp = None
        self._end_timestamp = None
        self._status = None
        self._submitted_by = None
        self.discriminator = None

        if workflow_id is not None:
            self.workflow_id = workflow_id
        if run_id is not None:
            self.run_id = run_id
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if status is not None:
            self.status = status
        if submitted_by is not None:
            self.submitted_by = submitted_by

    @property
    def workflow_id(self):
        """Gets the workflow_id of this WorkflowRun.  # noqa: E501

        Workflow id for the workflow.  # noqa: E501

        :return: The workflow_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this WorkflowRun.

        Workflow id for the workflow.  # noqa: E501

        :param workflow_id: The workflow_id of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def run_id(self):
        """Gets the run_id of this WorkflowRun.  # noqa: E501

        Run id for the workflow.  # noqa: E501

        :return: The run_id of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this WorkflowRun.

        Run id for the workflow.  # noqa: E501

        :param run_id: The run_id of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this WorkflowRun.  # noqa: E501

        Start timestamp of the workflow run.Epoch time stamp.  # noqa: E501

        :return: The start_timestamp of this WorkflowRun.  # noqa: E501
        :rtype: float
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this WorkflowRun.

        Start timestamp of the workflow run.Epoch time stamp.  # noqa: E501

        :param start_timestamp: The start_timestamp of this WorkflowRun.  # noqa: E501
        :type: float
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this WorkflowRun.  # noqa: E501

        End timestamp of the workflow run.Epoch timestamp.  # noqa: E501

        :return: The end_timestamp of this WorkflowRun.  # noqa: E501
        :rtype: float
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this WorkflowRun.

        End timestamp of the workflow run.Epoch timestamp.  # noqa: E501

        :param end_timestamp: The end_timestamp of this WorkflowRun.  # noqa: E501
        :type: float
        """

        self._end_timestamp = end_timestamp

    @property
    def status(self):
        """Gets the status of this WorkflowRun.  # noqa: E501

        Task execution status  # noqa: E501

        :return: The status of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowRun.

        Task execution status  # noqa: E501

        :param status: The status of this WorkflowRun.  # noqa: E501
        :type: str
        """
        allowed_values = ["INPROGRESS", "PARTIAL_SUCCESS", "SUCCESS", "FAILED", "SUBMITTED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submitted_by(self):
        """Gets the submitted_by of this WorkflowRun.  # noqa: E501

        System captured user details which triggered the  run.  # noqa: E501

        :return: The submitted_by of this WorkflowRun.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this WorkflowRun.

        System captured user details which triggered the  run.  # noqa: E501

        :param submitted_by: The submitted_by of this WorkflowRun.  # noqa: E501
        :type: str
        """

        self._submitted_by = submitted_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowRun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowRun):
            return True

        return self.to_dict() != other.to_dict()
