# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from OsduClient.configuration import Configuration


class RegisterDdms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'contact_email': 'str',
        'interfaces': 'list[RegisterDdmsInterface]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'contact_email': 'contactEmail',
        'interfaces': 'interfaces'
    }

    def __init__(self, id=None, name=None, description=None, contact_email=None, interfaces=None, _configuration=None):  # noqa: E501
        """RegisterDdms - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._contact_email = None
        self._interfaces = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if contact_email is not None:
            self.contact_email = contact_email
        if interfaces is not None:
            self.interfaces = interfaces

    @property
    def id(self):
        """Gets the id of this RegisterDdms.  # noqa: E501


        :return: The id of this RegisterDdms.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegisterDdms.


        :param id: The id of this RegisterDdms.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and not re.search(r'^[A-Za-z0-9-]{2,50}', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9-]{2,50}/`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this RegisterDdms.  # noqa: E501


        :return: The name of this RegisterDdms.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegisterDdms.


        :param name: The name of this RegisterDdms.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z0-9- ]{2,50}', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9- ]{2,50}/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this RegisterDdms.  # noqa: E501


        :return: The description of this RegisterDdms.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegisterDdms.


        :param description: The description of this RegisterDdms.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and not re.search(r'^[A-Za-z0-9. ]{0,255}', description)):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^[A-Za-z0-9. ]{0,255}/`")  # noqa: E501

        self._description = description

    @property
    def contact_email(self):
        """Gets the contact_email of this RegisterDdms.  # noqa: E501


        :return: The contact_email of this RegisterDdms.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this RegisterDdms.


        :param contact_email: The contact_email of this RegisterDdms.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def interfaces(self):
        """Gets the interfaces of this RegisterDdms.  # noqa: E501


        :return: The interfaces of this RegisterDdms.  # noqa: E501
        :rtype: list[RegisterDdmsInterface]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this RegisterDdms.


        :param interfaces: The interfaces of this RegisterDdms.  # noqa: E501
        :type: list[RegisterDdmsInterface]
        """

        self._interfaces = interfaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterDdms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterDdms):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterDdms):
            return True

        return self.to_dict() != other.to_dict()
