# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from OsduClient.configuration import Configuration


class StorageBulkUpdateRecordsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_count': 'int',
        'record_ids': 'list[str]',
        'not_found_record_ids': 'list[str]',
        'un_authorized_record_ids': 'list[str]',
        'locked_record_ids': 'list[str]'
    }

    attribute_map = {
        'record_count': 'recordCount',
        'record_ids': 'recordIds',
        'not_found_record_ids': 'notFoundRecordIds',
        'un_authorized_record_ids': 'unAuthorizedRecordIds',
        'locked_record_ids': 'lockedRecordIds'
    }

    def __init__(self, record_count=None, record_ids=None, not_found_record_ids=None, un_authorized_record_ids=None, locked_record_ids=None, _configuration=None):  # noqa: E501
        """StorageBulkUpdateRecordsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._record_count = None
        self._record_ids = None
        self._not_found_record_ids = None
        self._un_authorized_record_ids = None
        self._locked_record_ids = None
        self.discriminator = None

        if record_count is not None:
            self.record_count = record_count
        if record_ids is not None:
            self.record_ids = record_ids
        if not_found_record_ids is not None:
            self.not_found_record_ids = not_found_record_ids
        if un_authorized_record_ids is not None:
            self.un_authorized_record_ids = un_authorized_record_ids
        if locked_record_ids is not None:
            self.locked_record_ids = locked_record_ids

    @property
    def record_count(self):
        """Gets the record_count of this StorageBulkUpdateRecordsResponse.  # noqa: E501

        Number of records which updated successfully.  # noqa: E501

        :return: The record_count of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this StorageBulkUpdateRecordsResponse.

        Number of records which updated successfully.  # noqa: E501

        :param record_count: The record_count of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    @property
    def record_ids(self):
        """Gets the record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501

        List of successfully updated record ids.  # noqa: E501

        :return: The record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._record_ids

    @record_ids.setter
    def record_ids(self, record_ids):
        """Sets the record_ids of this StorageBulkUpdateRecordsResponse.

        List of successfully updated record ids.  # noqa: E501

        :param record_ids: The record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :type: list[str]
        """

        self._record_ids = record_ids

    @property
    def not_found_record_ids(self):
        """Gets the not_found_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501

        List of record ids for whom RecordMetadata was not found  # noqa: E501

        :return: The not_found_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._not_found_record_ids

    @not_found_record_ids.setter
    def not_found_record_ids(self, not_found_record_ids):
        """Sets the not_found_record_ids of this StorageBulkUpdateRecordsResponse.

        List of record ids for whom RecordMetadata was not found  # noqa: E501

        :param not_found_record_ids: The not_found_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :type: list[str]
        """

        self._not_found_record_ids = not_found_record_ids

    @property
    def un_authorized_record_ids(self):
        """Gets the un_authorized_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501

        List of record ids for whom user does not has owner permissions  # noqa: E501

        :return: The un_authorized_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._un_authorized_record_ids

    @un_authorized_record_ids.setter
    def un_authorized_record_ids(self, un_authorized_record_ids):
        """Sets the un_authorized_record_ids of this StorageBulkUpdateRecordsResponse.

        List of record ids for whom user does not has owner permissions  # noqa: E501

        :param un_authorized_record_ids: The un_authorized_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :type: list[str]
        """

        self._un_authorized_record_ids = un_authorized_record_ids

    @property
    def locked_record_ids(self):
        """Gets the locked_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501

        List of locked record ids  # noqa: E501

        :return: The locked_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._locked_record_ids

    @locked_record_ids.setter
    def locked_record_ids(self, locked_record_ids):
        """Sets the locked_record_ids of this StorageBulkUpdateRecordsResponse.

        List of locked record ids  # noqa: E501

        :param locked_record_ids: The locked_record_ids of this StorageBulkUpdateRecordsResponse.  # noqa: E501
        :type: list[str]
        """

        self._locked_record_ids = locked_record_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageBulkUpdateRecordsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageBulkUpdateRecordsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageBulkUpdateRecordsResponse):
            return True

        return self.to_dict() != other.to_dict()
