# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from OsduClient.api_client import ApiClient


class FileServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def deletes_metadata_record__file_for_the_given_id(self, data_partition_id, id, **kwargs):  # noqa: E501
        """Deletes metadata record & file assocaited with that record for the given id  # noqa: E501

        Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: 'users.datalake.editors'  or 'users.datalake.admins'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_metadata_record__file_for_the_given_id(data_partition_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param str id: File metadata record Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deletes_metadata_record__file_for_the_given_id_with_http_info(data_partition_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.deletes_metadata_record__file_for_the_given_id_with_http_info(data_partition_id, id, **kwargs)  # noqa: E501
            return data

    def deletes_metadata_record__file_for_the_given_id_with_http_info(self, data_partition_id, id, **kwargs):  # noqa: E501
        """Deletes metadata record & file assocaited with that record for the given id  # noqa: E501

        Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: 'users.datalake.editors'  or 'users.datalake.admins'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deletes_metadata_record__file_for_the_given_id_with_http_info(data_partition_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param str id: File metadata record Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletes_metadata_record__file_for_the_given_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `deletes_metadata_record__file_for_the_given_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `deletes_metadata_record__file_for_the_given_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/file/v2/files/{Id}/metadata', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_location_in_landing_zone_to_upload_a_file_(self, data_partition_id, **kwargs):  # noqa: E501
        """Get a location in Landing Zone to upload a file.  # noqa: E501

        Create a new location in the landing zone to upload a file. **Required roles**: 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_location_in_landing_zone_to_upload_a_file_(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param FileLocationRequest body:
        :return: FileLandingZoneLocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_location_in_landing_zone_to_upload_a_file__with_http_info(data_partition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_location_in_landing_zone_to_upload_a_file__with_http_info(data_partition_id, **kwargs)  # noqa: E501
            return data

    def get_a_location_in_landing_zone_to_upload_a_file__with_http_info(self, data_partition_id, **kwargs):  # noqa: E501
        """Get a location in Landing Zone to upload a file.  # noqa: E501

        Create a new location in the landing zone to upload a file. **Required roles**: 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_location_in_landing_zone_to_upload_a_file__with_http_info(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param FileLocationRequest body:
        :return: FileLandingZoneLocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_location_in_landing_zone_to_upload_a_file_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_a_location_in_landing_zone_to_upload_a_file_`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/file/v2/getLocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileLandingZoneLocationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_the_location_to_upload_a_file(self, data_partition_id, **kwargs):  # noqa: E501
        """Get a location in Landing Zone to upload a file.  # noqa: E501

        Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_the_location_to_upload_a_file(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :return: FileSourceLocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_the_location_to_upload_a_file_with_http_info(data_partition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_the_location_to_upload_a_file_with_http_info(data_partition_id, **kwargs)  # noqa: E501
            return data

    def get_the_location_to_upload_a_file_with_http_info(self, data_partition_id, **kwargs):  # noqa: E501
        """Get a location in Landing Zone to upload a file.  # noqa: E501

        Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_the_location_to_upload_a_file_with_http_info(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :return: FileSourceLocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_the_location_to_upload_a_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `get_the_location_to_upload_a_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/file/v2/files/uploadURL', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileSourceLocationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gets_metadata_record_for_the_given_id(self, data_partition_id, id, **kwargs):  # noqa: E501
        """Gets metadata record for the given id  # noqa: E501

        Gets the latest version of File metadata record identified by the given id. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gets_metadata_record_for_the_given_id(data_partition_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param str id: File metadata record Id. (required)
        :return: FileRecordVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gets_metadata_record_for_the_given_id_with_http_info(data_partition_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.gets_metadata_record_for_the_given_id_with_http_info(data_partition_id, id, **kwargs)  # noqa: E501
            return data

    def gets_metadata_record_for_the_given_id_with_http_info(self, data_partition_id, id, **kwargs):  # noqa: E501
        """Gets metadata record for the given id  # noqa: E501

        Gets the latest version of File metadata record identified by the given id. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gets_metadata_record_for_the_given_id_with_http_info(data_partition_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param str id: File metadata record Id. (required)
        :return: FileRecordVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gets_metadata_record_for_the_given_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `gets_metadata_record_for_the_given_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `gets_metadata_record_for_the_given_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/file/v2/files/{Id}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileRecordVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gets_url_to_download_the_file_associated_with_the_given_id_(self, data_partition_id, id, **kwargs):  # noqa: E501
        """Gets a URL to download the file  # noqa: E501

        Gets a URL for downloading the file associated with the unique `id`. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gets_url_to_download_the_file_associated_with_the_given_id_(data_partition_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param str id: File Metadata record Id. (required)
        :param str expiry_time: The Time for which Signed URL to be valid. Accepted Regex patterns are \"^[0-9]+M$\", \"^[0-9]+H$\", \"^[0-9]+D$\" denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days.
        :return: FileDownloadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gets_url_to_download_the_file_associated_with_the_given_id__with_http_info(data_partition_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.gets_url_to_download_the_file_associated_with_the_given_id__with_http_info(data_partition_id, id, **kwargs)  # noqa: E501
            return data

    def gets_url_to_download_the_file_associated_with_the_given_id__with_http_info(self, data_partition_id, id, **kwargs):  # noqa: E501
        """Gets a URL to download the file  # noqa: E501

        Gets a URL for downloading the file associated with the unique `id`. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gets_url_to_download_the_file_associated_with_the_given_id__with_http_info(data_partition_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param str id: File Metadata record Id. (required)
        :param str expiry_time: The Time for which Signed URL to be valid. Accepted Regex patterns are \"^[0-9]+M$\", \"^[0-9]+H$\", \"^[0-9]+D$\" denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days.
        :return: FileDownloadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'id', 'expiry_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gets_url_to_download_the_file_associated_with_the_given_id_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `gets_url_to_download_the_file_associated_with_the_given_id_`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `gets_url_to_download_the_file_associated_with_the_given_id_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']  # noqa: E501

        query_params = []
        if 'expiry_time' in params:
            query_params.append(('expiryTime', params['expiry_time']))  # noqa: E501

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/file/v2/files/{Id}/DownloadURL', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileDownloadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def publish_file_metadata_for_a_file_(self, data_partition_id, **kwargs):  # noqa: E501
        """Creates metadata for a file  # noqa: E501

        This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via `FileSource` provided in the request body. If `FileSource` attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the `Id` of the file metadata record. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_file_metadata_for_a_file_(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param FileMetadata body: File metadata content
        :return: FileMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.publish_file_metadata_for_a_file__with_http_info(data_partition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.publish_file_metadata_for_a_file__with_http_info(data_partition_id, **kwargs)  # noqa: E501
            return data

    def publish_file_metadata_for_a_file__with_http_info(self, data_partition_id, **kwargs):  # noqa: E501
        """Creates metadata for a file  # noqa: E501

        This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via `FileSource` provided in the request body. If `FileSource` attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the `Id` of the file metadata record. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_file_metadata_for_a_file__with_http_info(data_partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_partition_id: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
        :param FileMetadata body: File metadata content
        :return: FileMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_partition_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method publish_file_metadata_for_a_file_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_partition_id' is set
        if self.api_client.client_side_validation and ('data_partition_id' not in params or
                                                       params['data_partition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data_partition_id` when calling `publish_file_metadata_for_a_file_`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'data_partition_id' in params:
            header_params['data-partition-id'] = params['data_partition_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/file/v2/files/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
