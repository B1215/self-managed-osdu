# coding: utf-8

"""
    self-managed-osdu

    Rest API Documentation for Self Managed OSDU  # noqa: E501

    OpenAPI spec version: 0.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from OsduClient.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_index(self, osdu_account_id, kind, **kwargs):  # noqa: E501
        """Deletes all documents from index for given 'kind'.  # noqa: E501

        The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_index(osdu_account_id, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param str kind: Kind of the record. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_index_with_http_info(osdu_account_id, kind, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_index_with_http_info(osdu_account_id, kind, **kwargs)  # noqa: E501
            return data

    def delete_index_with_http_info(self, osdu_account_id, kind, **kwargs):  # noqa: E501
        """Deletes all documents from index for given 'kind'.  # noqa: E501

        The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_index_with_http_info(osdu_account_id, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param str kind: Kind of the record. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'kind', 'osdu_on_behalf_of']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `delete_index`")  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in params or
                                                       params['kind'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `kind` when calling `delete_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kind' in params:
            path_params['kind'] = params['kind']  # noqa: E501

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501
        if 'osdu_on_behalf_of' in params:
            header_params['OSDU-On-Behalf-Of'] = params['osdu_on_behalf_of']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v2/index/{kind}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kind_schema(self, osdu_account_id, kind, **kwargs):  # noqa: E501
        """Returns the index schema for given 'kind'.  # noqa: E501

        The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kind_schema(osdu_account_id, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param str kind: Kind of the record. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kind_schema_with_http_info(osdu_account_id, kind, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kind_schema_with_http_info(osdu_account_id, kind, **kwargs)  # noqa: E501
            return data

    def get_kind_schema_with_http_info(self, osdu_account_id, kind, **kwargs):  # noqa: E501
        """Returns the index schema for given 'kind'.  # noqa: E501

        The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kind_schema_with_http_info(osdu_account_id, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param str kind: Kind of the record. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'kind', 'osdu_on_behalf_of']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kind_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `get_kind_schema`")  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in params or
                                                       params['kind'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `kind` when calling `get_kind_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kind' in params:
            path_params['kind'] = params['kind']  # noqa: E501

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501
        if 'osdu_on_behalf_of' in params:
            header_params['OSDU-On-Behalf-Of'] = params['osdu_on_behalf_of']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v2/index/schema/{kind}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_records(self, osdu_account_id, body, **kwargs):  # noqa: E501
        """Queries the index for the specified kind using the input query string.  # noqa: E501

        The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_records(osdu_account_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param SearchQueryRequest body: Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: SearchQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_records_with_http_info(osdu_account_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.query_records_with_http_info(osdu_account_id, body, **kwargs)  # noqa: E501
            return data

    def query_records_with_http_info(self, osdu_account_id, body, **kwargs):  # noqa: E501
        """Queries the index for the specified kind using the input query string.  # noqa: E501

        The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_records_with_http_info(osdu_account_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param SearchQueryRequest body: Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: SearchQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'body', 'osdu_on_behalf_of']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `query_records`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `query_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501
        if 'osdu_on_behalf_of' in params:
            header_params['OSDU-On-Behalf-Of'] = params['osdu_on_behalf_of']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v2/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_with_cursor(self, osdu_account_id, body, **kwargs):  # noqa: E501
        """Query the index using cursor and optionally return only requested fields.  # noqa: E501

        The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_with_cursor(osdu_account_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param SearchCursorQueryRequest body: Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: SearchCursorQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_with_cursor_with_http_info(osdu_account_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.query_with_cursor_with_http_info(osdu_account_id, body, **kwargs)  # noqa: E501
            return data

    def query_with_cursor_with_http_info(self, osdu_account_id, body, **kwargs):  # noqa: E501
        """Query the index using cursor and optionally return only requested fields.  # noqa: E501

        The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_with_cursor_with_http_info(osdu_account_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str osdu_account_id: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API. (required)
        :param SearchCursorQueryRequest body: Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
        :param str osdu_on_behalf_of: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        :return: SearchCursorQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osdu_account_id', 'body', 'osdu_on_behalf_of']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_with_cursor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osdu_account_id' is set
        if self.api_client.client_side_validation and ('osdu_account_id' not in params or
                                                       params['osdu_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osdu_account_id` when calling `query_with_cursor`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `query_with_cursor`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'osdu_account_id' in params:
            header_params['OSDU-Account-Id'] = params['osdu_account_id']  # noqa: E501
        if 'osdu_on_behalf_of' in params:
            header_params['OSDU-On-Behalf-Of'] = params['osdu_on_behalf_of']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v2/query_with_cursor', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchCursorQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
