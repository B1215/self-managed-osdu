/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing RegisterApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RegisterApiTests
    {
        private RegisterApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RegisterApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RegisterApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RegisterApi
            //Assert.IsInstanceOfType(typeof(RegisterApi), instance, "instance is a RegisterApi");
        }

        
        /// <summary>
        /// Test CreateADDMSRegistration
        /// </summary>
        [Test]
        public void CreateADDMSRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //RegisterDdms body = null;
            //var response = instance.CreateADDMSRegistration(dataPartitionId, body);
            //Assert.IsInstanceOf<RegisterDdms> (response, "response is RegisterDdms");
        }
        
        /// <summary>
        /// Test CreateASubscription
        /// </summary>
        [Test]
        public void CreateASubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //RegisterSubscription body = null;
            //var response = instance.CreateASubscription(dataPartitionId, body);
            //Assert.IsInstanceOf<RegisterSubscriptionCreateResult> (response, "response is RegisterSubscriptionCreateResult");
        }
        
        /// <summary>
        /// Test CreateAnActionRegistration
        /// </summary>
        [Test]
        public void CreateAnActionRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //RegisterCreateAction body = null;
            //var response = instance.CreateAnActionRegistration(dataPartitionId, body);
            //Assert.IsInstanceOf<RegisterAction> (response, "response is RegisterAction");
        }
        
        /// <summary>
        /// Test DeleteADDMSRegistration
        /// </summary>
        [Test]
        public void DeleteADDMSRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataPartitionId = null;
            //instance.DeleteADDMSRegistration(id, dataPartitionId);
            
        }
        
        /// <summary>
        /// Test DeleteASubscriptionById
        /// </summary>
        [Test]
        public void DeleteASubscriptionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataPartitionId = null;
            //instance.DeleteASubscriptionById(id, dataPartitionId);
            
        }
        
        /// <summary>
        /// Test DeleteAnActionRegistration
        /// </summary>
        [Test]
        public void DeleteAnActionRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataPartitionId = null;
            //instance.DeleteAnActionRegistration(id, dataPartitionId);
            
        }
        
        /// <summary>
        /// Test GetADDMSRegistration
        /// </summary>
        [Test]
        public void GetADDMSRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataPartitionId = null;
            //var response = instance.GetADDMSRegistration(id, dataPartitionId);
            //Assert.IsInstanceOf<RegisterDdms> (response, "response is RegisterDdms");
        }
        
        /// <summary>
        /// Test GetASubscriptionById
        /// </summary>
        [Test]
        public void GetASubscriptionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataPartitionId = null;
            //var response = instance.GetASubscriptionById(id, dataPartitionId);
            //Assert.IsInstanceOf<RegisterGetSubscriptionResult> (response, "response is RegisterGetSubscriptionResult");
        }
        
        /// <summary>
        /// Test GetAnActionRegistration
        /// </summary>
        [Test]
        public void GetAnActionRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataPartitionId = null;
            //var response = instance.GetAnActionRegistration(id, dataPartitionId);
            //Assert.IsInstanceOf<RegisterAction> (response, "response is RegisterAction");
        }
        
        /// <summary>
        /// Test ListAllTopics
        /// </summary>
        [Test]
        public void ListAllTopicsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //var response = instance.ListAllTopics(dataPartitionId);
            //Assert.IsInstanceOf<List<RegisterTopic>> (response, "response is List<RegisterTopic>");
        }
        
        /// <summary>
        /// Test QueryADDMSRegistration
        /// </summary>
        [Test]
        public void QueryADDMSRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string dataPartitionId = null;
            //var response = instance.QueryADDMSRegistration(type, dataPartitionId);
            //Assert.IsInstanceOf<List<RegisterDdms>> (response, "response is List<RegisterDdms>");
        }
        
        /// <summary>
        /// Test RetrieveAnActionRegistration
        /// </summary>
        [Test]
        public void RetrieveAnActionRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //RegisterRecord body = null;
            //var response = instance.RetrieveAnActionRegistration(dataPartitionId, body);
            //Assert.IsInstanceOf<List<RegisterAction>> (response, "response is List<RegisterAction>");
        }
        
        /// <summary>
        /// Test TestAnActionRegistration
        /// </summary>
        [Test]
        public void TestAnActionRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //RegisterTestAction body = null;
            //var response = instance.TestAnActionRegistration(dataPartitionId, body);
            //Assert.IsInstanceOf<RegisterTestActionResult> (response, "response is RegisterTestActionResult");
        }
        
        /// <summary>
        /// Test UpdateSecretForSubscription
        /// </summary>
        [Test]
        public void UpdateSecretForSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string dataPartitionId = null;
            //RegisterSecret body = null;
            //instance.UpdateSecretForSubscription(id, dataPartitionId, body);
            
        }
        
    }

}
