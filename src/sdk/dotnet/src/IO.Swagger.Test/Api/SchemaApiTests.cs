/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SchemaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SchemaApiTests
    {
        private SchemaApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SchemaApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SchemaApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SchemaApi
            //Assert.IsInstanceOfType(typeof(SchemaApi), instance, "instance is a SchemaApi");
        }

        
        /// <summary>
        /// Test CreateSchema
        /// </summary>
        [Test]
        public void CreateSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //SchemaRequest body = null;
            //var response = instance.CreateSchema(dataPartitionId, body);
            //Assert.IsInstanceOf<SchemaInfo> (response, "response is SchemaInfo");
        }
        
        /// <summary>
        /// Test GetSchema
        /// </summary>
        [Test]
        public void GetSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //string id = null;
            //var response = instance.GetSchema(dataPartitionId, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchSchemaInfoRepository
        /// </summary>
        [Test]
        public void SearchSchemaInfoRepositoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //string authority = null;
            //string source = null;
            //string entityType = null;
            //string schemaVersionMajor = null;
            //string schemaVersionMinor = null;
            //string status = null;
            //string scope = null;
            //bool? latestVersion = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.SearchSchemaInfoRepository(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset);
            //Assert.IsInstanceOf<SchemaInfoResponse> (response, "response is SchemaInfoResponse");
        }
        
        /// <summary>
        /// Test UpdateSchema
        /// </summary>
        [Test]
        public void UpdateSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //SchemaRequest body = null;
            //var response = instance.UpdateSchema(dataPartitionId, body);
            //Assert.IsInstanceOf<SchemaInfo> (response, "response is SchemaInfo");
        }
        
    }

}
