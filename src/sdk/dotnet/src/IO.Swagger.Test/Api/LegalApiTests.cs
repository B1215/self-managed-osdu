/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing LegalApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LegalApiTests
    {
        private LegalApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LegalApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LegalApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LegalApi
            //Assert.IsInstanceOfType(typeof(LegalApi), instance, "instance is a LegalApi");
        }

        
        /// <summary>
        /// Test CreateLegalTag
        /// </summary>
        [Test]
        public void CreateLegalTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //LegalTagDto body = null;
            //string oSDUOnBehalfOf = null;
            //var response = instance.CreateLegalTag(oSDUAccountId, body, oSDUOnBehalfOf);
            //Assert.IsInstanceOf<LegalTagDto> (response, "response is LegalTagDto");
        }
        
        /// <summary>
        /// Test DeleteLegalTag
        /// </summary>
        [Test]
        public void DeleteLegalTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //string name = null;
            //instance.DeleteLegalTag(dataPartitionId, name);
            
        }
        
        /// <summary>
        /// Test GetLegalTag
        /// </summary>
        [Test]
        public void GetLegalTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //string name = null;
            //var response = instance.GetLegalTag(dataPartitionId, name);
            //Assert.IsInstanceOf<LegalTagDto> (response, "response is LegalTagDto");
        }
        
        /// <summary>
        /// Test GetLegalTagProperties
        /// </summary>
        [Test]
        public void GetLegalTagPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //var response = instance.GetLegalTagProperties(dataPartitionId);
            //Assert.IsInstanceOf<LegalTagPropertyValues> (response, "response is LegalTagPropertyValues");
        }
        
        /// <summary>
        /// Test GetLegalTags
        /// </summary>
        [Test]
        public void GetLegalTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //LegalTagRequest body = null;
            //string oSDUOnBehalfOf = null;
            //var response = instance.GetLegalTags(oSDUAccountId, body, oSDUOnBehalfOf);
            //Assert.IsInstanceOf<LegalTagDtos> (response, "response is LegalTagDtos");
        }
        
        /// <summary>
        /// Test ListLegalTags
        /// </summary>
        [Test]
        public void ListLegalTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //bool? valid = null;
            //string oSDUOnBehalfOf = null;
            //var response = instance.ListLegalTags(oSDUAccountId, valid, oSDUOnBehalfOf);
            //Assert.IsInstanceOf<LegalTagDtos> (response, "response is LegalTagDtos");
        }
        
        /// <summary>
        /// Test UpdateLegalTag
        /// </summary>
        [Test]
        public void UpdateLegalTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //LegalTagUpdateDto body = null;
            //string oSDUOnBehalfOf = null;
            //var response = instance.UpdateLegalTag(oSDUAccountId, body, oSDUOnBehalfOf);
            //Assert.IsInstanceOf<LegalTagDto> (response, "response is LegalTagDto");
        }
        
        /// <summary>
        /// Test ValidateLegalTags
        /// </summary>
        [Test]
        public void ValidateLegalTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //LegalTagRequest body = null;
            //string oSDUOnBehalfOf = null;
            //var response = instance.ValidateLegalTags(oSDUAccountId, body, oSDUOnBehalfOf);
            //Assert.IsInstanceOf<LegalTagInvalidResponseList> (response, "response is LegalTagInvalidResponseList");
        }
        
    }

}
