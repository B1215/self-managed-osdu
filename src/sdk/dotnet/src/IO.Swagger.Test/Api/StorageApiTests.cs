/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing StorageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StorageApiTests
    {
        private StorageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StorageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StorageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StorageApi
            //Assert.IsInstanceOfType(typeof(StorageApi), instance, "instance is a StorageApi");
        }

        
        /// <summary>
        /// Test CreateOrUpdateRecords
        /// </summary>
        [Test]
        public void CreateOrUpdateRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //bool? skipdupes = null;
            //List<StorageRecord> body = null;
            //var response = instance.CreateOrUpdateRecords(oSDUAccountId, skipdupes, body);
            //Assert.IsInstanceOf<StorageRecord> (response, "response is StorageRecord");
        }
        
        /// <summary>
        /// Test DeleteRecord
        /// </summary>
        [Test]
        public void DeleteRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string oSDUAccountId = null;
            //instance.DeleteRecord(id, oSDUAccountId);
            
        }
        
        /// <summary>
        /// Test DeleteRecords
        /// </summary>
        [Test]
        public void DeleteRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataPartitionId = null;
            //List<string> partitionInfo = null;
            //instance.DeleteRecords(dataPartitionId, partitionInfo);
            
        }
        
        /// <summary>
        /// Test FetchRecords
        /// </summary>
        [Test]
        public void FetchRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //StorageMultiRecordIds body = null;
            //var response = instance.FetchRecords(oSDUAccountId, body);
            //Assert.IsInstanceOf<StorageMultiRecordIds> (response, "response is StorageMultiRecordIds");
        }
        
        /// <summary>
        /// Test GetAllKinds
        /// </summary>
        [Test]
        public void GetAllKindsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //string cursor = null;
            //int? limit = null;
            //var response = instance.GetAllKinds(oSDUAccountId, cursor, limit);
            //Assert.IsInstanceOf<StorageQueryResponse> (response, "response is StorageQueryResponse");
        }
        
        /// <summary>
        /// Test GetAllRecordFromKind
        /// </summary>
        [Test]
        public void GetAllRecordFromKindTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //string cursor = null;
            //int? limit = null;
            //string kind = null;
            //var response = instance.GetAllRecordFromKind(oSDUAccountId, cursor, limit, kind);
            //Assert.IsInstanceOf<StorageQueryResponse> (response, "response is StorageQueryResponse");
        }
        
        /// <summary>
        /// Test GetAllRecordVersions
        /// </summary>
        [Test]
        public void GetAllRecordVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string oSDUAccountId = null;
            //var response = instance.GetAllRecordVersions(id, oSDUAccountId);
            //Assert.IsInstanceOf<StorageRecordVersions> (response, "response is StorageRecordVersions");
        }
        
        /// <summary>
        /// Test GetRecord
        /// </summary>
        [Test]
        public void GetRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string oSDUAccountId = null;
            //List<string> attribute = null;
            //var response = instance.GetRecord(id, oSDUAccountId, attribute);
            //Assert.IsInstanceOf<StorageRecordData> (response, "response is StorageRecordData");
        }
        
        /// <summary>
        /// Test GetRecordVersion
        /// </summary>
        [Test]
        public void GetRecordVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //long? version = null;
            //string oSDUAccountId = null;
            //List<string> attribute = null;
            //var response = instance.GetRecordVersion(id, version, oSDUAccountId, attribute);
            //Assert.IsInstanceOf<StorageRecordData> (response, "response is StorageRecordData");
        }
        
        /// <summary>
        /// Test PatchUpdateRecords
        /// </summary>
        [Test]
        public void PatchUpdateRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oSDUAccountId = null;
            //List<StorageRecordBulkUpdateParam> body = null;
            //var response = instance.PatchUpdateRecords(oSDUAccountId, body);
            //Assert.IsInstanceOf<StorageBulkUpdateRecordsResponse> (response, "response is StorageBulkUpdateRecordsResponse");
        }
        
        /// <summary>
        /// Test PurgeRecord
        /// </summary>
        [Test]
        public void PurgeRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string oSDUAccountId = null;
            //instance.PurgeRecord(id, oSDUAccountId);
            
        }
        
    }

}
