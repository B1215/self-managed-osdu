/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// Metadata record.
    /// </summary>
    [DataContract]
    public partial class FileRecordVersion :  IEquatable<FileRecordVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileRecordVersion" /> class.
        /// </summary>
        /// <param name="kind">Kind of data being ingested. Must follow the naming convention:data-Partition-Id}:dataset-name}:record-type}:version}..</param>
        /// <param name="acl">acl.</param>
        /// <param name="legal">legal.</param>
        /// <param name="data">data.</param>
        /// <param name="ancestry">ancestry.</param>
        /// <param name="version">The version number of this OSDU resource; set by the framework..</param>
        public FileRecordVersion(string kind = default(string), FileAcl acl = default(FileAcl), FileLegal legal = default(FileLegal), Files data = default(Files), FileAncestry ancestry = default(FileAncestry), long? version = default(long?))
        {
            this.Kind = kind;
            this.Acl = acl;
            this.Legal = legal;
            this.Data = data;
            this.Ancestry = ancestry;
            this.Version = version;
        }
        
        /// <summary>
        /// Unique identifier generated by the system for the file metadata record.
        /// </summary>
        /// <value>Unique identifier generated by the system for the file metadata record.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Kind of data being ingested. Must follow the naming convention:data-Partition-Id}:dataset-name}:record-type}:version}.
        /// </summary>
        /// <value>Kind of data being ingested. Must follow the naming convention:data-Partition-Id}:dataset-name}:record-type}:version}.</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets Acl
        /// </summary>
        [DataMember(Name="acl", EmitDefaultValue=false)]
        public FileAcl Acl { get; set; }

        /// <summary>
        /// Gets or Sets Legal
        /// </summary>
        [DataMember(Name="legal", EmitDefaultValue=false)]
        public FileLegal Legal { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Files Data { get; set; }

        /// <summary>
        /// Gets or Sets Ancestry
        /// </summary>
        [DataMember(Name="ancestry", EmitDefaultValue=false)]
        public FileAncestry Ancestry { get; set; }

        /// <summary>
        /// The version number of this OSDU resource; set by the framework.
        /// </summary>
        /// <value>The version number of this OSDU resource; set by the framework.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileRecordVersion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Acl: ").Append(Acl).Append("\n");
            sb.Append("  Legal: ").Append(Legal).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Ancestry: ").Append(Ancestry).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileRecordVersion);
        }

        /// <summary>
        /// Returns true if FileRecordVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of FileRecordVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileRecordVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.Acl == input.Acl ||
                    (this.Acl != null &&
                    this.Acl.Equals(input.Acl))
                ) && 
                (
                    this.Legal == input.Legal ||
                    (this.Legal != null &&
                    this.Legal.Equals(input.Legal))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Ancestry == input.Ancestry ||
                    (this.Ancestry != null &&
                    this.Ancestry.Equals(input.Ancestry))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.Acl != null)
                    hashCode = hashCode * 59 + this.Acl.GetHashCode();
                if (this.Legal != null)
                    hashCode = hashCode * 59 + this.Legal.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Ancestry != null)
                    hashCode = hashCode * 59 + this.Ancestry.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
