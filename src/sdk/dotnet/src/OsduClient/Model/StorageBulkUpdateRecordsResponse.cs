/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// Result of the record batch update request.
    /// </summary>
    [DataContract]
    public partial class StorageBulkUpdateRecordsResponse :  IEquatable<StorageBulkUpdateRecordsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageBulkUpdateRecordsResponse" /> class.
        /// </summary>
        /// <param name="recordCount">Number of records which updated successfully..</param>
        /// <param name="recordIds">List of successfully updated record ids..</param>
        /// <param name="notFoundRecordIds">List of record ids for whom RecordMetadata was not found.</param>
        /// <param name="unAuthorizedRecordIds">List of record ids for whom user does not has owner permissions.</param>
        /// <param name="lockedRecordIds">List of locked record ids.</param>
        public StorageBulkUpdateRecordsResponse(int? recordCount = default(int?), List<string> recordIds = default(List<string>), List<string> notFoundRecordIds = default(List<string>), List<string> unAuthorizedRecordIds = default(List<string>), List<string> lockedRecordIds = default(List<string>))
        {
            this.RecordCount = recordCount;
            this.RecordIds = recordIds;
            this.NotFoundRecordIds = notFoundRecordIds;
            this.UnAuthorizedRecordIds = unAuthorizedRecordIds;
            this.LockedRecordIds = lockedRecordIds;
        }
        
        /// <summary>
        /// Number of records which updated successfully.
        /// </summary>
        /// <value>Number of records which updated successfully.</value>
        [DataMember(Name="recordCount", EmitDefaultValue=false)]
        public int? RecordCount { get; set; }

        /// <summary>
        /// List of successfully updated record ids.
        /// </summary>
        /// <value>List of successfully updated record ids.</value>
        [DataMember(Name="recordIds", EmitDefaultValue=false)]
        public List<string> RecordIds { get; set; }

        /// <summary>
        /// List of record ids for whom RecordMetadata was not found
        /// </summary>
        /// <value>List of record ids for whom RecordMetadata was not found</value>
        [DataMember(Name="notFoundRecordIds", EmitDefaultValue=false)]
        public List<string> NotFoundRecordIds { get; set; }

        /// <summary>
        /// List of record ids for whom user does not has owner permissions
        /// </summary>
        /// <value>List of record ids for whom user does not has owner permissions</value>
        [DataMember(Name="unAuthorizedRecordIds", EmitDefaultValue=false)]
        public List<string> UnAuthorizedRecordIds { get; set; }

        /// <summary>
        /// List of locked record ids
        /// </summary>
        /// <value>List of locked record ids</value>
        [DataMember(Name="lockedRecordIds", EmitDefaultValue=false)]
        public List<string> LockedRecordIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageBulkUpdateRecordsResponse {\n");
            sb.Append("  RecordCount: ").Append(RecordCount).Append("\n");
            sb.Append("  RecordIds: ").Append(RecordIds).Append("\n");
            sb.Append("  NotFoundRecordIds: ").Append(NotFoundRecordIds).Append("\n");
            sb.Append("  UnAuthorizedRecordIds: ").Append(UnAuthorizedRecordIds).Append("\n");
            sb.Append("  LockedRecordIds: ").Append(LockedRecordIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageBulkUpdateRecordsResponse);
        }

        /// <summary>
        /// Returns true if StorageBulkUpdateRecordsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageBulkUpdateRecordsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageBulkUpdateRecordsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordCount == input.RecordCount ||
                    (this.RecordCount != null &&
                    this.RecordCount.Equals(input.RecordCount))
                ) && 
                (
                    this.RecordIds == input.RecordIds ||
                    this.RecordIds != null &&
                    this.RecordIds.SequenceEqual(input.RecordIds)
                ) && 
                (
                    this.NotFoundRecordIds == input.NotFoundRecordIds ||
                    this.NotFoundRecordIds != null &&
                    this.NotFoundRecordIds.SequenceEqual(input.NotFoundRecordIds)
                ) && 
                (
                    this.UnAuthorizedRecordIds == input.UnAuthorizedRecordIds ||
                    this.UnAuthorizedRecordIds != null &&
                    this.UnAuthorizedRecordIds.SequenceEqual(input.UnAuthorizedRecordIds)
                ) && 
                (
                    this.LockedRecordIds == input.LockedRecordIds ||
                    this.LockedRecordIds != null &&
                    this.LockedRecordIds.SequenceEqual(input.LockedRecordIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordCount != null)
                    hashCode = hashCode * 59 + this.RecordCount.GetHashCode();
                if (this.RecordIds != null)
                    hashCode = hashCode * 59 + this.RecordIds.GetHashCode();
                if (this.NotFoundRecordIds != null)
                    hashCode = hashCode * 59 + this.NotFoundRecordIds.GetHashCode();
                if (this.UnAuthorizedRecordIds != null)
                    hashCode = hashCode * 59 + this.UnAuthorizedRecordIds.GetHashCode();
                if (this.LockedRecordIds != null)
                    hashCode = hashCode * 59 + this.LockedRecordIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
