/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// This filter is used to filter geo-point geo data which supports lat/lon pairs. The queries in this group are Geo Distance, Geo Polygon and Bounding Box. Only one spatial criteria can be used while defining filter.
    /// </summary>
    [DataContract]
    public partial class SearchSpatialFilter :  IEquatable<SearchSpatialFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSpatialFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchSpatialFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSpatialFilter" /> class.
        /// </summary>
        /// <param name="field">geo-point field in the index on which filtering will be performed. (required).</param>
        /// <param name="byBoundingBox">byBoundingBox.</param>
        /// <param name="byDistance">byDistance.</param>
        /// <param name="byGeoPolygon">byGeoPolygon.</param>
        public SearchSpatialFilter(string field = default(string), SearchByBoundingBox byBoundingBox = default(SearchByBoundingBox), SearchByDistance byDistance = default(SearchByDistance), SearchByGeoPolygon byGeoPolygon = default(SearchByGeoPolygon))
        {
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new InvalidDataException("field is a required property for SearchSpatialFilter and cannot be null");
            }
            else
            {
                this.Field = field;
            }
            this.ByBoundingBox = byBoundingBox;
            this.ByDistance = byDistance;
            this.ByGeoPolygon = byGeoPolygon;
        }
        
        /// <summary>
        /// geo-point field in the index on which filtering will be performed.
        /// </summary>
        /// <value>geo-point field in the index on which filtering will be performed.</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets ByBoundingBox
        /// </summary>
        [DataMember(Name="byBoundingBox", EmitDefaultValue=false)]
        public SearchByBoundingBox ByBoundingBox { get; set; }

        /// <summary>
        /// Gets or Sets ByDistance
        /// </summary>
        [DataMember(Name="byDistance", EmitDefaultValue=false)]
        public SearchByDistance ByDistance { get; set; }

        /// <summary>
        /// Gets or Sets ByGeoPolygon
        /// </summary>
        [DataMember(Name="byGeoPolygon", EmitDefaultValue=false)]
        public SearchByGeoPolygon ByGeoPolygon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchSpatialFilter {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  ByBoundingBox: ").Append(ByBoundingBox).Append("\n");
            sb.Append("  ByDistance: ").Append(ByDistance).Append("\n");
            sb.Append("  ByGeoPolygon: ").Append(ByGeoPolygon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchSpatialFilter);
        }

        /// <summary>
        /// Returns true if SearchSpatialFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchSpatialFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchSpatialFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.ByBoundingBox == input.ByBoundingBox ||
                    (this.ByBoundingBox != null &&
                    this.ByBoundingBox.Equals(input.ByBoundingBox))
                ) && 
                (
                    this.ByDistance == input.ByDistance ||
                    (this.ByDistance != null &&
                    this.ByDistance.Equals(input.ByDistance))
                ) && 
                (
                    this.ByGeoPolygon == input.ByGeoPolygon ||
                    (this.ByGeoPolygon != null &&
                    this.ByGeoPolygon.Equals(input.ByGeoPolygon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.ByBoundingBox != null)
                    hashCode = hashCode * 59 + this.ByBoundingBox.GetHashCode();
                if (this.ByDistance != null)
                    hashCode = hashCode * 59 + this.ByDistance.GetHashCode();
                if (this.ByGeoPolygon != null)
                    hashCode = hashCode * 59 + this.ByGeoPolygon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
