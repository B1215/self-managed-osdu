/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// Storage record
    /// </summary>
    [DataContract]
    public partial class StorageRecord :  IEquatable<StorageRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageRecord" /> class.
        /// </summary>
        /// <param name="id">Unique identifier in whole Data Lake. When not provided, Data Lake will create and assign an id to the record. Must follow the naming convention: {OSDU-Account-Id}:{object-type}:{uuid}..</param>
        /// <param name="kind">Kind of data it is being ingested. Must follow the naming convention: {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}. (required).</param>
        /// <param name="acl">Group of users who have access to the record. (required).</param>
        /// <param name="legal">Attributes which represent the legal constraints associated with the record. (required).</param>
        /// <param name="data">Record payload represented as a list of key-value pairs. (required).</param>
        /// <param name="history">Record ancestry information..</param>
        public StorageRecord(string id = default(string), string kind = default(string), StorageAcl acl = default(StorageAcl), StorageLegal legal = default(StorageLegal), Dictionary<string, Object> data = default(Dictionary<string, Object>), StorageRecordHistory history = default(StorageRecordHistory))
        {
            // to ensure "kind" is required (not null)
            if (kind == null)
            {
                throw new InvalidDataException("kind is a required property for StorageRecord and cannot be null");
            }
            else
            {
                this.Kind = kind;
            }
            // to ensure "acl" is required (not null)
            if (acl == null)
            {
                throw new InvalidDataException("acl is a required property for StorageRecord and cannot be null");
            }
            else
            {
                this.Acl = acl;
            }
            // to ensure "legal" is required (not null)
            if (legal == null)
            {
                throw new InvalidDataException("legal is a required property for StorageRecord and cannot be null");
            }
            else
            {
                this.Legal = legal;
            }
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for StorageRecord and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            this.Id = id;
            this.History = history;
        }
        
        /// <summary>
        /// Unique identifier in whole Data Lake. When not provided, Data Lake will create and assign an id to the record. Must follow the naming convention: {OSDU-Account-Id}:{object-type}:{uuid}.
        /// </summary>
        /// <value>Unique identifier in whole Data Lake. When not provided, Data Lake will create and assign an id to the record. Must follow the naming convention: {OSDU-Account-Id}:{object-type}:{uuid}.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Kind of data it is being ingested. Must follow the naming convention: {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}.
        /// </summary>
        /// <value>Kind of data it is being ingested. Must follow the naming convention: {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}.</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Group of users who have access to the record.
        /// </summary>
        /// <value>Group of users who have access to the record.</value>
        [DataMember(Name="acl", EmitDefaultValue=false)]
        public StorageAcl Acl { get; set; }

        /// <summary>
        /// Attributes which represent the legal constraints associated with the record.
        /// </summary>
        /// <value>Attributes which represent the legal constraints associated with the record.</value>
        [DataMember(Name="legal", EmitDefaultValue=false)]
        public StorageLegal Legal { get; set; }

        /// <summary>
        /// Record payload represented as a list of key-value pairs.
        /// </summary>
        /// <value>Record payload represented as a list of key-value pairs.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Record ancestry information.
        /// </summary>
        /// <value>Record ancestry information.</value>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public StorageRecordHistory History { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Acl: ").Append(Acl).Append("\n");
            sb.Append("  Legal: ").Append(Legal).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageRecord);
        }

        /// <summary>
        /// Returns true if StorageRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.Acl == input.Acl ||
                    (this.Acl != null &&
                    this.Acl.Equals(input.Acl))
                ) && 
                (
                    this.Legal == input.Legal ||
                    (this.Legal != null &&
                    this.Legal.Equals(input.Legal))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.History == input.History ||
                    (this.History != null &&
                    this.History.Equals(input.History))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.Acl != null)
                    hashCode = hashCode * 59 + this.Acl.GetHashCode();
                if (this.Legal != null)
                    hashCode = hashCode * 59 + this.Legal.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^[\\w\\-\\.]+:[\\w-\\.\/]+:.+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // Kind (string) pattern
            Regex regexKind = new Regex(@"^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\/]+:[0-9]+.[0-9]+.[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexKind.Match(this.Kind).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Kind, must match a pattern of " + regexKind, new [] { "Kind" });
            }

            yield break;
        }
    }

}
