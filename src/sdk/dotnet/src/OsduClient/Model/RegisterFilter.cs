/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// RegisterFilter
    /// </summary>
    [DataContract]
    public partial class RegisterFilter :  IEquatable<RegisterFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterFilter" /> class.
        /// </summary>
        /// <param name="entityType">entityType.</param>
        /// <param name="source">source.</param>
        /// <param name="version">version.</param>
        public RegisterFilter(List<string> entityType = default(List<string>), List<string> source = default(List<string>), List<string> version = default(List<string>))
        {
            this.EntityType = entityType;
            this.Source = source;
            this.Version = version;
        }
        
        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public List<string> EntityType { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public List<string> Source { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public List<string> Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterFilter {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterFilter);
        }

        /// <summary>
        /// Returns true if RegisterFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityType == input.EntityType ||
                    this.EntityType != null &&
                    this.EntityType.SequenceEqual(input.EntityType)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source != null &&
                    this.Source.SequenceEqual(input.Source)
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version != null &&
                    this.Version.SequenceEqual(input.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
