/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// Represents a collection invalid LegalTags.
    /// </summary>
    [DataContract]
    public partial class LegalTagInvalidResponseList :  IEquatable<LegalTagInvalidResponseList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalTagInvalidResponseList" /> class.
        /// </summary>
        /// <param name="invalidLegalTags">A collection of invalid LegalTags..</param>
        public LegalTagInvalidResponseList(List<LegalTagInvalidResponse> invalidLegalTags = default(List<LegalTagInvalidResponse>))
        {
            this.InvalidLegalTags = invalidLegalTags;
        }
        
        /// <summary>
        /// A collection of invalid LegalTags.
        /// </summary>
        /// <value>A collection of invalid LegalTags.</value>
        [DataMember(Name="invalidLegalTags", EmitDefaultValue=false)]
        public List<LegalTagInvalidResponse> InvalidLegalTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalTagInvalidResponseList {\n");
            sb.Append("  InvalidLegalTags: ").Append(InvalidLegalTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegalTagInvalidResponseList);
        }

        /// <summary>
        /// Returns true if LegalTagInvalidResponseList instances are equal
        /// </summary>
        /// <param name="input">Instance of LegalTagInvalidResponseList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalTagInvalidResponseList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvalidLegalTags == input.InvalidLegalTags ||
                    this.InvalidLegalTags != null &&
                    this.InvalidLegalTags.SequenceEqual(input.InvalidLegalTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvalidLegalTags != null)
                    hashCode = hashCode * 59 + this.InvalidLegalTags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
