/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// A relationship from this entity to many other entities either by natural key (name) or explicit id, optionally classified by confidence level.
    /// </summary>
    [DataContract]
    public partial class FileToManyRelationship :  IEquatable<FileToManyRelationship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileToManyRelationship" /> class.
        /// </summary>
        /// <param name="confidences">The confidences of the relationships. Keep all the arrays ordered and aligned..</param>
        /// <param name="ids">The ids of the related objects. It is populated for an explicit relationship where the target entity is present as a record in the data ecosystem. Keep all the arrays ordered and aligned..</param>
        /// <param name="names">The names or natural keys of the related objects. Keep all the arrays ordered and aligned..</param>
        /// <param name="versions">The specific version numbers of the related instances. This is only specified if a specific version is required. If not populated the last version is implied. Keep all the arrays ordered and aligned..</param>
        public FileToManyRelationship(List<decimal?> confidences = default(List<decimal?>), List<string> ids = default(List<string>), List<string> names = default(List<string>), List<decimal?> versions = default(List<decimal?>))
        {
            this.Confidences = confidences;
            this.Ids = ids;
            this.Names = names;
            this.Versions = versions;
        }
        
        /// <summary>
        /// The confidences of the relationships. Keep all the arrays ordered and aligned.
        /// </summary>
        /// <value>The confidences of the relationships. Keep all the arrays ordered and aligned.</value>
        [DataMember(Name="confidences", EmitDefaultValue=false)]
        public List<decimal?> Confidences { get; set; }

        /// <summary>
        /// The ids of the related objects. It is populated for an explicit relationship where the target entity is present as a record in the data ecosystem. Keep all the arrays ordered and aligned.
        /// </summary>
        /// <value>The ids of the related objects. It is populated for an explicit relationship where the target entity is present as a record in the data ecosystem. Keep all the arrays ordered and aligned.</value>
        [DataMember(Name="ids", EmitDefaultValue=false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// The names or natural keys of the related objects. Keep all the arrays ordered and aligned.
        /// </summary>
        /// <value>The names or natural keys of the related objects. Keep all the arrays ordered and aligned.</value>
        [DataMember(Name="names", EmitDefaultValue=false)]
        public List<string> Names { get; set; }

        /// <summary>
        /// The specific version numbers of the related instances. This is only specified if a specific version is required. If not populated the last version is implied. Keep all the arrays ordered and aligned.
        /// </summary>
        /// <value>The specific version numbers of the related instances. This is only specified if a specific version is required. If not populated the last version is implied. Keep all the arrays ordered and aligned.</value>
        [DataMember(Name="versions", EmitDefaultValue=false)]
        public List<decimal?> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileToManyRelationship {\n");
            sb.Append("  Confidences: ").Append(Confidences).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileToManyRelationship);
        }

        /// <summary>
        /// Returns true if FileToManyRelationship instances are equal
        /// </summary>
        /// <param name="input">Instance of FileToManyRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileToManyRelationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Confidences == input.Confidences ||
                    this.Confidences != null &&
                    this.Confidences.SequenceEqual(input.Confidences)
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Names == input.Names ||
                    this.Names != null &&
                    this.Names.SequenceEqual(input.Names)
                ) && 
                (
                    this.Versions == input.Versions ||
                    this.Versions != null &&
                    this.Versions.SequenceEqual(input.Versions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Confidences != null)
                    hashCode = hashCode * 59 + this.Confidences.GetHashCode();
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.Names != null)
                    hashCode = hashCode * 59 + this.Names.GetHashCode();
                if (this.Versions != null)
                    hashCode = hashCode * 59 + this.Versions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
