/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OsduClient.Client.SwaggerDateConverter;

namespace OsduClient.Model
{
    /// <summary>
    /// A spatial filter criteria to filter documents that exist within a specific distance from a geo point.
    /// </summary>
    [DataContract]
    public partial class SearchByDistance :  IEquatable<SearchByDistance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchByDistance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchByDistance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchByDistance" /> class.
        /// </summary>
        /// <param name="distance">distance.</param>
        /// <param name="point">point (required).</param>
        public SearchByDistance(double? distance = default(double?), SearchPoint point = default(SearchPoint))
        {
            // to ensure "point" is required (not null)
            if (point == null)
            {
                throw new InvalidDataException("point is a required property for SearchByDistance and cannot be null");
            }
            else
            {
                this.Point = point;
            }
            this.Distance = distance;
        }
        
        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// Gets or Sets Point
        /// </summary>
        [DataMember(Name="point", EmitDefaultValue=false)]
        public SearchPoint Point { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchByDistance {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Point: ").Append(Point).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchByDistance);
        }

        /// <summary>
        /// Returns true if SearchByDistance instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchByDistance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchByDistance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Point == input.Point ||
                    (this.Point != null &&
                    this.Point.Equals(input.Point))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.Point != null)
                    hashCode = hashCode * 59 + this.Point.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Distance (double?) minimum
            if(this.Distance < (double?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            yield break;
        }
    }

}
