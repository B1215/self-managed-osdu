/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OsduClient.Client;
using OsduClient.Model;

namespace OsduClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegisterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a DDMS registration
        /// </summary>
        /// <remarks>
        /// Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterDdms</returns>
        RegisterDdms CreateADDMSRegistration (string dataPartitionId, RegisterDdms body = null);

        /// <summary>
        /// Create a DDMS registration
        /// </summary>
        /// <remarks>
        /// Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterDdms</returns>
        ApiResponse<RegisterDdms> CreateADDMSRegistrationWithHttpInfo (string dataPartitionId, RegisterDdms body = null);
        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterSubscriptionCreateResult</returns>
        RegisterSubscriptionCreateResult CreateASubscription (string dataPartitionId, RegisterSubscription body = null);

        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterSubscriptionCreateResult</returns>
        ApiResponse<RegisterSubscriptionCreateResult> CreateASubscriptionWithHttpInfo (string dataPartitionId, RegisterSubscription body = null);
        /// <summary>
        /// Create an action registration
        /// </summary>
        /// <remarks>
        /// Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterAction</returns>
        RegisterAction CreateAnActionRegistration (string dataPartitionId, RegisterCreateAction body = null);

        /// <summary>
        /// Create an action registration
        /// </summary>
        /// <remarks>
        /// Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterAction</returns>
        ApiResponse<RegisterAction> CreateAnActionRegistrationWithHttpInfo (string dataPartitionId, RegisterCreateAction body = null);
        /// <summary>
        /// Delete a DDMS registration
        /// </summary>
        /// <remarks>
        /// Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns></returns>
        void DeleteADDMSRegistration (string id, string dataPartitionId);

        /// <summary>
        /// Delete a DDMS registration
        /// </summary>
        /// <remarks>
        /// Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteADDMSRegistrationWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns></returns>
        void DeleteASubscriptionById (string id, string dataPartitionId);

        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteASubscriptionByIdWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Delete an action  registration
        /// </summary>
        /// <remarks>
        /// Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns></returns>
        void DeleteAnActionRegistration (string id, string dataPartitionId);

        /// <summary>
        /// Delete an action  registration
        /// </summary>
        /// <remarks>
        /// Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAnActionRegistrationWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Get a DDMS registration
        /// </summary>
        /// <remarks>
        /// Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>RegisterDdms</returns>
        RegisterDdms GetADDMSRegistration (string id, string dataPartitionId);

        /// <summary>
        /// Get a DDMS registration
        /// </summary>
        /// <remarks>
        /// Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of RegisterDdms</returns>
        ApiResponse<RegisterDdms> GetADDMSRegistrationWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>RegisterGetSubscriptionResult</returns>
        RegisterGetSubscriptionResult GetASubscriptionById (string id, string dataPartitionId);

        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of RegisterGetSubscriptionResult</returns>
        ApiResponse<RegisterGetSubscriptionResult> GetASubscriptionByIdWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Get an action registration
        /// </summary>
        /// <remarks>
        /// Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>RegisterAction</returns>
        RegisterAction GetAnActionRegistration (string id, string dataPartitionId);

        /// <summary>
        /// Get an action registration
        /// </summary>
        /// <remarks>
        /// Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of RegisterAction</returns>
        ApiResponse<RegisterAction> GetAnActionRegistrationWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// List all topics
        /// </summary>
        /// <remarks>
        /// List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>List&lt;RegisterTopic&gt;</returns>
        List<RegisterTopic> ListAllTopics (string dataPartitionId);

        /// <summary>
        /// List all topics
        /// </summary>
        /// <remarks>
        /// List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of List&lt;RegisterTopic&gt;</returns>
        ApiResponse<List<RegisterTopic>> ListAllTopicsWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Query for DDMS registrations
        /// </summary>
        /// <remarks>
        /// Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>List&lt;RegisterDdms&gt;</returns>
        List<RegisterDdms> QueryADDMSRegistration (string type, string dataPartitionId);

        /// <summary>
        /// Query for DDMS registrations
        /// </summary>
        /// <remarks>
        /// Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of List&lt;RegisterDdms&gt;</returns>
        ApiResponse<List<RegisterDdms>> QueryADDMSRegistrationWithHttpInfo (string type, string dataPartitionId);
        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters
        /// </summary>
        /// <remarks>
        /// Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>List&lt;RegisterAction&gt;</returns>
        List<RegisterAction> RetrieveAnActionRegistration (string dataPartitionId, RegisterRecord body = null);

        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters
        /// </summary>
        /// <remarks>
        /// Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>ApiResponse of List&lt;RegisterAction&gt;</returns>
        ApiResponse<List<RegisterAction>> RetrieveAnActionRegistrationWithHttpInfo (string dataPartitionId, RegisterRecord body = null);
        /// <summary>
        /// Test an action registration
        /// </summary>
        /// <remarks>
        /// Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterTestActionResult</returns>
        RegisterTestActionResult TestAnActionRegistration (string dataPartitionId, RegisterTestAction body = null);

        /// <summary>
        /// Test an action registration
        /// </summary>
        /// <remarks>
        /// Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterTestActionResult</returns>
        ApiResponse<RegisterTestActionResult> TestAnActionRegistrationWithHttpInfo (string dataPartitionId, RegisterTestAction body = null);
        /// <summary>
        /// Update secret for subscription
        /// </summary>
        /// <remarks>
        /// Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateSecretForSubscription (string id, string dataPartitionId, RegisterSecret body = null);

        /// <summary>
        /// Update secret for subscription
        /// </summary>
        /// <remarks>
        /// Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSecretForSubscriptionWithHttpInfo (string id, string dataPartitionId, RegisterSecret body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a DDMS registration
        /// </summary>
        /// <remarks>
        /// Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterDdms</returns>
        System.Threading.Tasks.Task<RegisterDdms> CreateADDMSRegistrationAsync (string dataPartitionId, RegisterDdms body = null);

        /// <summary>
        /// Create a DDMS registration
        /// </summary>
        /// <remarks>
        /// Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterDdms)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterDdms>> CreateADDMSRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterDdms body = null);
        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterSubscriptionCreateResult</returns>
        System.Threading.Tasks.Task<RegisterSubscriptionCreateResult> CreateASubscriptionAsync (string dataPartitionId, RegisterSubscription body = null);

        /// <summary>
        /// Create a subscription
        /// </summary>
        /// <remarks>
        /// Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterSubscriptionCreateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterSubscriptionCreateResult>> CreateASubscriptionAsyncWithHttpInfo (string dataPartitionId, RegisterSubscription body = null);
        /// <summary>
        /// Create an action registration
        /// </summary>
        /// <remarks>
        /// Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterAction</returns>
        System.Threading.Tasks.Task<RegisterAction> CreateAnActionRegistrationAsync (string dataPartitionId, RegisterCreateAction body = null);

        /// <summary>
        /// Create an action registration
        /// </summary>
        /// <remarks>
        /// Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterAction>> CreateAnActionRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterCreateAction body = null);
        /// <summary>
        /// Delete a DDMS registration
        /// </summary>
        /// <remarks>
        /// Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteADDMSRegistrationAsync (string id, string dataPartitionId);

        /// <summary>
        /// Delete a DDMS registration
        /// </summary>
        /// <remarks>
        /// Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteADDMSRegistrationAsyncWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteASubscriptionByIdAsync (string id, string dataPartitionId);

        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteASubscriptionByIdAsyncWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Delete an action  registration
        /// </summary>
        /// <remarks>
        /// Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAnActionRegistrationAsync (string id, string dataPartitionId);

        /// <summary>
        /// Delete an action  registration
        /// </summary>
        /// <remarks>
        /// Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnActionRegistrationAsyncWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Get a DDMS registration
        /// </summary>
        /// <remarks>
        /// Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of RegisterDdms</returns>
        System.Threading.Tasks.Task<RegisterDdms> GetADDMSRegistrationAsync (string id, string dataPartitionId);

        /// <summary>
        /// Get a DDMS registration
        /// </summary>
        /// <remarks>
        /// Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (RegisterDdms)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterDdms>> GetADDMSRegistrationAsyncWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of RegisterGetSubscriptionResult</returns>
        System.Threading.Tasks.Task<RegisterGetSubscriptionResult> GetASubscriptionByIdAsync (string id, string dataPartitionId);

        /// <summary>
        /// Get a subscription
        /// </summary>
        /// <remarks>
        /// Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (RegisterGetSubscriptionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterGetSubscriptionResult>> GetASubscriptionByIdAsyncWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// Get an action registration
        /// </summary>
        /// <remarks>
        /// Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of RegisterAction</returns>
        System.Threading.Tasks.Task<RegisterAction> GetAnActionRegistrationAsync (string id, string dataPartitionId);

        /// <summary>
        /// Get an action registration
        /// </summary>
        /// <remarks>
        /// Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (RegisterAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterAction>> GetAnActionRegistrationAsyncWithHttpInfo (string id, string dataPartitionId);
        /// <summary>
        /// List all topics
        /// </summary>
        /// <remarks>
        /// List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of List&lt;RegisterTopic&gt;</returns>
        System.Threading.Tasks.Task<List<RegisterTopic>> ListAllTopicsAsync (string dataPartitionId);

        /// <summary>
        /// List all topics
        /// </summary>
        /// <remarks>
        /// List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (List&lt;RegisterTopic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RegisterTopic>>> ListAllTopicsAsyncWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Query for DDMS registrations
        /// </summary>
        /// <remarks>
        /// Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of List&lt;RegisterDdms&gt;</returns>
        System.Threading.Tasks.Task<List<RegisterDdms>> QueryADDMSRegistrationAsync (string type, string dataPartitionId);

        /// <summary>
        /// Query for DDMS registrations
        /// </summary>
        /// <remarks>
        /// Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (List&lt;RegisterDdms&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RegisterDdms>>> QueryADDMSRegistrationAsyncWithHttpInfo (string type, string dataPartitionId);
        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters
        /// </summary>
        /// <remarks>
        /// Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>Task of List&lt;RegisterAction&gt;</returns>
        System.Threading.Tasks.Task<List<RegisterAction>> RetrieveAnActionRegistrationAsync (string dataPartitionId, RegisterRecord body = null);

        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters
        /// </summary>
        /// <remarks>
        /// Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RegisterAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RegisterAction>>> RetrieveAnActionRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterRecord body = null);
        /// <summary>
        /// Test an action registration
        /// </summary>
        /// <remarks>
        /// Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterTestActionResult</returns>
        System.Threading.Tasks.Task<RegisterTestActionResult> TestAnActionRegistrationAsync (string dataPartitionId, RegisterTestAction body = null);

        /// <summary>
        /// Test an action registration
        /// </summary>
        /// <remarks>
        /// Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterTestActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterTestActionResult>> TestAnActionRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterTestAction body = null);
        /// <summary>
        /// Update secret for subscription
        /// </summary>
        /// <remarks>
        /// Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSecretForSubscriptionAsync (string id, string dataPartitionId, RegisterSecret body = null);

        /// <summary>
        /// Update secret for subscription
        /// </summary>
        /// <remarks>
        /// Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSecretForSubscriptionAsyncWithHttpInfo (string id, string dataPartitionId, RegisterSecret body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegisterApi : IRegisterApi
    {
        private OsduClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegisterApi(String basePath)
        {
            this.Configuration = new OsduClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OsduClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegisterApi(OsduClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OsduClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OsduClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OsduClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OsduClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a DDMS registration Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterDdms</returns>
        public RegisterDdms CreateADDMSRegistration (string dataPartitionId, RegisterDdms body = null)
        {
             ApiResponse<RegisterDdms> localVarResponse = CreateADDMSRegistrationWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a DDMS registration Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterDdms</returns>
        public ApiResponse< RegisterDdms > CreateADDMSRegistrationWithHttpInfo (string dataPartitionId, RegisterDdms body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->CreateADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterDdms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterDdms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterDdms)));
        }

        /// <summary>
        /// Create a DDMS registration Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterDdms</returns>
        public async System.Threading.Tasks.Task<RegisterDdms> CreateADDMSRegistrationAsync (string dataPartitionId, RegisterDdms body = null)
        {
             ApiResponse<RegisterDdms> localVarResponse = await CreateADDMSRegistrationAsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a DDMS registration Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterDdms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterDdms>> CreateADDMSRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterDdms body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->CreateADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterDdms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterDdms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterDdms)));
        }

        /// <summary>
        /// Create a subscription Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterSubscriptionCreateResult</returns>
        public RegisterSubscriptionCreateResult CreateASubscription (string dataPartitionId, RegisterSubscription body = null)
        {
             ApiResponse<RegisterSubscriptionCreateResult> localVarResponse = CreateASubscriptionWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a subscription Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterSubscriptionCreateResult</returns>
        public ApiResponse< RegisterSubscriptionCreateResult > CreateASubscriptionWithHttpInfo (string dataPartitionId, RegisterSubscription body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->CreateASubscription");

            var localVarPath = "/api/register/v1/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateASubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterSubscriptionCreateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterSubscriptionCreateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterSubscriptionCreateResult)));
        }

        /// <summary>
        /// Create a subscription Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterSubscriptionCreateResult</returns>
        public async System.Threading.Tasks.Task<RegisterSubscriptionCreateResult> CreateASubscriptionAsync (string dataPartitionId, RegisterSubscription body = null)
        {
             ApiResponse<RegisterSubscriptionCreateResult> localVarResponse = await CreateASubscriptionAsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a subscription Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterSubscriptionCreateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterSubscriptionCreateResult>> CreateASubscriptionAsyncWithHttpInfo (string dataPartitionId, RegisterSubscription body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->CreateASubscription");

            var localVarPath = "/api/register/v1/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateASubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterSubscriptionCreateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterSubscriptionCreateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterSubscriptionCreateResult)));
        }

        /// <summary>
        /// Create an action registration Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterAction</returns>
        public RegisterAction CreateAnActionRegistration (string dataPartitionId, RegisterCreateAction body = null)
        {
             ApiResponse<RegisterAction> localVarResponse = CreateAnActionRegistrationWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an action registration Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterAction</returns>
        public ApiResponse< RegisterAction > CreateAnActionRegistrationWithHttpInfo (string dataPartitionId, RegisterCreateAction body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->CreateAnActionRegistration");

            var localVarPath = "/api/register/v1/action";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterAction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterAction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterAction)));
        }

        /// <summary>
        /// Create an action registration Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterAction</returns>
        public async System.Threading.Tasks.Task<RegisterAction> CreateAnActionRegistrationAsync (string dataPartitionId, RegisterCreateAction body = null)
        {
             ApiResponse<RegisterAction> localVarResponse = await CreateAnActionRegistrationAsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an action registration Create an action registration. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterAction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterAction>> CreateAnActionRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterCreateAction body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->CreateAnActionRegistration");

            var localVarPath = "/api/register/v1/action";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterAction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterAction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterAction)));
        }

        /// <summary>
        /// Delete a DDMS registration Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns></returns>
        public void DeleteADDMSRegistration (string id, string dataPartitionId)
        {
             DeleteADDMSRegistrationWithHttpInfo(id, dataPartitionId);
        }

        /// <summary>
        /// Delete a DDMS registration Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteADDMSRegistrationWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->DeleteADDMSRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->DeleteADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a DDMS registration Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteADDMSRegistrationAsync (string id, string dataPartitionId)
        {
             await DeleteADDMSRegistrationAsyncWithHttpInfo(id, dataPartitionId);

        }

        /// <summary>
        /// Delete a DDMS registration Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteADDMSRegistrationAsyncWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->DeleteADDMSRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->DeleteADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a subscription Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns></returns>
        public void DeleteASubscriptionById (string id, string dataPartitionId)
        {
             DeleteASubscriptionByIdWithHttpInfo(id, dataPartitionId);
        }

        /// <summary>
        /// Delete a subscription Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteASubscriptionByIdWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->DeleteASubscriptionById");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->DeleteASubscriptionById");

            var localVarPath = "/api/register/v1/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteASubscriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a subscription Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteASubscriptionByIdAsync (string id, string dataPartitionId)
        {
             await DeleteASubscriptionByIdAsyncWithHttpInfo(id, dataPartitionId);

        }

        /// <summary>
        /// Delete a subscription Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteASubscriptionByIdAsyncWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->DeleteASubscriptionById");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->DeleteASubscriptionById");

            var localVarPath = "/api/register/v1/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteASubscriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an action  registration Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns></returns>
        public void DeleteAnActionRegistration (string id, string dataPartitionId)
        {
             DeleteAnActionRegistrationWithHttpInfo(id, dataPartitionId);
        }

        /// <summary>
        /// Delete an action  registration Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAnActionRegistrationWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->DeleteAnActionRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->DeleteAnActionRegistration");

            var localVarPath = "/api/register/v1/action/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an action  registration Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAnActionRegistrationAsync (string id, string dataPartitionId)
        {
             await DeleteAnActionRegistrationAsyncWithHttpInfo(id, dataPartitionId);

        }

        /// <summary>
        /// Delete an action  registration Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnActionRegistrationAsyncWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->DeleteAnActionRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->DeleteAnActionRegistration");

            var localVarPath = "/api/register/v1/action/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a DDMS registration Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>RegisterDdms</returns>
        public RegisterDdms GetADDMSRegistration (string id, string dataPartitionId)
        {
             ApiResponse<RegisterDdms> localVarResponse = GetADDMSRegistrationWithHttpInfo(id, dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a DDMS registration Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of RegisterDdms</returns>
        public ApiResponse< RegisterDdms > GetADDMSRegistrationWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->GetADDMSRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->GetADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterDdms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterDdms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterDdms)));
        }

        /// <summary>
        /// Get a DDMS registration Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of RegisterDdms</returns>
        public async System.Threading.Tasks.Task<RegisterDdms> GetADDMSRegistrationAsync (string id, string dataPartitionId)
        {
             ApiResponse<RegisterDdms> localVarResponse = await GetADDMSRegistrationAsyncWithHttpInfo(id, dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a DDMS registration Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (RegisterDdms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterDdms>> GetADDMSRegistrationAsyncWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->GetADDMSRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->GetADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterDdms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterDdms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterDdms)));
        }

        /// <summary>
        /// Get a subscription Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>RegisterGetSubscriptionResult</returns>
        public RegisterGetSubscriptionResult GetASubscriptionById (string id, string dataPartitionId)
        {
             ApiResponse<RegisterGetSubscriptionResult> localVarResponse = GetASubscriptionByIdWithHttpInfo(id, dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a subscription Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of RegisterGetSubscriptionResult</returns>
        public ApiResponse< RegisterGetSubscriptionResult > GetASubscriptionByIdWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->GetASubscriptionById");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->GetASubscriptionById");

            var localVarPath = "/api/register/v1/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetASubscriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterGetSubscriptionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterGetSubscriptionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterGetSubscriptionResult)));
        }

        /// <summary>
        /// Get a subscription Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of RegisterGetSubscriptionResult</returns>
        public async System.Threading.Tasks.Task<RegisterGetSubscriptionResult> GetASubscriptionByIdAsync (string id, string dataPartitionId)
        {
             ApiResponse<RegisterGetSubscriptionResult> localVarResponse = await GetASubscriptionByIdAsyncWithHttpInfo(id, dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a subscription Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (RegisterGetSubscriptionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterGetSubscriptionResult>> GetASubscriptionByIdAsyncWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->GetASubscriptionById");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->GetASubscriptionById");

            var localVarPath = "/api/register/v1/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetASubscriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterGetSubscriptionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterGetSubscriptionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterGetSubscriptionResult)));
        }

        /// <summary>
        /// Get an action registration Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>RegisterAction</returns>
        public RegisterAction GetAnActionRegistration (string id, string dataPartitionId)
        {
             ApiResponse<RegisterAction> localVarResponse = GetAnActionRegistrationWithHttpInfo(id, dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an action registration Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of RegisterAction</returns>
        public ApiResponse< RegisterAction > GetAnActionRegistrationWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->GetAnActionRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->GetAnActionRegistration");

            var localVarPath = "/api/register/v1/action/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterAction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterAction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterAction)));
        }

        /// <summary>
        /// Get an action registration Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of RegisterAction</returns>
        public async System.Threading.Tasks.Task<RegisterAction> GetAnActionRegistrationAsync (string id, string dataPartitionId)
        {
             ApiResponse<RegisterAction> localVarResponse = await GetAnActionRegistrationAsyncWithHttpInfo(id, dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an action registration Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (RegisterAction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterAction>> GetAnActionRegistrationAsyncWithHttpInfo (string id, string dataPartitionId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->GetAnActionRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->GetAnActionRegistration");

            var localVarPath = "/api/register/v1/action/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterAction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterAction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterAction)));
        }

        /// <summary>
        /// List all topics List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>List&lt;RegisterTopic&gt;</returns>
        public List<RegisterTopic> ListAllTopics (string dataPartitionId)
        {
             ApiResponse<List<RegisterTopic>> localVarResponse = ListAllTopicsWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all topics List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of List&lt;RegisterTopic&gt;</returns>
        public ApiResponse< List<RegisterTopic> > ListAllTopicsWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->ListAllTopics");

            var localVarPath = "/api/register/v1/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisterTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisterTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisterTopic>)));
        }

        /// <summary>
        /// List all topics List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of List&lt;RegisterTopic&gt;</returns>
        public async System.Threading.Tasks.Task<List<RegisterTopic>> ListAllTopicsAsync (string dataPartitionId)
        {
             ApiResponse<List<RegisterTopic>> localVarResponse = await ListAllTopicsAsyncWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all topics List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (List&lt;RegisterTopic&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RegisterTopic>>> ListAllTopicsAsyncWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->ListAllTopics");

            var localVarPath = "/api/register/v1/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisterTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisterTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisterTopic>)));
        }

        /// <summary>
        /// Query for DDMS registrations Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>List&lt;RegisterDdms&gt;</returns>
        public List<RegisterDdms> QueryADDMSRegistration (string type, string dataPartitionId)
        {
             ApiResponse<List<RegisterDdms>> localVarResponse = QueryADDMSRegistrationWithHttpInfo(type, dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query for DDMS registrations Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>ApiResponse of List&lt;RegisterDdms&gt;</returns>
        public ApiResponse< List<RegisterDdms> > QueryADDMSRegistrationWithHttpInfo (string type, string dataPartitionId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RegisterApi->QueryADDMSRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->QueryADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisterDdms>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisterDdms>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisterDdms>)));
        }

        /// <summary>
        /// Query for DDMS registrations Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of List&lt;RegisterDdms&gt;</returns>
        public async System.Threading.Tasks.Task<List<RegisterDdms>> QueryADDMSRegistrationAsync (string type, string dataPartitionId)
        {
             ApiResponse<List<RegisterDdms>> localVarResponse = await QueryADDMSRegistrationAsyncWithHttpInfo(type, dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query for DDMS registrations Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <returns>Task of ApiResponse (List&lt;RegisterDdms&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RegisterDdms>>> QueryADDMSRegistrationAsyncWithHttpInfo (string type, string dataPartitionId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RegisterApi->QueryADDMSRegistration");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->QueryADDMSRegistration");

            var localVarPath = "/api/register/v1/ddms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryADDMSRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisterDdms>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisterDdms>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisterDdms>)));
        }

        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>List&lt;RegisterAction&gt;</returns>
        public List<RegisterAction> RetrieveAnActionRegistration (string dataPartitionId, RegisterRecord body = null)
        {
             ApiResponse<List<RegisterAction>> localVarResponse = RetrieveAnActionRegistrationWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>ApiResponse of List&lt;RegisterAction&gt;</returns>
        public ApiResponse< List<RegisterAction> > RetrieveAnActionRegistrationWithHttpInfo (string dataPartitionId, RegisterRecord body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->RetrieveAnActionRegistration");

            var localVarPath = "/api/register/v1/action:retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisterAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisterAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisterAction>)));
        }

        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>Task of List&lt;RegisterAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<RegisterAction>> RetrieveAnActionRegistrationAsync (string dataPartitionId, RegisterRecord body = null)
        {
             ApiResponse<List<RegisterAction>> localVarResponse = await RetrieveAnActionRegistrationAsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query for action registrations and substitutes any action with the given parameters Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body">The Record to find matching actions for and apply the template for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RegisterAction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RegisterAction>>> RetrieveAnActionRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterRecord body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->RetrieveAnActionRegistration");

            var localVarPath = "/api/register/v1/action:retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisterAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisterAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisterAction>)));
        }

        /// <summary>
        /// Test an action registration Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RegisterTestActionResult</returns>
        public RegisterTestActionResult TestAnActionRegistration (string dataPartitionId, RegisterTestAction body = null)
        {
             ApiResponse<RegisterTestActionResult> localVarResponse = TestAnActionRegistrationWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test an action registration Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RegisterTestActionResult</returns>
        public ApiResponse< RegisterTestActionResult > TestAnActionRegistrationWithHttpInfo (string dataPartitionId, RegisterTestAction body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->TestAnActionRegistration");

            var localVarPath = "/api/register/v1/action:test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterTestActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterTestActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterTestActionResult)));
        }

        /// <summary>
        /// Test an action registration Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RegisterTestActionResult</returns>
        public async System.Threading.Tasks.Task<RegisterTestActionResult> TestAnActionRegistrationAsync (string dataPartitionId, RegisterTestAction body = null)
        {
             ApiResponse<RegisterTestActionResult> localVarResponse = await TestAnActionRegistrationAsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test an action registration Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterTestActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterTestActionResult>> TestAnActionRegistrationAsyncWithHttpInfo (string dataPartitionId, RegisterTestAction body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->TestAnActionRegistration");

            var localVarPath = "/api/register/v1/action:test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestAnActionRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterTestActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterTestActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterTestActionResult)));
        }

        /// <summary>
        /// Update secret for subscription Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateSecretForSubscription (string id, string dataPartitionId, RegisterSecret body = null)
        {
             UpdateSecretForSubscriptionWithHttpInfo(id, dataPartitionId, body);
        }

        /// <summary>
        /// Update secret for subscription Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSecretForSubscriptionWithHttpInfo (string id, string dataPartitionId, RegisterSecret body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->UpdateSecretForSubscription");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->UpdateSecretForSubscription");

            var localVarPath = "/api/register/v1/subscription/{id}/secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecretForSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update secret for subscription Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSecretForSubscriptionAsync (string id, string dataPartitionId, RegisterSecret body = null)
        {
             await UpdateSecretForSubscriptionAsyncWithHttpInfo(id, dataPartitionId, body);

        }

        /// <summary>
        /// Update secret for subscription Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="dataPartitionId">Specifies the partition to use. This should be either the partition name associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSecretForSubscriptionAsyncWithHttpInfo (string id, string dataPartitionId, RegisterSecret body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RegisterApi->UpdateSecretForSubscription");
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling RegisterApi->UpdateSecretForSubscription");

            var localVarPath = "/api/register/v1/subscription/{id}/secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecretForSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
