/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OsduClient.Client;
using OsduClient.Model;

namespace OsduClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or update records
        /// </summary>
        /// <remarks>
        /// The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StorageRecord</returns>
        StorageRecord CreateOrUpdateRecords (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null);

        /// <summary>
        /// Create or update records
        /// </summary>
        /// <remarks>
        /// The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StorageRecord</returns>
        ApiResponse<StorageRecord> CreateOrUpdateRecordsWithHttpInfo (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null);
        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns></returns>
        void DeleteRecord (string id, string oSDUAccountId);

        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecordWithHttpInfo (string id, string oSDUAccountId);
        /// <summary>
        /// Soft delete of multiple records
        /// </summary>
        /// <remarks>
        /// The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns></returns>
        void DeleteRecords (string dataPartitionId, List<string> partitionInfo);

        /// <summary>
        /// Soft delete of multiple records
        /// </summary>
        /// <remarks>
        /// The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecordsWithHttpInfo (string dataPartitionId, List<string> partitionInfo);
        /// <summary>
        /// Fetch records
        /// </summary>
        /// <remarks>
        /// The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StorageMultiRecordIds</returns>
        StorageMultiRecordIds FetchRecords (string oSDUAccountId, StorageMultiRecordIds body = null);

        /// <summary>
        /// Fetch records
        /// </summary>
        /// <remarks>
        /// The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StorageMultiRecordIds</returns>
        ApiResponse<StorageMultiRecordIds> FetchRecordsWithHttpInfo (string oSDUAccountId, StorageMultiRecordIds body = null);
        /// <summary>
        /// Get all kinds
        /// </summary>
        /// <remarks>
        /// The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>StorageQueryResponse</returns>
        StorageQueryResponse GetAllKinds (string oSDUAccountId, string cursor = null, int? limit = null);

        /// <summary>
        /// Get all kinds
        /// </summary>
        /// <remarks>
        /// The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>ApiResponse of StorageQueryResponse</returns>
        ApiResponse<StorageQueryResponse> GetAllKindsWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null);
        /// <summary>
        /// Get all record from kind
        /// </summary>
        /// <remarks>
        /// The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>StorageQueryResponse</returns>
        StorageQueryResponse GetAllRecordFromKind (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null);

        /// <summary>
        /// Get all record from kind
        /// </summary>
        /// <remarks>
        /// The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>ApiResponse of StorageQueryResponse</returns>
        ApiResponse<StorageQueryResponse> GetAllRecordFromKindWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null);
        /// <summary>
        /// Get all record versions
        /// </summary>
        /// <remarks>
        /// The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>StorageRecordVersions</returns>
        StorageRecordVersions GetAllRecordVersions (string id, string oSDUAccountId);

        /// <summary>
        /// Get all record versions
        /// </summary>
        /// <remarks>
        /// The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>ApiResponse of StorageRecordVersions</returns>
        ApiResponse<StorageRecordVersions> GetAllRecordVersionsWithHttpInfo (string id, string oSDUAccountId);
        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>StorageRecordData</returns>
        StorageRecordData GetRecord (string id, string oSDUAccountId, List<string> attribute = null);

        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>ApiResponse of StorageRecordData</returns>
        ApiResponse<StorageRecordData> GetRecordWithHttpInfo (string id, string oSDUAccountId, List<string> attribute = null);
        /// <summary>
        /// Get record version
        /// </summary>
        /// <remarks>
        /// The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>StorageRecordData</returns>
        StorageRecordData GetRecordVersion (string id, long? version, string oSDUAccountId, List<string> attribute = null);

        /// <summary>
        /// Get record version
        /// </summary>
        /// <remarks>
        /// The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>ApiResponse of StorageRecordData</returns>
        ApiResponse<StorageRecordData> GetRecordVersionWithHttpInfo (string id, long? version, string oSDUAccountId, List<string> attribute = null);
        /// <summary>
        /// Modify record metadata attributes using patch operations
        /// </summary>
        /// <remarks>
        /// The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StorageBulkUpdateRecordsResponse</returns>
        StorageBulkUpdateRecordsResponse PatchUpdateRecords (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null);

        /// <summary>
        /// Modify record metadata attributes using patch operations
        /// </summary>
        /// <remarks>
        /// The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StorageBulkUpdateRecordsResponse</returns>
        ApiResponse<StorageBulkUpdateRecordsResponse> PatchUpdateRecordsWithHttpInfo (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null);
        /// <summary>
        /// Purge record
        /// </summary>
        /// <remarks>
        /// The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns></returns>
        void PurgeRecord (string id, string oSDUAccountId);

        /// <summary>
        /// Purge record
        /// </summary>
        /// <remarks>
        /// The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurgeRecordWithHttpInfo (string id, string oSDUAccountId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create or update records
        /// </summary>
        /// <remarks>
        /// The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StorageRecord</returns>
        System.Threading.Tasks.Task<StorageRecord> CreateOrUpdateRecordsAsync (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null);

        /// <summary>
        /// Create or update records
        /// </summary>
        /// <remarks>
        /// The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StorageRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageRecord>> CreateOrUpdateRecordsAsyncWithHttpInfo (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null);
        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecordAsync (string id, string oSDUAccountId);

        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordAsyncWithHttpInfo (string id, string oSDUAccountId);
        /// <summary>
        /// Soft delete of multiple records
        /// </summary>
        /// <remarks>
        /// The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecordsAsync (string dataPartitionId, List<string> partitionInfo);

        /// <summary>
        /// Soft delete of multiple records
        /// </summary>
        /// <remarks>
        /// The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordsAsyncWithHttpInfo (string dataPartitionId, List<string> partitionInfo);
        /// <summary>
        /// Fetch records
        /// </summary>
        /// <remarks>
        /// The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StorageMultiRecordIds</returns>
        System.Threading.Tasks.Task<StorageMultiRecordIds> FetchRecordsAsync (string oSDUAccountId, StorageMultiRecordIds body = null);

        /// <summary>
        /// Fetch records
        /// </summary>
        /// <remarks>
        /// The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StorageMultiRecordIds)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageMultiRecordIds>> FetchRecordsAsyncWithHttpInfo (string oSDUAccountId, StorageMultiRecordIds body = null);
        /// <summary>
        /// Get all kinds
        /// </summary>
        /// <remarks>
        /// The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>Task of StorageQueryResponse</returns>
        System.Threading.Tasks.Task<StorageQueryResponse> GetAllKindsAsync (string oSDUAccountId, string cursor = null, int? limit = null);

        /// <summary>
        /// Get all kinds
        /// </summary>
        /// <remarks>
        /// The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (StorageQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageQueryResponse>> GetAllKindsAsyncWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null);
        /// <summary>
        /// Get all record from kind
        /// </summary>
        /// <remarks>
        /// The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>Task of StorageQueryResponse</returns>
        System.Threading.Tasks.Task<StorageQueryResponse> GetAllRecordFromKindAsync (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null);

        /// <summary>
        /// Get all record from kind
        /// </summary>
        /// <remarks>
        /// The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>Task of ApiResponse (StorageQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageQueryResponse>> GetAllRecordFromKindAsyncWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null);
        /// <summary>
        /// Get all record versions
        /// </summary>
        /// <remarks>
        /// The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of StorageRecordVersions</returns>
        System.Threading.Tasks.Task<StorageRecordVersions> GetAllRecordVersionsAsync (string id, string oSDUAccountId);

        /// <summary>
        /// Get all record versions
        /// </summary>
        /// <remarks>
        /// The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of ApiResponse (StorageRecordVersions)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageRecordVersions>> GetAllRecordVersionsAsyncWithHttpInfo (string id, string oSDUAccountId);
        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of StorageRecordData</returns>
        System.Threading.Tasks.Task<StorageRecordData> GetRecordAsync (string id, string oSDUAccountId, List<string> attribute = null);

        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of ApiResponse (StorageRecordData)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageRecordData>> GetRecordAsyncWithHttpInfo (string id, string oSDUAccountId, List<string> attribute = null);
        /// <summary>
        /// Get record version
        /// </summary>
        /// <remarks>
        /// The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of StorageRecordData</returns>
        System.Threading.Tasks.Task<StorageRecordData> GetRecordVersionAsync (string id, long? version, string oSDUAccountId, List<string> attribute = null);

        /// <summary>
        /// Get record version
        /// </summary>
        /// <remarks>
        /// The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of ApiResponse (StorageRecordData)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageRecordData>> GetRecordVersionAsyncWithHttpInfo (string id, long? version, string oSDUAccountId, List<string> attribute = null);
        /// <summary>
        /// Modify record metadata attributes using patch operations
        /// </summary>
        /// <remarks>
        /// The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StorageBulkUpdateRecordsResponse</returns>
        System.Threading.Tasks.Task<StorageBulkUpdateRecordsResponse> PatchUpdateRecordsAsync (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null);

        /// <summary>
        /// Modify record metadata attributes using patch operations
        /// </summary>
        /// <remarks>
        /// The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StorageBulkUpdateRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBulkUpdateRecordsResponse>> PatchUpdateRecordsAsyncWithHttpInfo (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null);
        /// <summary>
        /// Purge record
        /// </summary>
        /// <remarks>
        /// The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurgeRecordAsync (string id, string oSDUAccountId);

        /// <summary>
        /// Purge record
        /// </summary>
        /// <remarks>
        /// The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </remarks>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurgeRecordAsyncWithHttpInfo (string id, string oSDUAccountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorageApi : IStorageApi
    {
        private OsduClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi(String basePath)
        {
            this.Configuration = new OsduClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OsduClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StorageApi(OsduClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OsduClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OsduClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OsduClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OsduClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create or update records The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StorageRecord</returns>
        public StorageRecord CreateOrUpdateRecords (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null)
        {
             ApiResponse<StorageRecord> localVarResponse = CreateOrUpdateRecordsWithHttpInfo(oSDUAccountId, skipdupes, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update records The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StorageRecord</returns>
        public ApiResponse< StorageRecord > CreateOrUpdateRecordsWithHttpInfo (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->CreateOrUpdateRecords");

            var localVarPath = "/api/storage/v2/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (skipdupes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipdupes", skipdupes)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecord)));
        }

        /// <summary>
        /// Create or update records The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StorageRecord</returns>
        public async System.Threading.Tasks.Task<StorageRecord> CreateOrUpdateRecordsAsync (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null)
        {
             ApiResponse<StorageRecord> localVarResponse = await CreateOrUpdateRecordsAsyncWithHttpInfo(oSDUAccountId, skipdupes, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update records The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="skipdupes">Skip duplicates when updating records with the same value. (optional, default to true)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StorageRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageRecord>> CreateOrUpdateRecordsAsyncWithHttpInfo (string oSDUAccountId, bool? skipdupes = null, List<StorageRecord> body = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->CreateOrUpdateRecords");

            var localVarPath = "/api/storage/v2/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (skipdupes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipdupes", skipdupes)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecord)));
        }

        /// <summary>
        /// Delete record The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns></returns>
        public void DeleteRecord (string id, string oSDUAccountId)
        {
             DeleteRecordWithHttpInfo(id, oSDUAccountId);
        }

        /// <summary>
        /// Delete record The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecordWithHttpInfo (string id, string oSDUAccountId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->DeleteRecord");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->DeleteRecord");

            var localVarPath = "/api/records/{id}:delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete record The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecordAsync (string id, string oSDUAccountId)
        {
             await DeleteRecordAsyncWithHttpInfo(id, oSDUAccountId);

        }

        /// <summary>
        /// Delete record The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordAsyncWithHttpInfo (string id, string oSDUAccountId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->DeleteRecord");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->DeleteRecord");

            var localVarPath = "/api/records/{id}:delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Soft delete of multiple records The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns></returns>
        public void DeleteRecords (string dataPartitionId, List<string> partitionInfo)
        {
             DeleteRecordsWithHttpInfo(dataPartitionId, partitionInfo);
        }

        /// <summary>
        /// Soft delete of multiple records The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecordsWithHttpInfo (string dataPartitionId, List<string> partitionInfo)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling StorageApi->DeleteRecords");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling StorageApi->DeleteRecords");

            var localVarPath = "/api/storage/v2/records/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Soft delete of multiple records The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecordsAsync (string dataPartitionId, List<string> partitionInfo)
        {
             await DeleteRecordsAsyncWithHttpInfo(dataPartitionId, partitionInfo);

        }

        /// <summary>
        /// Soft delete of multiple records The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordsAsyncWithHttpInfo (string dataPartitionId, List<string> partitionInfo)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling StorageApi->DeleteRecords");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling StorageApi->DeleteRecords");

            var localVarPath = "/api/storage/v2/records/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetch records The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StorageMultiRecordIds</returns>
        public StorageMultiRecordIds FetchRecords (string oSDUAccountId, StorageMultiRecordIds body = null)
        {
             ApiResponse<StorageMultiRecordIds> localVarResponse = FetchRecordsWithHttpInfo(oSDUAccountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch records The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StorageMultiRecordIds</returns>
        public ApiResponse< StorageMultiRecordIds > FetchRecordsWithHttpInfo (string oSDUAccountId, StorageMultiRecordIds body = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->FetchRecords");

            var localVarPath = "/api/storage/v2/query/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageMultiRecordIds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageMultiRecordIds) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageMultiRecordIds)));
        }

        /// <summary>
        /// Fetch records The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StorageMultiRecordIds</returns>
        public async System.Threading.Tasks.Task<StorageMultiRecordIds> FetchRecordsAsync (string oSDUAccountId, StorageMultiRecordIds body = null)
        {
             ApiResponse<StorageMultiRecordIds> localVarResponse = await FetchRecordsAsyncWithHttpInfo(oSDUAccountId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch records The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StorageMultiRecordIds)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageMultiRecordIds>> FetchRecordsAsyncWithHttpInfo (string oSDUAccountId, StorageMultiRecordIds body = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->FetchRecords");

            var localVarPath = "/api/storage/v2/query/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageMultiRecordIds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageMultiRecordIds) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageMultiRecordIds)));
        }

        /// <summary>
        /// Get all kinds The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>StorageQueryResponse</returns>
        public StorageQueryResponse GetAllKinds (string oSDUAccountId, string cursor = null, int? limit = null)
        {
             ApiResponse<StorageQueryResponse> localVarResponse = GetAllKindsWithHttpInfo(oSDUAccountId, cursor, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all kinds The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>ApiResponse of StorageQueryResponse</returns>
        public ApiResponse< StorageQueryResponse > GetAllKindsWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetAllKinds");

            var localVarPath = "/api/storage/v2/query/kinds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllKinds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageQueryResponse)));
        }

        /// <summary>
        /// Get all kinds The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>Task of StorageQueryResponse</returns>
        public async System.Threading.Tasks.Task<StorageQueryResponse> GetAllKindsAsync (string oSDUAccountId, string cursor = null, int? limit = null)
        {
             ApiResponse<StorageQueryResponse> localVarResponse = await GetAllKindsAsyncWithHttpInfo(oSDUAccountId, cursor, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all kinds The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active account account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (StorageQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageQueryResponse>> GetAllKindsAsyncWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetAllKinds");

            var localVarPath = "/api/storage/v2/query/kinds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllKinds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageQueryResponse)));
        }

        /// <summary>
        /// Get all record from kind The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>StorageQueryResponse</returns>
        public StorageQueryResponse GetAllRecordFromKind (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null)
        {
             ApiResponse<StorageQueryResponse> localVarResponse = GetAllRecordFromKindWithHttpInfo(oSDUAccountId, cursor, limit, kind);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all record from kind The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>ApiResponse of StorageQueryResponse</returns>
        public ApiResponse< StorageQueryResponse > GetAllRecordFromKindWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetAllRecordFromKind");

            var localVarPath = "/api/storage/v2/query/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (kind != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "kind", kind)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRecordFromKind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageQueryResponse)));
        }

        /// <summary>
        /// Get all record from kind The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>Task of StorageQueryResponse</returns>
        public async System.Threading.Tasks.Task<StorageQueryResponse> GetAllRecordFromKindAsync (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null)
        {
             ApiResponse<StorageQueryResponse> localVarResponse = await GetAllRecordFromKindAsyncWithHttpInfo(oSDUAccountId, cursor, limit, kind);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all record from kind The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="limit">Page Size (optional, default to 10)</param>
        /// <param name="kind">Filter Kind (optional, default to tenant1:public:well:1.0.2)</param>
        /// <returns>Task of ApiResponse (StorageQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageQueryResponse>> GetAllRecordFromKindAsyncWithHttpInfo (string oSDUAccountId, string cursor = null, int? limit = null, string kind = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetAllRecordFromKind");

            var localVarPath = "/api/storage/v2/query/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (kind != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "kind", kind)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRecordFromKind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageQueryResponse)));
        }

        /// <summary>
        /// Get all record versions The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>StorageRecordVersions</returns>
        public StorageRecordVersions GetAllRecordVersions (string id, string oSDUAccountId)
        {
             ApiResponse<StorageRecordVersions> localVarResponse = GetAllRecordVersionsWithHttpInfo(id, oSDUAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all record versions The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>ApiResponse of StorageRecordVersions</returns>
        public ApiResponse< StorageRecordVersions > GetAllRecordVersionsWithHttpInfo (string id, string oSDUAccountId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->GetAllRecordVersions");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetAllRecordVersions");

            var localVarPath = "/api/storage/v2/records/versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRecordVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecordVersions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecordVersions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecordVersions)));
        }

        /// <summary>
        /// Get all record versions The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of StorageRecordVersions</returns>
        public async System.Threading.Tasks.Task<StorageRecordVersions> GetAllRecordVersionsAsync (string id, string oSDUAccountId)
        {
             ApiResponse<StorageRecordVersions> localVarResponse = await GetAllRecordVersionsAsyncWithHttpInfo(id, oSDUAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all record versions The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of ApiResponse (StorageRecordVersions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageRecordVersions>> GetAllRecordVersionsAsyncWithHttpInfo (string id, string oSDUAccountId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->GetAllRecordVersions");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetAllRecordVersions");

            var localVarPath = "/api/storage/v2/records/versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRecordVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecordVersions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecordVersions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecordVersions)));
        }

        /// <summary>
        /// Get record This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>StorageRecordData</returns>
        public StorageRecordData GetRecord (string id, string oSDUAccountId, List<string> attribute = null)
        {
             ApiResponse<StorageRecordData> localVarResponse = GetRecordWithHttpInfo(id, oSDUAccountId, attribute);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get record This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>ApiResponse of StorageRecordData</returns>
        public ApiResponse< StorageRecordData > GetRecordWithHttpInfo (string id, string oSDUAccountId, List<string> attribute = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->GetRecord");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetRecord");

            var localVarPath = "/api/storage/v2/records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "attribute", attribute)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecordData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecordData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecordData)));
        }

        /// <summary>
        /// Get record This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of StorageRecordData</returns>
        public async System.Threading.Tasks.Task<StorageRecordData> GetRecordAsync (string id, string oSDUAccountId, List<string> attribute = null)
        {
             ApiResponse<StorageRecordData> localVarResponse = await GetRecordAsyncWithHttpInfo(id, oSDUAccountId, attribute);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get record This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of ApiResponse (StorageRecordData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageRecordData>> GetRecordAsyncWithHttpInfo (string id, string oSDUAccountId, List<string> attribute = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->GetRecord");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetRecord");

            var localVarPath = "/api/storage/v2/records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "attribute", attribute)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecordData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecordData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecordData)));
        }

        /// <summary>
        /// Get record version The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>StorageRecordData</returns>
        public StorageRecordData GetRecordVersion (string id, long? version, string oSDUAccountId, List<string> attribute = null)
        {
             ApiResponse<StorageRecordData> localVarResponse = GetRecordVersionWithHttpInfo(id, version, oSDUAccountId, attribute);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get record version The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>ApiResponse of StorageRecordData</returns>
        public ApiResponse< StorageRecordData > GetRecordVersionWithHttpInfo (string id, long? version, string oSDUAccountId, List<string> attribute = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->GetRecordVersion");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling StorageApi->GetRecordVersion");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetRecordVersion");

            var localVarPath = "/api/storage/v2/records/{id}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (attribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "attribute", attribute)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecordData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecordData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecordData)));
        }

        /// <summary>
        /// Get record version The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of StorageRecordData</returns>
        public async System.Threading.Tasks.Task<StorageRecordData> GetRecordVersionAsync (string id, long? version, string oSDUAccountId, List<string> attribute = null)
        {
             ApiResponse<StorageRecordData> localVarResponse = await GetRecordVersionAsyncWithHttpInfo(id, version, oSDUAccountId, attribute);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get record version The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="version">Record version</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="attribute">Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)</param>
        /// <returns>Task of ApiResponse (StorageRecordData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageRecordData>> GetRecordVersionAsyncWithHttpInfo (string id, long? version, string oSDUAccountId, List<string> attribute = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->GetRecordVersion");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling StorageApi->GetRecordVersion");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->GetRecordVersion");

            var localVarPath = "/api/storage/v2/records/{id}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (attribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "attribute", attribute)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageRecordData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageRecordData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageRecordData)));
        }

        /// <summary>
        /// Modify record metadata attributes using patch operations The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StorageBulkUpdateRecordsResponse</returns>
        public StorageBulkUpdateRecordsResponse PatchUpdateRecords (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null)
        {
             ApiResponse<StorageBulkUpdateRecordsResponse> localVarResponse = PatchUpdateRecordsWithHttpInfo(oSDUAccountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify record metadata attributes using patch operations The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StorageBulkUpdateRecordsResponse</returns>
        public ApiResponse< StorageBulkUpdateRecordsResponse > PatchUpdateRecordsWithHttpInfo (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->PatchUpdateRecords");

            var localVarPath = "/api/storage/v2/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchUpdateRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBulkUpdateRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBulkUpdateRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBulkUpdateRecordsResponse)));
        }

        /// <summary>
        /// Modify record metadata attributes using patch operations The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StorageBulkUpdateRecordsResponse</returns>
        public async System.Threading.Tasks.Task<StorageBulkUpdateRecordsResponse> PatchUpdateRecordsAsync (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null)
        {
             ApiResponse<StorageBulkUpdateRecordsResponse> localVarResponse = await PatchUpdateRecordsAsyncWithHttpInfo(oSDUAccountId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify record metadata attributes using patch operations The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StorageBulkUpdateRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageBulkUpdateRecordsResponse>> PatchUpdateRecordsAsyncWithHttpInfo (string oSDUAccountId, List<StorageRecordBulkUpdateParam> body = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->PatchUpdateRecords");

            var localVarPath = "/api/storage/v2/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchUpdateRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageBulkUpdateRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StorageBulkUpdateRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageBulkUpdateRecordsResponse)));
        }

        /// <summary>
        /// Purge record The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns></returns>
        public void PurgeRecord (string id, string oSDUAccountId)
        {
             PurgeRecordWithHttpInfo(id, oSDUAccountId);
        }

        /// <summary>
        /// Purge record The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PurgeRecordWithHttpInfo (string id, string oSDUAccountId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->PurgeRecord");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->PurgeRecord");

            var localVarPath = "/api/storage/v2/records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurgeRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Purge record The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurgeRecordAsync (string id, string oSDUAccountId)
        {
             await PurgeRecordAsyncWithHttpInfo(id, oSDUAccountId);

        }

        /// <summary>
        /// Purge record The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
        /// </summary>
        /// <exception cref="OsduClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Record id</param>
        /// <param name="oSDUAccountId">Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PurgeRecordAsyncWithHttpInfo (string id, string oSDUAccountId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StorageApi->PurgeRecord");
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling StorageApi->PurgeRecord");

            var localVarPath = "/api/storage/v2/records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurgeRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
