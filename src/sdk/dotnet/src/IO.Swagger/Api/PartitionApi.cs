/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartitionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can create a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns></returns>
        void CreateUsingPOST (string partitionId, PartitionDto partitionInfo);

        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can create a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateUsingPOSTWithHttpInfo (string partitionId, PartitionDto partitionInfo);
        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// By passing in a single partition Id, you can delete a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns></returns>
        void DeleteUsingDELETE (string partitionId);

        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// By passing in a single partition Id, you can delete a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUsingDELETEWithHttpInfo (string partitionId);
        /// <summary>
        /// Get Single Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id, you can retrieve the partition information. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Dictionary&lt;string, PartitionProperty&gt;</returns>
        Dictionary<string, PartitionProperty> GetUsingGET (string partitionId);

        /// <summary>
        /// Get Single Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id, you can retrieve the partition information. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>ApiResponse of Dictionary&lt;string, PartitionProperty&gt;</returns>
        ApiResponse<Dictionary<string, PartitionProperty>> GetUsingGETWithHttpInfo (string partitionId);
        /// <summary>
        /// List Partitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ListUsingGET ();

        /// <summary>
        /// List Partitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ListUsingGETWithHttpInfo ();
        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can update a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns></returns>
        void UpdateUsingPATCH (string partitionId, PartitionDto partitionInfo);

        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can update a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUsingPATCHWithHttpInfo (string partitionId, PartitionDto partitionInfo);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can create a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateUsingPOSTAsync (string partitionId, PartitionDto partitionInfo);

        /// <summary>
        /// Create Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can create a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUsingPOSTAsyncWithHttpInfo (string partitionId, PartitionDto partitionInfo);
        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// By passing in a single partition Id, you can delete a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUsingDELETEAsync (string partitionId);

        /// <summary>
        /// Delete Partition
        /// </summary>
        /// <remarks>
        /// By passing in a single partition Id, you can delete a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsingDELETEAsyncWithHttpInfo (string partitionId);
        /// <summary>
        /// Get Single Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id, you can retrieve the partition information. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of Dictionary&lt;string, PartitionProperty&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, PartitionProperty>> GetUsingGETAsync (string partitionId);

        /// <summary>
        /// Get Single Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id, you can retrieve the partition information. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, PartitionProperty&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, PartitionProperty>>> GetUsingGETAsyncWithHttpInfo (string partitionId);
        /// <summary>
        /// List Partitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ListUsingGETAsync ();

        /// <summary>
        /// List Partitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ListUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can update a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUsingPATCHAsync (string partitionId, PartitionDto partitionInfo);

        /// <summary>
        /// Update Partition
        /// </summary>
        /// <remarks>
        /// By passing in a partition Id and a partition info object you can update a partition. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUsingPATCHAsyncWithHttpInfo (string partitionId, PartitionDto partitionInfo);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PartitionApi : IPartitionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PartitionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PartitionApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartitionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PartitionApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Partition By passing in a partition Id and a partition info object you can create a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns></returns>
        public void CreateUsingPOST (string partitionId, PartitionDto partitionInfo)
        {
             CreateUsingPOSTWithHttpInfo(partitionId, partitionInfo);
        }

        /// <summary>
        /// Create Partition By passing in a partition Id and a partition info object you can create a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateUsingPOSTWithHttpInfo (string partitionId, PartitionDto partitionInfo)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->CreateUsingPOST");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling PartitionApi->CreateUsingPOST");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Partition By passing in a partition Id and a partition info object you can create a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateUsingPOSTAsync (string partitionId, PartitionDto partitionInfo)
        {
             await CreateUsingPOSTAsyncWithHttpInfo(partitionId, partitionInfo);

        }

        /// <summary>
        /// Create Partition By passing in a partition Id and a partition info object you can create a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateUsingPOSTAsyncWithHttpInfo (string partitionId, PartitionDto partitionInfo)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->CreateUsingPOST");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling PartitionApi->CreateUsingPOST");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Partition By passing in a single partition Id, you can delete a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns></returns>
        public void DeleteUsingDELETE (string partitionId)
        {
             DeleteUsingDELETEWithHttpInfo(partitionId);
        }

        /// <summary>
        /// Delete Partition By passing in a single partition Id, you can delete a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUsingDELETEWithHttpInfo (string partitionId)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->DeleteUsingDELETE");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Partition By passing in a single partition Id, you can delete a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUsingDELETEAsync (string partitionId)
        {
             await DeleteUsingDELETEAsyncWithHttpInfo(partitionId);

        }

        /// <summary>
        /// Delete Partition By passing in a single partition Id, you can delete a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsingDELETEAsyncWithHttpInfo (string partitionId)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->DeleteUsingDELETE");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Single Partition By passing in a partition Id, you can retrieve the partition information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Dictionary&lt;string, PartitionProperty&gt;</returns>
        public Dictionary<string, PartitionProperty> GetUsingGET (string partitionId)
        {
             ApiResponse<Dictionary<string, PartitionProperty>> localVarResponse = GetUsingGETWithHttpInfo(partitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Partition By passing in a partition Id, you can retrieve the partition information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>ApiResponse of Dictionary&lt;string, PartitionProperty&gt;</returns>
        public ApiResponse< Dictionary<string, PartitionProperty> > GetUsingGETWithHttpInfo (string partitionId)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->GetUsingGET");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, PartitionProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, PartitionProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, PartitionProperty>)));
        }

        /// <summary>
        /// Get Single Partition By passing in a partition Id, you can retrieve the partition information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of Dictionary&lt;string, PartitionProperty&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, PartitionProperty>> GetUsingGETAsync (string partitionId)
        {
             ApiResponse<Dictionary<string, PartitionProperty>> localVarResponse = await GetUsingGETAsyncWithHttpInfo(partitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Single Partition By passing in a partition Id, you can retrieve the partition information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, PartitionProperty&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, PartitionProperty>>> GetUsingGETAsyncWithHttpInfo (string partitionId)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->GetUsingGET");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, PartitionProperty>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, PartitionProperty>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, PartitionProperty>)));
        }

        /// <summary>
        /// List Partitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ListUsingGET ()
        {
             ApiResponse<List<string>> localVarResponse = ListUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Partitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ListUsingGETWithHttpInfo ()
        {

            var localVarPath = "/partition/v1/partitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// List Partitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ListUsingGETAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await ListUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Partitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ListUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/partition/v1/partitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Update Partition By passing in a partition Id and a partition info object you can update a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns></returns>
        public void UpdateUsingPATCH (string partitionId, PartitionDto partitionInfo)
        {
             UpdateUsingPATCHWithHttpInfo(partitionId, partitionInfo);
        }

        /// <summary>
        /// Update Partition By passing in a partition Id and a partition info object you can update a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUsingPATCHWithHttpInfo (string partitionId, PartitionDto partitionInfo)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->UpdateUsingPATCH");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling PartitionApi->UpdateUsingPATCH");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Partition By passing in a partition Id and a partition info object you can update a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUsingPATCHAsync (string partitionId, PartitionDto partitionInfo)
        {
             await UpdateUsingPATCHAsyncWithHttpInfo(partitionId, partitionInfo);

        }

        /// <summary>
        /// Update Partition By passing in a partition Id and a partition info object you can update a partition. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partitionId">partitionId</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUsingPATCHAsyncWithHttpInfo (string partitionId, PartitionDto partitionInfo)
        {
            // verify the required parameter 'partitionId' is set
            if (partitionId == null)
                throw new ApiException(400, "Missing required parameter 'partitionId' when calling PartitionApi->UpdateUsingPATCH");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling PartitionApi->UpdateUsingPATCH");

            var localVarPath = "/partition/v1/partitions/{partitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partitionId != null) localVarPathParams.Add("partitionId", this.Configuration.ApiClient.ParameterToString(partitionId)); // path parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
