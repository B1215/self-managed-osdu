/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILegalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDto</returns>
        LegalTagDto CreateLegalTag (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDto</returns>
        ApiResponse<LegalTagDto> CreateLegalTagWithHttpInfo (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Delete Legal Tag
        /// </summary>
        /// <remarks>
        /// This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteLegalTag (string dataPartitionId, string name);

        /// <summary>
        /// Delete Legal Tag
        /// </summary>
        /// <remarks>
        /// This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLegalTagWithHttpInfo (string dataPartitionId, string name);
        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>LegalTagDto</returns>
        LegalTagDto GetLegalTag (string dataPartitionId, string name);

        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of LegalTagDto</returns>
        ApiResponse<LegalTagDto> GetLegalTagWithHttpInfo (string dataPartitionId, string name);
        /// <summary>
        /// Gets LegalTag property values.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of allowed values for LegalTag properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>LegalTagPropertyValues</returns>
        LegalTagPropertyValues GetLegalTagProperties (string dataPartitionId);

        /// <summary>
        /// Gets LegalTag property values.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of allowed values for LegalTag properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>ApiResponse of LegalTagPropertyValues</returns>
        ApiResponse<LegalTagPropertyValues> GetLegalTagPropertiesWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Retrieves the LegalTags for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDtos</returns>
        LegalTagDtos GetLegalTags (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Retrieves the LegalTags for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDtos</returns>
        ApiResponse<LegalTagDtos> GetLegalTagsWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Gets all LegalTags.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of all LegalTags.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDtos</returns>
        LegalTagDtos ListLegalTags (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Gets all LegalTags.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of all LegalTags.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDtos</returns>
        ApiResponse<LegalTagDtos> ListLegalTagsWithHttpInfo (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDto</returns>
        LegalTagDto UpdateLegalTag (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDto</returns>
        ApiResponse<LegalTagDto> UpdateLegalTagWithHttpInfo (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagInvalidResponseList</returns>
        LegalTagInvalidResponseList ValidateLegalTags (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagInvalidResponseList</returns>
        ApiResponse<LegalTagInvalidResponseList> ValidateLegalTagsWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDto</returns>
        System.Threading.Tasks.Task<LegalTagDto> CreateLegalTagAsync (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalTagDto>> CreateLegalTagAsyncWithHttpInfo (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Delete Legal Tag
        /// </summary>
        /// <remarks>
        /// This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLegalTagAsync (string dataPartitionId, string name);

        /// <summary>
        /// Delete Legal Tag
        /// </summary>
        /// <remarks>
        /// This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLegalTagAsyncWithHttpInfo (string dataPartitionId, string name);
        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of LegalTagDto</returns>
        System.Threading.Tasks.Task<LegalTagDto> GetLegalTagAsync (string dataPartitionId, string name);

        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (LegalTagDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalTagDto>> GetLegalTagAsyncWithHttpInfo (string dataPartitionId, string name);
        /// <summary>
        /// Gets LegalTag property values.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of allowed values for LegalTag properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of LegalTagPropertyValues</returns>
        System.Threading.Tasks.Task<LegalTagPropertyValues> GetLegalTagPropertiesAsync (string dataPartitionId);

        /// <summary>
        /// Gets LegalTag property values.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of allowed values for LegalTag properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of ApiResponse (LegalTagPropertyValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalTagPropertyValues>> GetLegalTagPropertiesAsyncWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Retrieves the LegalTags for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDtos</returns>
        System.Threading.Tasks.Task<LegalTagDtos> GetLegalTagsAsync (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Retrieves the LegalTags for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDtos)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalTagDtos>> GetLegalTagsAsyncWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Gets all LegalTags.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of all LegalTags.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDtos</returns>
        System.Threading.Tasks.Task<LegalTagDtos> ListLegalTagsAsync (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Gets all LegalTags.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of all LegalTags.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDtos)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalTagDtos>> ListLegalTagsAsyncWithHttpInfo (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDto</returns>
        System.Threading.Tasks.Task<LegalTagDto> UpdateLegalTagAsync (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;.
        /// </summary>
        /// <remarks>
        /// This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalTagDto>> UpdateLegalTagAsyncWithHttpInfo (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null);
        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagInvalidResponseList</returns>
        System.Threading.Tasks.Task<LegalTagInvalidResponseList> ValidateLegalTagsAsync (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);

        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names.
        /// </summary>
        /// <remarks>
        /// This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagInvalidResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalTagInvalidResponseList>> ValidateLegalTagsAsyncWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LegalApi : ILegalApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LegalApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LegalApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;. This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDto</returns>
        public LegalTagDto CreateLegalTag (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDto> localVarResponse = CreateLegalTagWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;. This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDto</returns>
        public ApiResponse< LegalTagDto > CreateLegalTagWithHttpInfo (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->CreateLegalTag");

            var localVarPath = "/legal/v1/legaltags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDto)));
        }

        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;. This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDto</returns>
        public async System.Threading.Tasks.Task<LegalTagDto> CreateLegalTagAsync (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDto> localVarResponse = await CreateLegalTagAsyncWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the LegalTag for the given &#39;name&#39;. This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalTagDto>> CreateLegalTagAsyncWithHttpInfo (string oSDUAccountId, LegalTagDto body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->CreateLegalTag");

            var localVarPath = "/legal/v1/legaltags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDto)));
        }

        /// <summary>
        /// Delete Legal Tag This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteLegalTag (string dataPartitionId, string name)
        {
             DeleteLegalTagWithHttpInfo(dataPartitionId, name);
        }

        /// <summary>
        /// Delete Legal Tag This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLegalTagWithHttpInfo (string dataPartitionId, string name)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling LegalApi->DeleteLegalTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LegalApi->DeleteLegalTag");

            var localVarPath = "/legal/v1/legaltags/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Legal Tag This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLegalTagAsync (string dataPartitionId, string name)
        {
             await DeleteLegalTagAsyncWithHttpInfo(dataPartitionId, name);

        }

        /// <summary>
        /// Delete Legal Tag This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLegalTagAsyncWithHttpInfo (string dataPartitionId, string name)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling LegalApi->DeleteLegalTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LegalApi->DeleteLegalTag");

            var localVarPath = "/legal/v1/legaltags/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;. This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>LegalTagDto</returns>
        public LegalTagDto GetLegalTag (string dataPartitionId, string name)
        {
             ApiResponse<LegalTagDto> localVarResponse = GetLegalTagWithHttpInfo(dataPartitionId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;. This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of LegalTagDto</returns>
        public ApiResponse< LegalTagDto > GetLegalTagWithHttpInfo (string dataPartitionId, string name)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling LegalApi->GetLegalTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LegalApi->GetLegalTag");

            var localVarPath = "/legal/v1/legaltags/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDto)));
        }

        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;. This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of LegalTagDto</returns>
        public async System.Threading.Tasks.Task<LegalTagDto> GetLegalTagAsync (string dataPartitionId, string name)
        {
             ApiResponse<LegalTagDto> localVarResponse = await GetLegalTagAsyncWithHttpInfo(dataPartitionId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a LegalTag for the given &#39;name&#39;. This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (LegalTagDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalTagDto>> GetLegalTagAsyncWithHttpInfo (string dataPartitionId, string name)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling LegalApi->GetLegalTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LegalApi->GetLegalTag");

            var localVarPath = "/legal/v1/legaltags/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDto)));
        }

        /// <summary>
        /// Gets LegalTag property values. This allows for the retrieval of allowed values for LegalTag properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>LegalTagPropertyValues</returns>
        public LegalTagPropertyValues GetLegalTagProperties (string dataPartitionId)
        {
             ApiResponse<LegalTagPropertyValues> localVarResponse = GetLegalTagPropertiesWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets LegalTag property values. This allows for the retrieval of allowed values for LegalTag properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>ApiResponse of LegalTagPropertyValues</returns>
        public ApiResponse< LegalTagPropertyValues > GetLegalTagPropertiesWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling LegalApi->GetLegalTagProperties");

            var localVarPath = "/legal/v1/legaltags:properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalTagProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagPropertyValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagPropertyValues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagPropertyValues)));
        }

        /// <summary>
        /// Gets LegalTag property values. This allows for the retrieval of allowed values for LegalTag properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of LegalTagPropertyValues</returns>
        public async System.Threading.Tasks.Task<LegalTagPropertyValues> GetLegalTagPropertiesAsync (string dataPartitionId)
        {
             ApiResponse<LegalTagPropertyValues> localVarResponse = await GetLegalTagPropertiesAsyncWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets LegalTag property values. This allows for the retrieval of allowed values for LegalTag properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of ApiResponse (LegalTagPropertyValues)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalTagPropertyValues>> GetLegalTagPropertiesAsyncWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling LegalApi->GetLegalTagProperties");

            var localVarPath = "/legal/v1/legaltags:properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalTagProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagPropertyValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagPropertyValues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagPropertyValues)));
        }

        /// <summary>
        /// Retrieves the LegalTags for the given names. This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDtos</returns>
        public LegalTagDtos GetLegalTags (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDtos> localVarResponse = GetLegalTagsWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the LegalTags for the given names. This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDtos</returns>
        public ApiResponse< LegalTagDtos > GetLegalTagsWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->GetLegalTags");

            var localVarPath = "/legal/v1/legaltags:batchRetrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDtos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDtos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDtos)));
        }

        /// <summary>
        /// Retrieves the LegalTags for the given names. This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDtos</returns>
        public async System.Threading.Tasks.Task<LegalTagDtos> GetLegalTagsAsync (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDtos> localVarResponse = await GetLegalTagsAsyncWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the LegalTags for the given names. This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDtos)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalTagDtos>> GetLegalTagsAsyncWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->GetLegalTags");

            var localVarPath = "/legal/v1/legaltags:batchRetrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDtos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDtos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDtos)));
        }

        /// <summary>
        /// Gets all LegalTags. This allows for the retrieval of all LegalTags.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDtos</returns>
        public LegalTagDtos ListLegalTags (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDtos> localVarResponse = ListLegalTagsWithHttpInfo(oSDUAccountId, valid, oSDUOnBehalfOf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all LegalTags. This allows for the retrieval of all LegalTags.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDtos</returns>
        public ApiResponse< LegalTagDtos > ListLegalTagsWithHttpInfo (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->ListLegalTags");

            var localVarPath = "/legal/v1/legaltags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLegalTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDtos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDtos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDtos)));
        }

        /// <summary>
        /// Gets all LegalTags. This allows for the retrieval of all LegalTags.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDtos</returns>
        public async System.Threading.Tasks.Task<LegalTagDtos> ListLegalTagsAsync (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDtos> localVarResponse = await ListLegalTagsAsyncWithHttpInfo(oSDUAccountId, valid, oSDUOnBehalfOf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all LegalTags. This allows for the retrieval of all LegalTags.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="valid">If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDtos)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalTagDtos>> ListLegalTagsAsyncWithHttpInfo (string oSDUAccountId, bool? valid = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->ListLegalTags");

            var localVarPath = "/legal/v1/legaltags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLegalTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDtos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDtos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDtos)));
        }

        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;. This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagDto</returns>
        public LegalTagDto UpdateLegalTag (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDto> localVarResponse = UpdateLegalTagWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;. This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagDto</returns>
        public ApiResponse< LegalTagDto > UpdateLegalTagWithHttpInfo (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->UpdateLegalTag");

            var localVarPath = "/legal/v1/legaltags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDto)));
        }

        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;. This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagDto</returns>
        public async System.Threading.Tasks.Task<LegalTagDto> UpdateLegalTagAsync (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagDto> localVarResponse = await UpdateLegalTagAsyncWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the LegalTag for the given &#39;name&#39;. This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalTagDto>> UpdateLegalTagAsyncWithHttpInfo (string oSDUAccountId, LegalTagUpdateDto body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->UpdateLegalTag");

            var localVarPath = "/legal/v1/legaltags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLegalTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagDto)));
        }

        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names. This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>LegalTagInvalidResponseList</returns>
        public LegalTagInvalidResponseList ValidateLegalTags (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagInvalidResponseList> localVarResponse = ValidateLegalTagsWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names. This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>ApiResponse of LegalTagInvalidResponseList</returns>
        public ApiResponse< LegalTagInvalidResponseList > ValidateLegalTagsWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->ValidateLegalTags");

            var localVarPath = "/legal/v1/legaltags:validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateLegalTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagInvalidResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagInvalidResponseList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagInvalidResponseList)));
        }

        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names. This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of LegalTagInvalidResponseList</returns>
        public async System.Threading.Tasks.Task<LegalTagInvalidResponseList> ValidateLegalTagsAsync (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
             ApiResponse<LegalTagInvalidResponseList> localVarResponse = await ValidateLegalTagsAsyncWithHttpInfo(oSDUAccountId, body, oSDUOnBehalfOf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the invalid LegalTag names with reasons for the given names. This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oSDUAccountId">Users account e.g. OSDU</param>
        /// <param name="body"> (optional)</param>
        /// <param name="oSDUOnBehalfOf">User&#39;s email or auth token (optional)</param>
        /// <returns>Task of ApiResponse (LegalTagInvalidResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalTagInvalidResponseList>> ValidateLegalTagsAsyncWithHttpInfo (string oSDUAccountId, LegalTagRequest body = null, string oSDUOnBehalfOf = null)
        {
            // verify the required parameter 'oSDUAccountId' is set
            if (oSDUAccountId == null)
                throw new ApiException(400, "Missing required parameter 'oSDUAccountId' when calling LegalApi->ValidateLegalTags");

            var localVarPath = "/legal/v1/legaltags:validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oSDUAccountId != null) localVarHeaderParams.Add("OSDU-Account-Id", this.Configuration.ApiClient.ParameterToString(oSDUAccountId)); // header parameter
            if (oSDUOnBehalfOf != null) localVarHeaderParams.Add("OSDU-On-Behalf-Of", this.Configuration.ApiClient.ParameterToString(oSDUOnBehalfOf)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateLegalTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalTagInvalidResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalTagInvalidResponseList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalTagInvalidResponseList)));
        }

    }
}
