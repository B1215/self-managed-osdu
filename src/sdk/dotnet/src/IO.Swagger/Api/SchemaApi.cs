/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a schema to the schema repository.
        /// </summary>
        /// <remarks>
        /// Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>SchemaInfo</returns>
        SchemaInfo CreateSchema (string dataPartitionId, SchemaRequest body);

        /// <summary>
        /// Adds a schema to the schema repository.
        /// </summary>
        /// <remarks>
        /// Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SchemaInfo</returns>
        ApiResponse<SchemaInfo> CreateSchemaWithHttpInfo (string dataPartitionId, SchemaRequest body);
        /// <summary>
        /// Gets schema from the schema repository.
        /// </summary>
        /// <remarks>
        /// Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>Object</returns>
        Object GetSchema (string dataPartitionId, string id);

        /// <summary>
        /// Gets schema from the schema repository.
        /// </summary>
        /// <remarks>
        /// Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSchemaWithHttpInfo (string dataPartitionId, string id);
        /// <summary>
        /// Searches schemaInfo repository
        /// </summary>
        /// <remarks>
        /// Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>SchemaInfoResponse</returns>
        SchemaInfoResponse SearchSchemaInfoRepository (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Searches schemaInfo repository
        /// </summary>
        /// <remarks>
        /// Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>ApiResponse of SchemaInfoResponse</returns>
        ApiResponse<SchemaInfoResponse> SearchSchemaInfoRepositoryWithHttpInfo (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Creates/Updates a schema in development status
        /// </summary>
        /// <remarks>
        /// Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>SchemaInfo</returns>
        SchemaInfo UpdateSchema (string dataPartitionId, SchemaRequest body);

        /// <summary>
        /// Creates/Updates a schema in development status
        /// </summary>
        /// <remarks>
        /// Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>ApiResponse of SchemaInfo</returns>
        ApiResponse<SchemaInfo> UpdateSchemaWithHttpInfo (string dataPartitionId, SchemaRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a schema to the schema repository.
        /// </summary>
        /// <remarks>
        /// Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>Task of SchemaInfo</returns>
        System.Threading.Tasks.Task<SchemaInfo> CreateSchemaAsync (string dataPartitionId, SchemaRequest body);

        /// <summary>
        /// Adds a schema to the schema repository.
        /// </summary>
        /// <remarks>
        /// Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SchemaInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaInfo>> CreateSchemaAsyncWithHttpInfo (string dataPartitionId, SchemaRequest body);
        /// <summary>
        /// Gets schema from the schema repository.
        /// </summary>
        /// <remarks>
        /// Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSchemaAsync (string dataPartitionId, string id);

        /// <summary>
        /// Gets schema from the schema repository.
        /// </summary>
        /// <remarks>
        /// Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSchemaAsyncWithHttpInfo (string dataPartitionId, string id);
        /// <summary>
        /// Searches schemaInfo repository
        /// </summary>
        /// <remarks>
        /// Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>Task of SchemaInfoResponse</returns>
        System.Threading.Tasks.Task<SchemaInfoResponse> SearchSchemaInfoRepositoryAsync (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Searches schemaInfo repository
        /// </summary>
        /// <remarks>
        /// Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>Task of ApiResponse (SchemaInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaInfoResponse>> SearchSchemaInfoRepositoryAsyncWithHttpInfo (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Creates/Updates a schema in development status
        /// </summary>
        /// <remarks>
        /// Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>Task of SchemaInfo</returns>
        System.Threading.Tasks.Task<SchemaInfo> UpdateSchemaAsync (string dataPartitionId, SchemaRequest body);

        /// <summary>
        /// Creates/Updates a schema in development status
        /// </summary>
        /// <remarks>
        /// Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>Task of ApiResponse (SchemaInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaInfo>> UpdateSchemaAsyncWithHttpInfo (string dataPartitionId, SchemaRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemaApi : ISchemaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemaApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a schema to the schema repository. Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>SchemaInfo</returns>
        public SchemaInfo CreateSchema (string dataPartitionId, SchemaRequest body)
        {
             ApiResponse<SchemaInfo> localVarResponse = CreateSchemaWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a schema to the schema repository. Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SchemaInfo</returns>
        public ApiResponse< SchemaInfo > CreateSchemaWithHttpInfo (string dataPartitionId, SchemaRequest body)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->CreateSchema");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemaApi->CreateSchema");

            var localVarPath = "/api/schema-service/v1/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaInfo)));
        }

        /// <summary>
        /// Adds a schema to the schema repository. Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>Task of SchemaInfo</returns>
        public async System.Threading.Tasks.Task<SchemaInfo> CreateSchemaAsync (string dataPartitionId, SchemaRequest body)
        {
             ApiResponse<SchemaInfo> localVarResponse = await CreateSchemaAsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a schema to the schema repository. Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SchemaInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchemaInfo>> CreateSchemaAsyncWithHttpInfo (string dataPartitionId, SchemaRequest body)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->CreateSchema");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemaApi->CreateSchema");

            var localVarPath = "/api/schema-service/v1/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaInfo)));
        }

        /// <summary>
        /// Gets schema from the schema repository. Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>Object</returns>
        public Object GetSchema (string dataPartitionId, string id)
        {
             ApiResponse<Object> localVarResponse = GetSchemaWithHttpInfo(dataPartitionId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets schema from the schema repository. Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetSchemaWithHttpInfo (string dataPartitionId, string id)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->GetSchema");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchemaApi->GetSchema");

            var localVarPath = "/api/schema-service/v1/schema/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets schema from the schema repository. Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSchemaAsync (string dataPartitionId, string id)
        {
             ApiResponse<Object> localVarResponse = await GetSchemaAsyncWithHttpInfo(dataPartitionId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets schema from the schema repository. Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">the system id of the schema</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSchemaAsyncWithHttpInfo (string dataPartitionId, string id)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->GetSchema");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchemaApi->GetSchema");

            var localVarPath = "/api/schema-service/v1/schema/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Searches schemaInfo repository Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>SchemaInfoResponse</returns>
        public SchemaInfoResponse SearchSchemaInfoRepository (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null)
        {
             ApiResponse<SchemaInfoResponse> localVarResponse = SearchSchemaInfoRepositoryWithHttpInfo(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches schemaInfo repository Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>ApiResponse of SchemaInfoResponse</returns>
        public ApiResponse< SchemaInfoResponse > SearchSchemaInfoRepositoryWithHttpInfo (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->SearchSchemaInfoRepository");

            var localVarPath = "/api/schema-service/v1/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authority", authority)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (entityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityType", entityType)); // query parameter
            if (schemaVersionMajor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaVersionMajor", schemaVersionMajor)); // query parameter
            if (schemaVersionMinor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaVersionMinor", schemaVersionMinor)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSchemaInfoRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaInfoResponse)));
        }

        /// <summary>
        /// Searches schemaInfo repository Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>Task of SchemaInfoResponse</returns>
        public async System.Threading.Tasks.Task<SchemaInfoResponse> SearchSchemaInfoRepositoryAsync (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null)
        {
             ApiResponse<SchemaInfoResponse> localVarResponse = await SearchSchemaInfoRepositoryAsyncWithHttpInfo(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches schemaInfo repository Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="authority">pass an optional string to search for a specific authority (optional, default to *)</param>
        /// <param name="source">pass an optional string to search for a specific source (optional, default to *)</param>
        /// <param name="entityType">pass an optional string to search for a specific entityType (optional, default to *)</param>
        /// <param name="schemaVersionMajor">pass an optional string to search for a specific schemaVersionMajor (optional, default to *)</param>
        /// <param name="schemaVersionMinor">pass an optional string to search for a specific schemaVersionMinor (optional, default to *)</param>
        /// <param name="status">The schema status specification (optional, default to PUBLISHED)</param>
        /// <param name="scope">The scope or schema visibility specification (optional, default to INTERNAL)</param>
        /// <param name="latestVersion">if True, only return the latest version (optional, default to false)</param>
        /// <param name="limit">maximum number of schema records to return (optional)</param>
        /// <param name="offset">number of records to skip for pagination (optional)</param>
        /// <returns>Task of ApiResponse (SchemaInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchemaInfoResponse>> SearchSchemaInfoRepositoryAsyncWithHttpInfo (string dataPartitionId, string authority = null, string source = null, string entityType = null, string schemaVersionMajor = null, string schemaVersionMinor = null, string status = null, string scope = null, bool? latestVersion = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->SearchSchemaInfoRepository");

            var localVarPath = "/api/schema-service/v1/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authority", authority)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (entityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityType", entityType)); // query parameter
            if (schemaVersionMajor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaVersionMajor", schemaVersionMajor)); // query parameter
            if (schemaVersionMinor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaVersionMinor", schemaVersionMinor)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSchemaInfoRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaInfoResponse)));
        }

        /// <summary>
        /// Creates/Updates a schema in development status Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>SchemaInfo</returns>
        public SchemaInfo UpdateSchema (string dataPartitionId, SchemaRequest body)
        {
             ApiResponse<SchemaInfo> localVarResponse = UpdateSchemaWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates/Updates a schema in development status Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>ApiResponse of SchemaInfo</returns>
        public ApiResponse< SchemaInfo > UpdateSchemaWithHttpInfo (string dataPartitionId, SchemaRequest body)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->UpdateSchema");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemaApi->UpdateSchema");

            var localVarPath = "/api/schema-service/v1/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaInfo)));
        }

        /// <summary>
        /// Creates/Updates a schema in development status Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>Task of SchemaInfo</returns>
        public async System.Threading.Tasks.Task<SchemaInfo> UpdateSchemaAsync (string dataPartitionId, SchemaRequest body)
        {
             ApiResponse<SchemaInfo> localVarResponse = await UpdateSchemaAsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates/Updates a schema in development status Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">SchemaRequest</param>
        /// <returns>Task of ApiResponse (SchemaInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchemaInfo>> UpdateSchemaAsyncWithHttpInfo (string dataPartitionId, SchemaRequest body)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling SchemaApi->UpdateSchema");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemaApi->UpdateSchema");

            var localVarPath = "/api/schema-service/v1/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaInfo)));
        }

    }
}
