/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id
        /// </summary>
        /// <remarks>
        /// Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns></returns>
        void DeletesMetadataRecordFileForTheGivenId (string dataPartitionId, string id);

        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id
        /// </summary>
        /// <remarks>
        /// Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletesMetadataRecordFileForTheGivenIdWithHttpInfo (string dataPartitionId, string id);
        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileLandingZoneLocationResponse</returns>
        FileLandingZoneLocationResponse GetALocationInLandingZoneToUploadAFile_ (string dataPartitionId, FileLocationRequest body = null);

        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileLandingZoneLocationResponse</returns>
        ApiResponse<FileLandingZoneLocationResponse> GetALocationInLandingZoneToUploadAFile_WithHttpInfo (string dataPartitionId, FileLocationRequest body = null);
        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>FileSourceLocationResponse</returns>
        FileSourceLocationResponse GetTheLocationToUploadAFile (string dataPartitionId);

        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>ApiResponse of FileSourceLocationResponse</returns>
        ApiResponse<FileSourceLocationResponse> GetTheLocationToUploadAFileWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Gets metadata record for the given id
        /// </summary>
        /// <remarks>
        /// Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>FileRecordVersion</returns>
        FileRecordVersion GetsMetadataRecordForTheGivenId (string dataPartitionId, string id);

        /// <summary>
        /// Gets metadata record for the given id
        /// </summary>
        /// <remarks>
        /// Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>ApiResponse of FileRecordVersion</returns>
        ApiResponse<FileRecordVersion> GetsMetadataRecordForTheGivenIdWithHttpInfo (string dataPartitionId, string id);
        /// <summary>
        /// Gets a URL to download the file
        /// </summary>
        /// <remarks>
        /// Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>FileDownloadResponse</returns>
        FileDownloadResponse GetsURLToDownloadTheFileAssociatedWithTheGivenId_ (string dataPartitionId, string id, string expiryTime = null);

        /// <summary>
        /// Gets a URL to download the file
        /// </summary>
        /// <remarks>
        /// Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>ApiResponse of FileDownloadResponse</returns>
        ApiResponse<FileDownloadResponse> GetsURLToDownloadTheFileAssociatedWithTheGivenId_WithHttpInfo (string dataPartitionId, string id, string expiryTime = null);
        /// <summary>
        /// Creates metadata for a file
        /// </summary>
        /// <remarks>
        /// This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>FileMetadataResponse</returns>
        FileMetadataResponse PublishFileMetadataForAFile_ (string dataPartitionId, FileRecord body = null);

        /// <summary>
        /// Creates metadata for a file
        /// </summary>
        /// <remarks>
        /// This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>ApiResponse of FileMetadataResponse</returns>
        ApiResponse<FileMetadataResponse> PublishFileMetadataForAFile_WithHttpInfo (string dataPartitionId, FileRecord body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id
        /// </summary>
        /// <remarks>
        /// Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletesMetadataRecordFileForTheGivenIdAsync (string dataPartitionId, string id);

        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id
        /// </summary>
        /// <remarks>
        /// Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletesMetadataRecordFileForTheGivenIdAsyncWithHttpInfo (string dataPartitionId, string id);
        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FileLandingZoneLocationResponse</returns>
        System.Threading.Tasks.Task<FileLandingZoneLocationResponse> GetALocationInLandingZoneToUploadAFile_Async (string dataPartitionId, FileLocationRequest body = null);

        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FileLandingZoneLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileLandingZoneLocationResponse>> GetALocationInLandingZoneToUploadAFile_AsyncWithHttpInfo (string dataPartitionId, FileLocationRequest body = null);
        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>Task of FileSourceLocationResponse</returns>
        System.Threading.Tasks.Task<FileSourceLocationResponse> GetTheLocationToUploadAFileAsync (string dataPartitionId);

        /// <summary>
        /// Get a location in Landing Zone to upload a file.
        /// </summary>
        /// <remarks>
        /// Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>Task of ApiResponse (FileSourceLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileSourceLocationResponse>> GetTheLocationToUploadAFileAsyncWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Gets metadata record for the given id
        /// </summary>
        /// <remarks>
        /// Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of FileRecordVersion</returns>
        System.Threading.Tasks.Task<FileRecordVersion> GetsMetadataRecordForTheGivenIdAsync (string dataPartitionId, string id);

        /// <summary>
        /// Gets metadata record for the given id
        /// </summary>
        /// <remarks>
        /// Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of ApiResponse (FileRecordVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileRecordVersion>> GetsMetadataRecordForTheGivenIdAsyncWithHttpInfo (string dataPartitionId, string id);
        /// <summary>
        /// Gets a URL to download the file
        /// </summary>
        /// <remarks>
        /// Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>Task of FileDownloadResponse</returns>
        System.Threading.Tasks.Task<FileDownloadResponse> GetsURLToDownloadTheFileAssociatedWithTheGivenId_Async (string dataPartitionId, string id, string expiryTime = null);

        /// <summary>
        /// Gets a URL to download the file
        /// </summary>
        /// <remarks>
        /// Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>Task of ApiResponse (FileDownloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDownloadResponse>> GetsURLToDownloadTheFileAssociatedWithTheGivenId_AsyncWithHttpInfo (string dataPartitionId, string id, string expiryTime = null);
        /// <summary>
        /// Creates metadata for a file
        /// </summary>
        /// <remarks>
        /// This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>Task of FileMetadataResponse</returns>
        System.Threading.Tasks.Task<FileMetadataResponse> PublishFileMetadataForAFile_Async (string dataPartitionId, FileRecord body = null);

        /// <summary>
        /// Creates metadata for a file
        /// </summary>
        /// <remarks>
        /// This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>Task of ApiResponse (FileMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileMetadataResponse>> PublishFileMetadataForAFile_AsyncWithHttpInfo (string dataPartitionId, FileRecord body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FileServiceApi : IFileServiceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileServiceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FileServiceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns></returns>
        public void DeletesMetadataRecordFileForTheGivenId (string dataPartitionId, string id)
        {
             DeletesMetadataRecordFileForTheGivenIdWithHttpInfo(dataPartitionId, id);
        }

        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletesMetadataRecordFileForTheGivenIdWithHttpInfo (string dataPartitionId, string id)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->DeletesMetadataRecordFileForTheGivenId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FileServiceApi->DeletesMetadataRecordFileForTheGivenId");

            var localVarPath = "/api/file/v2/files/{Id}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletesMetadataRecordFileForTheGivenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletesMetadataRecordFileForTheGivenIdAsync (string dataPartitionId, string id)
        {
             await DeletesMetadataRecordFileForTheGivenIdAsyncWithHttpInfo(dataPartitionId, id);

        }

        /// <summary>
        /// Deletes metadata record &amp; file assocaited with that record for the given id Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletesMetadataRecordFileForTheGivenIdAsyncWithHttpInfo (string dataPartitionId, string id)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->DeletesMetadataRecordFileForTheGivenId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FileServiceApi->DeletesMetadataRecordFileForTheGivenId");

            var localVarPath = "/api/file/v2/files/{Id}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletesMetadataRecordFileForTheGivenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FileLandingZoneLocationResponse</returns>
        public FileLandingZoneLocationResponse GetALocationInLandingZoneToUploadAFile_ (string dataPartitionId, FileLocationRequest body = null)
        {
             ApiResponse<FileLandingZoneLocationResponse> localVarResponse = GetALocationInLandingZoneToUploadAFile_WithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FileLandingZoneLocationResponse</returns>
        public ApiResponse< FileLandingZoneLocationResponse > GetALocationInLandingZoneToUploadAFile_WithHttpInfo (string dataPartitionId, FileLocationRequest body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetALocationInLandingZoneToUploadAFile_");

            var localVarPath = "/api/file/v2/getLocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetALocationInLandingZoneToUploadAFile_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileLandingZoneLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileLandingZoneLocationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileLandingZoneLocationResponse)));
        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FileLandingZoneLocationResponse</returns>
        public async System.Threading.Tasks.Task<FileLandingZoneLocationResponse> GetALocationInLandingZoneToUploadAFile_Async (string dataPartitionId, FileLocationRequest body = null)
        {
             ApiResponse<FileLandingZoneLocationResponse> localVarResponse = await GetALocationInLandingZoneToUploadAFile_AsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FileLandingZoneLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileLandingZoneLocationResponse>> GetALocationInLandingZoneToUploadAFile_AsyncWithHttpInfo (string dataPartitionId, FileLocationRequest body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetALocationInLandingZoneToUploadAFile_");

            var localVarPath = "/api/file/v2/getLocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetALocationInLandingZoneToUploadAFile_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileLandingZoneLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileLandingZoneLocationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileLandingZoneLocationResponse)));
        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>FileSourceLocationResponse</returns>
        public FileSourceLocationResponse GetTheLocationToUploadAFile (string dataPartitionId)
        {
             ApiResponse<FileSourceLocationResponse> localVarResponse = GetTheLocationToUploadAFileWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>ApiResponse of FileSourceLocationResponse</returns>
        public ApiResponse< FileSourceLocationResponse > GetTheLocationToUploadAFileWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetTheLocationToUploadAFile");

            var localVarPath = "/api/file/v2/files/UploadURL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTheLocationToUploadAFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileSourceLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileSourceLocationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileSourceLocationResponse)));
        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>Task of FileSourceLocationResponse</returns>
        public async System.Threading.Tasks.Task<FileSourceLocationResponse> GetTheLocationToUploadAFileAsync (string dataPartitionId)
        {
             ApiResponse<FileSourceLocationResponse> localVarResponse = await GetTheLocationToUploadAFileAsyncWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a location in Landing Zone to upload a file. Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <returns>Task of ApiResponse (FileSourceLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileSourceLocationResponse>> GetTheLocationToUploadAFileAsyncWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetTheLocationToUploadAFile");

            var localVarPath = "/api/file/v2/files/UploadURL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTheLocationToUploadAFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileSourceLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileSourceLocationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileSourceLocationResponse)));
        }

        /// <summary>
        /// Gets metadata record for the given id Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>FileRecordVersion</returns>
        public FileRecordVersion GetsMetadataRecordForTheGivenId (string dataPartitionId, string id)
        {
             ApiResponse<FileRecordVersion> localVarResponse = GetsMetadataRecordForTheGivenIdWithHttpInfo(dataPartitionId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets metadata record for the given id Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>ApiResponse of FileRecordVersion</returns>
        public ApiResponse< FileRecordVersion > GetsMetadataRecordForTheGivenIdWithHttpInfo (string dataPartitionId, string id)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetsMetadataRecordForTheGivenId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FileServiceApi->GetsMetadataRecordForTheGivenId");

            var localVarPath = "/api/file/v2/files/{Id}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetsMetadataRecordForTheGivenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileRecordVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileRecordVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileRecordVersion)));
        }

        /// <summary>
        /// Gets metadata record for the given id Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of FileRecordVersion</returns>
        public async System.Threading.Tasks.Task<FileRecordVersion> GetsMetadataRecordForTheGivenIdAsync (string dataPartitionId, string id)
        {
             ApiResponse<FileRecordVersion> localVarResponse = await GetsMetadataRecordForTheGivenIdAsyncWithHttpInfo(dataPartitionId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets metadata record for the given id Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File metadata record Id.</param>
        /// <returns>Task of ApiResponse (FileRecordVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileRecordVersion>> GetsMetadataRecordForTheGivenIdAsyncWithHttpInfo (string dataPartitionId, string id)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetsMetadataRecordForTheGivenId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FileServiceApi->GetsMetadataRecordForTheGivenId");

            var localVarPath = "/api/file/v2/files/{Id}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetsMetadataRecordForTheGivenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileRecordVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileRecordVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileRecordVersion)));
        }

        /// <summary>
        /// Gets a URL to download the file Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>FileDownloadResponse</returns>
        public FileDownloadResponse GetsURLToDownloadTheFileAssociatedWithTheGivenId_ (string dataPartitionId, string id, string expiryTime = null)
        {
             ApiResponse<FileDownloadResponse> localVarResponse = GetsURLToDownloadTheFileAssociatedWithTheGivenId_WithHttpInfo(dataPartitionId, id, expiryTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a URL to download the file Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>ApiResponse of FileDownloadResponse</returns>
        public ApiResponse< FileDownloadResponse > GetsURLToDownloadTheFileAssociatedWithTheGivenId_WithHttpInfo (string dataPartitionId, string id, string expiryTime = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetsURLToDownloadTheFileAssociatedWithTheGivenId_");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FileServiceApi->GetsURLToDownloadTheFileAssociatedWithTheGivenId_");

            var localVarPath = "/api/file/v2/files/{Id}/DownloadURL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expiryTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiryTime", expiryTime)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetsURLToDownloadTheFileAssociatedWithTheGivenId_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDownloadResponse)));
        }

        /// <summary>
        /// Gets a URL to download the file Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>Task of FileDownloadResponse</returns>
        public async System.Threading.Tasks.Task<FileDownloadResponse> GetsURLToDownloadTheFileAssociatedWithTheGivenId_Async (string dataPartitionId, string id, string expiryTime = null)
        {
             ApiResponse<FileDownloadResponse> localVarResponse = await GetsURLToDownloadTheFileAssociatedWithTheGivenId_AsyncWithHttpInfo(dataPartitionId, id, expiryTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a URL to download the file Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="id">File Metadata record Id.</param>
        /// <param name="expiryTime">The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)</param>
        /// <returns>Task of ApiResponse (FileDownloadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDownloadResponse>> GetsURLToDownloadTheFileAssociatedWithTheGivenId_AsyncWithHttpInfo (string dataPartitionId, string id, string expiryTime = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->GetsURLToDownloadTheFileAssociatedWithTheGivenId_");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FileServiceApi->GetsURLToDownloadTheFileAssociatedWithTheGivenId_");

            var localVarPath = "/api/file/v2/files/{Id}/DownloadURL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expiryTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiryTime", expiryTime)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetsURLToDownloadTheFileAssociatedWithTheGivenId_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDownloadResponse)));
        }

        /// <summary>
        /// Creates metadata for a file This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>FileMetadataResponse</returns>
        public FileMetadataResponse PublishFileMetadataForAFile_ (string dataPartitionId, FileRecord body = null)
        {
             ApiResponse<FileMetadataResponse> localVarResponse = PublishFileMetadataForAFile_WithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates metadata for a file This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>ApiResponse of FileMetadataResponse</returns>
        public ApiResponse< FileMetadataResponse > PublishFileMetadataForAFile_WithHttpInfo (string dataPartitionId, FileRecord body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->PublishFileMetadataForAFile_");

            var localVarPath = "/api/file/v2/files/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishFileMetadataForAFile_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileMetadataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileMetadataResponse)));
        }

        /// <summary>
        /// Creates metadata for a file This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>Task of FileMetadataResponse</returns>
        public async System.Threading.Tasks.Task<FileMetadataResponse> PublishFileMetadataForAFile_Async (string dataPartitionId, FileRecord body = null)
        {
             ApiResponse<FileMetadataResponse> localVarResponse = await PublishFileMetadataForAFile_AsyncWithHttpInfo(dataPartitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates metadata for a file This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.</param>
        /// <param name="body">File metadata content (optional)</param>
        /// <returns>Task of ApiResponse (FileMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileMetadataResponse>> PublishFileMetadataForAFile_AsyncWithHttpInfo (string dataPartitionId, FileRecord body = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling FileServiceApi->PublishFileMetadataForAFile_");

            var localVarPath = "/api/file/v2/files/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishFileMetadataForAFile_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileMetadataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileMetadataResponse)));
        }

    }
}
