/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitlementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Member to Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>EntitlementMemberDto</returns>
        EntitlementMemberDto AddMemberUsingPOST (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo);

        /// <summary>
        /// Add Member to Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of EntitlementMemberDto</returns>
        ApiResponse<EntitlementMemberDto> AddMemberUsingPOSTWithHttpInfo (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo);
        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns></returns>
        void CreateGroupUsingPOST (string dataPartitionId);

        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateGroupUsingPOSTWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns></returns>
        void DeleteGroupUsingDELETE (string dataPartitionId, string groupEmail);

        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupUsingDELETEWithHttpInfo (string dataPartitionId, string groupEmail);
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns></returns>
        void DeleteMemberUsingDELETE (string dataPartitionId, string memberEmail);

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMemberUsingDELETEWithHttpInfo (string dataPartitionId, string memberEmail);
        /// <summary>
        /// Remove Member from Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>string</returns>
        string DeleteMemberUsingDELETE1 (string dataPartitionId, string groupEmail, string memberEmail);

        /// <summary>
        /// Remove Member from Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteMemberUsingDELETE1WithHttpInfo (string dataPartitionId, string groupEmail, string memberEmail);
        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns></returns>
        void ListGroupMembersUsingGET (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null);

        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListGroupMembersUsingGETWithHttpInfo (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null);
        /// <summary>
        /// List Assigned Groups for User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns></returns>
        void ListGroupsOnBehalfOfUsingGET (string dataPartitionId, string memberEmail, string type = null, string appid = null);

        /// <summary>
        /// List Assigned Groups for User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListGroupsOnBehalfOfUsingGETWithHttpInfo (string dataPartitionId, string memberEmail, string type = null, string appid = null);
        /// <summary>
        /// List Assigned Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>EntitlementGroupResponse</returns>
        EntitlementGroupResponse ListGroupsUsingGET (string dataPartitionId);

        /// <summary>
        /// List Assigned Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>ApiResponse of EntitlementGroupResponse</returns>
        ApiResponse<EntitlementGroupResponse> ListGroupsUsingGETWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Updates Items in Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns></returns>
        void UpdateGroupUsingPATCH (string dataPartitionId, string groupEmail);

        /// <summary>
        /// Updates Items in Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupUsingPATCHWithHttpInfo (string dataPartitionId, string groupEmail);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Member to Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of EntitlementMemberDto</returns>
        System.Threading.Tasks.Task<EntitlementMemberDto> AddMemberUsingPOSTAsync (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo);

        /// <summary>
        /// Add Member to Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse (EntitlementMemberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementMemberDto>> AddMemberUsingPOSTAsyncWithHttpInfo (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo);
        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateGroupUsingPOSTAsync (string dataPartitionId);

        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateGroupUsingPOSTAsyncWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupUsingDELETEAsync (string dataPartitionId, string groupEmail);

        /// <summary>
        /// Delete a Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupUsingDELETEAsyncWithHttpInfo (string dataPartitionId, string groupEmail);
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMemberUsingDELETEAsync (string dataPartitionId, string memberEmail);

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemberUsingDELETEAsyncWithHttpInfo (string dataPartitionId, string memberEmail);
        /// <summary>
        /// Remove Member from Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteMemberUsingDELETE1Async (string dataPartitionId, string groupEmail, string memberEmail);

        /// <summary>
        /// Remove Member from Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteMemberUsingDELETE1AsyncWithHttpInfo (string dataPartitionId, string groupEmail, string memberEmail);
        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListGroupMembersUsingGETAsync (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null);

        /// <summary>
        /// List Group Members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListGroupMembersUsingGETAsyncWithHttpInfo (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null);
        /// <summary>
        /// List Assigned Groups for User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListGroupsOnBehalfOfUsingGETAsync (string dataPartitionId, string memberEmail, string type = null, string appid = null);

        /// <summary>
        /// List Assigned Groups for User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListGroupsOnBehalfOfUsingGETAsyncWithHttpInfo (string dataPartitionId, string memberEmail, string type = null, string appid = null);
        /// <summary>
        /// List Assigned Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>Task of EntitlementGroupResponse</returns>
        System.Threading.Tasks.Task<EntitlementGroupResponse> ListGroupsUsingGETAsync (string dataPartitionId);

        /// <summary>
        /// List Assigned Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>Task of ApiResponse (EntitlementGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementGroupResponse>> ListGroupsUsingGETAsyncWithHttpInfo (string dataPartitionId);
        /// <summary>
        /// Updates Items in Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupUsingPATCHAsync (string dataPartitionId, string groupEmail);

        /// <summary>
        /// Updates Items in Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupUsingPATCHAsyncWithHttpInfo (string dataPartitionId, string groupEmail);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntitlementApi : IEntitlementApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitlementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitlementApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitlementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntitlementApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Member to Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>EntitlementMemberDto</returns>
        public EntitlementMemberDto AddMemberUsingPOST (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo)
        {
             ApiResponse<EntitlementMemberDto> localVarResponse = AddMemberUsingPOSTWithHttpInfo(dataPartitionId, groupEmail, partitionInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Member to Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>ApiResponse of EntitlementMemberDto</returns>
        public ApiResponse< EntitlementMemberDto > AddMemberUsingPOSTWithHttpInfo (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->AddMemberUsingPOST");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->AddMemberUsingPOST");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling EntitlementApi->AddMemberUsingPOST");

            var localVarPath = "/entitlements/v2/groups/{group_email}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMemberUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementMemberDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementMemberDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementMemberDto)));
        }

        /// <summary>
        /// Add Member to Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of EntitlementMemberDto</returns>
        public async System.Threading.Tasks.Task<EntitlementMemberDto> AddMemberUsingPOSTAsync (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo)
        {
             ApiResponse<EntitlementMemberDto> localVarResponse = await AddMemberUsingPOSTAsyncWithHttpInfo(dataPartitionId, groupEmail, partitionInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Member to Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Name</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="partitionInfo">partitionInfo</param>
        /// <returns>Task of ApiResponse (EntitlementMemberDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitlementMemberDto>> AddMemberUsingPOSTAsyncWithHttpInfo (string dataPartitionId, string groupEmail, EntitlementMemberDto partitionInfo)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->AddMemberUsingPOST");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->AddMemberUsingPOST");
            // verify the required parameter 'partitionInfo' is set
            if (partitionInfo == null)
                throw new ApiException(400, "Missing required parameter 'partitionInfo' when calling EntitlementApi->AddMemberUsingPOST");

            var localVarPath = "/entitlements/v2/groups/{group_email}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter
            if (partitionInfo != null && partitionInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(partitionInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partitionInfo; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMemberUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementMemberDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementMemberDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementMemberDto)));
        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns></returns>
        public void CreateGroupUsingPOST (string dataPartitionId)
        {
             CreateGroupUsingPOSTWithHttpInfo(dataPartitionId);
        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateGroupUsingPOSTWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->CreateGroupUsingPOST");

            var localVarPath = "/entitlements/v2/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroupUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateGroupUsingPOSTAsync (string dataPartitionId)
        {
             await CreateGroupUsingPOSTAsyncWithHttpInfo(dataPartitionId);

        }

        /// <summary>
        /// Create a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Partition Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateGroupUsingPOSTAsyncWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->CreateGroupUsingPOST");

            var localVarPath = "/entitlements/v2/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroupUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns></returns>
        public void DeleteGroupUsingDELETE (string dataPartitionId, string groupEmail)
        {
             DeleteGroupUsingDELETEWithHttpInfo(dataPartitionId, groupEmail);
        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGroupUsingDELETEWithHttpInfo (string dataPartitionId, string groupEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->DeleteGroupUsingDELETE");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->DeleteGroupUsingDELETE");

            var localVarPath = "/entitlements/v2/groups/{group_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupUsingDELETEAsync (string dataPartitionId, string groupEmail)
        {
             await DeleteGroupUsingDELETEAsyncWithHttpInfo(dataPartitionId, groupEmail);

        }

        /// <summary>
        /// Delete a Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupUsingDELETEAsyncWithHttpInfo (string dataPartitionId, string groupEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->DeleteGroupUsingDELETE");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->DeleteGroupUsingDELETE");

            var localVarPath = "/entitlements/v2/groups/{group_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroupUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns></returns>
        public void DeleteMemberUsingDELETE (string dataPartitionId, string memberEmail)
        {
             DeleteMemberUsingDELETEWithHttpInfo(dataPartitionId, memberEmail);
        }

        /// <summary>
        /// Delete a User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMemberUsingDELETEWithHttpInfo (string dataPartitionId, string memberEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->DeleteMemberUsingDELETE");
            // verify the required parameter 'memberEmail' is set
            if (memberEmail == null)
                throw new ApiException(400, "Missing required parameter 'memberEmail' when calling EntitlementApi->DeleteMemberUsingDELETE");

            var localVarPath = "/entitlements/v2/members/{member_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberEmail != null) localVarPathParams.Add("member_email", this.Configuration.ApiClient.ParameterToString(memberEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMemberUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMemberUsingDELETEAsync (string dataPartitionId, string memberEmail)
        {
             await DeleteMemberUsingDELETEAsyncWithHttpInfo(dataPartitionId, memberEmail);

        }

        /// <summary>
        /// Delete a User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemberUsingDELETEAsyncWithHttpInfo (string dataPartitionId, string memberEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->DeleteMemberUsingDELETE");
            // verify the required parameter 'memberEmail' is set
            if (memberEmail == null)
                throw new ApiException(400, "Missing required parameter 'memberEmail' when calling EntitlementApi->DeleteMemberUsingDELETE");

            var localVarPath = "/entitlements/v2/members/{member_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberEmail != null) localVarPathParams.Add("member_email", this.Configuration.ApiClient.ParameterToString(memberEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMemberUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove Member from Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>string</returns>
        public string DeleteMemberUsingDELETE1 (string dataPartitionId, string groupEmail, string memberEmail)
        {
             ApiResponse<string> localVarResponse = DeleteMemberUsingDELETE1WithHttpInfo(dataPartitionId, groupEmail, memberEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Member from Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteMemberUsingDELETE1WithHttpInfo (string dataPartitionId, string groupEmail, string memberEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->DeleteMemberUsingDELETE1");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->DeleteMemberUsingDELETE1");
            // verify the required parameter 'memberEmail' is set
            if (memberEmail == null)
                throw new ApiException(400, "Missing required parameter 'memberEmail' when calling EntitlementApi->DeleteMemberUsingDELETE1");

            var localVarPath = "/entitlements/v2/groups/{group_email}/members/{member_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (memberEmail != null) localVarPathParams.Add("member_email", this.Configuration.ApiClient.ParameterToString(memberEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMemberUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Member from Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteMemberUsingDELETE1Async (string dataPartitionId, string groupEmail, string memberEmail)
        {
             ApiResponse<string> localVarResponse = await DeleteMemberUsingDELETE1AsyncWithHttpInfo(dataPartitionId, groupEmail, memberEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Member from Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="memberEmail">member_email</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteMemberUsingDELETE1AsyncWithHttpInfo (string dataPartitionId, string groupEmail, string memberEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->DeleteMemberUsingDELETE1");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->DeleteMemberUsingDELETE1");
            // verify the required parameter 'memberEmail' is set
            if (memberEmail == null)
                throw new ApiException(400, "Missing required parameter 'memberEmail' when calling EntitlementApi->DeleteMemberUsingDELETE1");

            var localVarPath = "/entitlements/v2/groups/{group_email}/members/{member_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (memberEmail != null) localVarPathParams.Add("member_email", this.Configuration.ApiClient.ParameterToString(memberEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMemberUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Group Members 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns></returns>
        public void ListGroupMembersUsingGET (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null)
        {
             ListGroupMembersUsingGETWithHttpInfo(dataPartitionId, groupEmail, role, includeType);
        }

        /// <summary>
        /// List Group Members 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListGroupMembersUsingGETWithHttpInfo (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->ListGroupMembersUsingGET");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->ListGroupMembersUsingGET");

            var localVarPath = "/entitlements/v2/groups/{group_email}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (includeType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeType", includeType)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupMembersUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Group Members 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListGroupMembersUsingGETAsync (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null)
        {
             await ListGroupMembersUsingGETAsyncWithHttpInfo(dataPartitionId, groupEmail, role, includeType);

        }

        /// <summary>
        /// List Group Members 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">Data Partition Id</param>
        /// <param name="groupEmail">group_email</param>
        /// <param name="role">role (optional)</param>
        /// <param name="includeType">includeType (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListGroupMembersUsingGETAsyncWithHttpInfo (string dataPartitionId, string groupEmail, string role = null, bool? includeType = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->ListGroupMembersUsingGET");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->ListGroupMembersUsingGET");

            var localVarPath = "/entitlements/v2/groups/{group_email}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (includeType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeType", includeType)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupMembersUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Assigned Groups for User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns></returns>
        public void ListGroupsOnBehalfOfUsingGET (string dataPartitionId, string memberEmail, string type = null, string appid = null)
        {
             ListGroupsOnBehalfOfUsingGETWithHttpInfo(dataPartitionId, memberEmail, type, appid);
        }

        /// <summary>
        /// List Assigned Groups for User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListGroupsOnBehalfOfUsingGETWithHttpInfo (string dataPartitionId, string memberEmail, string type = null, string appid = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->ListGroupsOnBehalfOfUsingGET");
            // verify the required parameter 'memberEmail' is set
            if (memberEmail == null)
                throw new ApiException(400, "Missing required parameter 'memberEmail' when calling EntitlementApi->ListGroupsOnBehalfOfUsingGET");

            var localVarPath = "/entitlements/v2/members/{member_email}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberEmail != null) localVarPathParams.Add("member_email", this.Configuration.ApiClient.ParameterToString(memberEmail)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (appid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appid", appid)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupsOnBehalfOfUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Assigned Groups for User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListGroupsOnBehalfOfUsingGETAsync (string dataPartitionId, string memberEmail, string type = null, string appid = null)
        {
             await ListGroupsOnBehalfOfUsingGETAsyncWithHttpInfo(dataPartitionId, memberEmail, type, appid);

        }

        /// <summary>
        /// List Assigned Groups for User 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="memberEmail">member_email</param>
        /// <param name="type">type (optional)</param>
        /// <param name="appid">appid (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListGroupsOnBehalfOfUsingGETAsyncWithHttpInfo (string dataPartitionId, string memberEmail, string type = null, string appid = null)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->ListGroupsOnBehalfOfUsingGET");
            // verify the required parameter 'memberEmail' is set
            if (memberEmail == null)
                throw new ApiException(400, "Missing required parameter 'memberEmail' when calling EntitlementApi->ListGroupsOnBehalfOfUsingGET");

            var localVarPath = "/entitlements/v2/members/{member_email}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberEmail != null) localVarPathParams.Add("member_email", this.Configuration.ApiClient.ParameterToString(memberEmail)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (appid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appid", appid)); // query parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupsOnBehalfOfUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Assigned Groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>EntitlementGroupResponse</returns>
        public EntitlementGroupResponse ListGroupsUsingGET (string dataPartitionId)
        {
             ApiResponse<EntitlementGroupResponse> localVarResponse = ListGroupsUsingGETWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Assigned Groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>ApiResponse of EntitlementGroupResponse</returns>
        public ApiResponse< EntitlementGroupResponse > ListGroupsUsingGETWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->ListGroupsUsingGET");

            var localVarPath = "/entitlements/v2/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementGroupResponse)));
        }

        /// <summary>
        /// List Assigned Groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>Task of EntitlementGroupResponse</returns>
        public async System.Threading.Tasks.Task<EntitlementGroupResponse> ListGroupsUsingGETAsync (string dataPartitionId)
        {
             ApiResponse<EntitlementGroupResponse> localVarResponse = await ListGroupsUsingGETAsyncWithHttpInfo(dataPartitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Assigned Groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <returns>Task of ApiResponse (EntitlementGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitlementGroupResponse>> ListGroupsUsingGETAsyncWithHttpInfo (string dataPartitionId)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->ListGroupsUsingGET");

            var localVarPath = "/entitlements/v2/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGroupsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementGroupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementGroupResponse)));
        }

        /// <summary>
        /// Updates Items in Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns></returns>
        public void UpdateGroupUsingPATCH (string dataPartitionId, string groupEmail)
        {
             UpdateGroupUsingPATCHWithHttpInfo(dataPartitionId, groupEmail);
        }

        /// <summary>
        /// Updates Items in Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGroupUsingPATCHWithHttpInfo (string dataPartitionId, string groupEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->UpdateGroupUsingPATCH");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->UpdateGroupUsingPATCH");

            var localVarPath = "/entitlements/v2/groups/{group_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates Items in Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupUsingPATCHAsync (string dataPartitionId, string groupEmail)
        {
             await UpdateGroupUsingPATCHAsyncWithHttpInfo(dataPartitionId, groupEmail);

        }

        /// <summary>
        /// Updates Items in Group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataPartitionId">tenant</param>
        /// <param name="groupEmail">group_email</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupUsingPATCHAsyncWithHttpInfo (string dataPartitionId, string groupEmail)
        {
            // verify the required parameter 'dataPartitionId' is set
            if (dataPartitionId == null)
                throw new ApiException(400, "Missing required parameter 'dataPartitionId' when calling EntitlementApi->UpdateGroupUsingPATCH");
            // verify the required parameter 'groupEmail' is set
            if (groupEmail == null)
                throw new ApiException(400, "Missing required parameter 'groupEmail' when calling EntitlementApi->UpdateGroupUsingPATCH");

            var localVarPath = "/entitlements/v2/groups/{group_email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupEmail != null) localVarPathParams.Add("group_email", this.Configuration.ApiClient.ParameterToString(groupEmail)); // path parameter
            if (dataPartitionId != null) localVarHeaderParams.Add("data-partition-id", this.Configuration.ApiClient.ParameterToString(dataPartitionId)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
