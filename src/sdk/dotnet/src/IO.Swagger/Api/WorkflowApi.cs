/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a workflow defintion.
        /// </summary>
        /// <remarks>
        /// Delete a workflow by it&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns></returns>
        void DeleteWorkflow (string workflowName);

        /// <summary>
        /// Delete a workflow defintion.
        /// </summary>
        /// <remarks>
        /// Delete a workflow by it&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkflowWithHttpInfo (string workflowName);
        /// <summary>
        /// Creates workflow definition with standard orchestrator operators.
        /// </summary>
        /// <remarks>
        /// API to create a new workflow using standard operators of orchestrator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>Workflow</returns>
        Workflow DeployWorkflow (Workflow body = null);

        /// <summary>
        /// Creates workflow definition with standard orchestrator operators.
        /// </summary>
        /// <remarks>
        /// API to create a new workflow using standard operators of orchestrator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> DeployWorkflowWithHttpInfo (Workflow body = null);
        /// <summary>
        /// Get all run instances of a workflow.
        /// </summary>
        /// <remarks>
        /// Get all run instances for a worflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>List&lt;WorkflowRun&gt;</returns>
        List<WorkflowRun> GetAllWorkflowRuns (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null);

        /// <summary>
        /// Get all run instances of a workflow.
        /// </summary>
        /// <remarks>
        /// Get all run instances for a worflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkflowRun&gt;</returns>
        ApiResponse<List<WorkflowRun>> GetAllWorkflowRunsWithHttpInfo (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null);
        /// <summary>
        /// Get details for a speciffic workflow run instance.
        /// </summary>
        /// <remarks>
        /// Get an execution instances for a workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>WorkflowRun</returns>
        WorkflowRun GetWorkflowRun (string workflowName, string runId);

        /// <summary>
        /// Get details for a speciffic workflow run instance.
        /// </summary>
        /// <remarks>
        /// Get an execution instances for a workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>ApiResponse of WorkflowRun</returns>
        ApiResponse<WorkflowRun> GetWorkflowRunWithHttpInfo (string workflowName, string runId);
        /// <summary>
        /// List all the workflow applicable for a tenant.
        /// </summary>
        /// <remarks>
        /// List all the workflows for the tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        List<Workflow> ListAllWorkflow (string prefix = null);

        /// <summary>
        /// List all the workflow applicable for a tenant.
        /// </summary>
        /// <remarks>
        /// List all the workflows for the tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>ApiResponse of List&lt;Workflow&gt;</returns>
        ApiResponse<List<Workflow>> ListAllWorkflowWithHttpInfo (string prefix = null);
        /// <summary>
        /// Trigger a workflow.
        /// </summary>
        /// <remarks>
        /// Trigger a workflow mentioned in payload.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WorkflowRun</returns>
        WorkflowRun TriggerWorkflow (string workflowName, WorkflowTriggerRequest body = null);

        /// <summary>
        /// Trigger a workflow.
        /// </summary>
        /// <remarks>
        /// Trigger a workflow mentioned in payload.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WorkflowRun</returns>
        ApiResponse<WorkflowRun> TriggerWorkflowWithHttpInfo (string workflowName, WorkflowTriggerRequest body = null);
        /// <summary>
        /// Update the workflow run instance.
        /// </summary>
        /// <remarks>
        /// Update workflow run.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Workflow</returns>
        Workflow UpdateWorkflowRun (string workflowName, string runId, WorkflowRun body = null);

        /// <summary>
        /// Update the workflow run instance.
        /// </summary>
        /// <remarks>
        /// Update workflow run.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> UpdateWorkflowRunWithHttpInfo (string workflowName, string runId, WorkflowRun body = null);
        /// <summary>
        /// Get complete details for a workflow.
        /// </summary>
        /// <remarks>
        /// Get complete details for an workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>Workflow</returns>
        Workflow ViewWorkflow (string workflowName);

        /// <summary>
        /// Get complete details for a workflow.
        /// </summary>
        /// <remarks>
        /// Get complete details for an workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> ViewWorkflowWithHttpInfo (string workflowName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a workflow defintion.
        /// </summary>
        /// <remarks>
        /// Delete a workflow by it&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkflowAsync (string workflowName);

        /// <summary>
        /// Delete a workflow defintion.
        /// </summary>
        /// <remarks>
        /// Delete a workflow by it&#39;s name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkflowAsyncWithHttpInfo (string workflowName);
        /// <summary>
        /// Creates workflow definition with standard orchestrator operators.
        /// </summary>
        /// <remarks>
        /// API to create a new workflow using standard operators of orchestrator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> DeployWorkflowAsync (Workflow body = null);

        /// <summary>
        /// Creates workflow definition with standard orchestrator operators.
        /// </summary>
        /// <remarks>
        /// API to create a new workflow using standard operators of orchestrator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> DeployWorkflowAsyncWithHttpInfo (Workflow body = null);
        /// <summary>
        /// Get all run instances of a workflow.
        /// </summary>
        /// <remarks>
        /// Get all run instances for a worflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>Task of List&lt;WorkflowRun&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowRun>> GetAllWorkflowRunsAsync (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null);

        /// <summary>
        /// Get all run instances of a workflow.
        /// </summary>
        /// <remarks>
        /// Get all run instances for a worflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowRun&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowRun>>> GetAllWorkflowRunsAsyncWithHttpInfo (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null);
        /// <summary>
        /// Get details for a speciffic workflow run instance.
        /// </summary>
        /// <remarks>
        /// Get an execution instances for a workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>Task of WorkflowRun</returns>
        System.Threading.Tasks.Task<WorkflowRun> GetWorkflowRunAsync (string workflowName, string runId);

        /// <summary>
        /// Get details for a speciffic workflow run instance.
        /// </summary>
        /// <remarks>
        /// Get an execution instances for a workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>Task of ApiResponse (WorkflowRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowRun>> GetWorkflowRunAsyncWithHttpInfo (string workflowName, string runId);
        /// <summary>
        /// List all the workflow applicable for a tenant.
        /// </summary>
        /// <remarks>
        /// List all the workflows for the tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>Task of List&lt;Workflow&gt;</returns>
        System.Threading.Tasks.Task<List<Workflow>> ListAllWorkflowAsync (string prefix = null);

        /// <summary>
        /// List all the workflow applicable for a tenant.
        /// </summary>
        /// <remarks>
        /// List all the workflows for the tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Workflow&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Workflow>>> ListAllWorkflowAsyncWithHttpInfo (string prefix = null);
        /// <summary>
        /// Trigger a workflow.
        /// </summary>
        /// <remarks>
        /// Trigger a workflow mentioned in payload.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WorkflowRun</returns>
        System.Threading.Tasks.Task<WorkflowRun> TriggerWorkflowAsync (string workflowName, WorkflowTriggerRequest body = null);

        /// <summary>
        /// Trigger a workflow.
        /// </summary>
        /// <remarks>
        /// Trigger a workflow mentioned in payload.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkflowRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowRun>> TriggerWorkflowAsyncWithHttpInfo (string workflowName, WorkflowTriggerRequest body = null);
        /// <summary>
        /// Update the workflow run instance.
        /// </summary>
        /// <remarks>
        /// Update workflow run.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> UpdateWorkflowRunAsync (string workflowName, string runId, WorkflowRun body = null);

        /// <summary>
        /// Update the workflow run instance.
        /// </summary>
        /// <remarks>
        /// Update workflow run.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> UpdateWorkflowRunAsyncWithHttpInfo (string workflowName, string runId, WorkflowRun body = null);
        /// <summary>
        /// Get complete details for a workflow.
        /// </summary>
        /// <remarks>
        /// Get complete details for an workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> ViewWorkflowAsync (string workflowName);

        /// <summary>
        /// Get complete details for a workflow.
        /// </summary>
        /// <remarks>
        /// Get complete details for an workflow.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> ViewWorkflowAsyncWithHttpInfo (string workflowName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowApi : IWorkflowApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a workflow defintion. Delete a workflow by it&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns></returns>
        public void DeleteWorkflow (string workflowName)
        {
             DeleteWorkflowWithHttpInfo(workflowName);
        }

        /// <summary>
        /// Delete a workflow defintion. Delete a workflow by it&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWorkflowWithHttpInfo (string workflowName)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->DeleteWorkflow");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a workflow defintion. Delete a workflow by it&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkflowAsync (string workflowName)
        {
             await DeleteWorkflowAsyncWithHttpInfo(workflowName);

        }

        /// <summary>
        /// Delete a workflow defintion. Delete a workflow by it&#39;s name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkflowAsyncWithHttpInfo (string workflowName)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->DeleteWorkflow");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates workflow definition with standard orchestrator operators. API to create a new workflow using standard operators of orchestrator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>Workflow</returns>
        public Workflow DeployWorkflow (Workflow body = null)
        {
             ApiResponse<Workflow> localVarResponse = DeployWorkflowWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates workflow definition with standard orchestrator operators. API to create a new workflow using standard operators of orchestrator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        public ApiResponse< Workflow > DeployWorkflowWithHttpInfo (Workflow body = null)
        {

            var localVarPath = "/api/workflow/v1/workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
        }

        /// <summary>
        /// Creates workflow definition with standard orchestrator operators. API to create a new workflow using standard operators of orchestrator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> DeployWorkflowAsync (Workflow body = null)
        {
             ApiResponse<Workflow> localVarResponse = await DeployWorkflowAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates workflow definition with standard orchestrator operators. API to create a new workflow using standard operators of orchestrator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request payload for deploying new workflow. (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workflow>> DeployWorkflowAsyncWithHttpInfo (Workflow body = null)
        {

            var localVarPath = "/api/workflow/v1/workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
        }

        /// <summary>
        /// Get all run instances of a workflow. Get all run instances for a worflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>List&lt;WorkflowRun&gt;</returns>
        public List<WorkflowRun> GetAllWorkflowRuns (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null)
        {
             ApiResponse<List<WorkflowRun>> localVarResponse = GetAllWorkflowRunsWithHttpInfo(workflowName, prefix, startDate, endDate, limit, cursor, partial, conf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all run instances of a workflow. Get all run instances for a worflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkflowRun&gt;</returns>
        public ApiResponse< List<WorkflowRun> > GetAllWorkflowRunsWithHttpInfo (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->GetAllWorkflowRuns");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (partial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partial", partial)); // query parameter
            if (conf != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conf", conf)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWorkflowRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowRun>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowRun>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowRun>)));
        }

        /// <summary>
        /// Get all run instances of a workflow. Get all run instances for a worflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>Task of List&lt;WorkflowRun&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowRun>> GetAllWorkflowRunsAsync (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null)
        {
             ApiResponse<List<WorkflowRun>> localVarResponse = await GetAllWorkflowRunsAsyncWithHttpInfo(workflowName, prefix, startDate, endDate, limit, cursor, partial, conf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all run instances of a workflow. Get all run instances for a worflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow for which the execution details has to be fetched.</param>
        /// <param name="prefix">A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)</param>
        /// <param name="startDate">The start date where this call should start creating workflow runs from (inclusive) (optional)</param>
        /// <param name="endDate">The end date where this call should stop creating workflow runs at (inclusive) (optional)</param>
        /// <param name="limit">The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)</param>
        /// <param name="cursor">Cursor for subsequent request. (optional)</param>
        /// <param name="partial">Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)</param>
        /// <param name="conf">JSON configuration added to the Workflow run conf attribute (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowRun&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkflowRun>>> GetAllWorkflowRunsAsyncWithHttpInfo (string workflowName, string prefix = null, string startDate = null, bool? endDate = null, int? limit = null, string cursor = null, bool? partial = null, string conf = null)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->GetAllWorkflowRuns");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (partial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partial", partial)); // query parameter
            if (conf != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conf", conf)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWorkflowRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkflowRun>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WorkflowRun>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkflowRun>)));
        }

        /// <summary>
        /// Get details for a speciffic workflow run instance. Get an execution instances for a workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>WorkflowRun</returns>
        public WorkflowRun GetWorkflowRun (string workflowName, string runId)
        {
             ApiResponse<WorkflowRun> localVarResponse = GetWorkflowRunWithHttpInfo(workflowName, runId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a speciffic workflow run instance. Get an execution instances for a workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>ApiResponse of WorkflowRun</returns>
        public ApiResponse< WorkflowRun > GetWorkflowRunWithHttpInfo (string workflowName, string runId)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->GetWorkflowRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling WorkflowApi->GetWorkflowRun");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (runId != null) localVarPathParams.Add("runId", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkflowRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowRun)));
        }

        /// <summary>
        /// Get details for a speciffic workflow run instance. Get an execution instances for a workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>Task of WorkflowRun</returns>
        public async System.Threading.Tasks.Task<WorkflowRun> GetWorkflowRunAsync (string workflowName, string runId)
        {
             ApiResponse<WorkflowRun> localVarResponse = await GetWorkflowRunAsyncWithHttpInfo(workflowName, runId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details for a speciffic workflow run instance. Get an execution instances for a workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <returns>Task of ApiResponse (WorkflowRun)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowRun>> GetWorkflowRunAsyncWithHttpInfo (string workflowName, string runId)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->GetWorkflowRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling WorkflowApi->GetWorkflowRun");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (runId != null) localVarPathParams.Add("runId", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkflowRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowRun)));
        }

        /// <summary>
        /// List all the workflow applicable for a tenant. List all the workflows for the tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        public List<Workflow> ListAllWorkflow (string prefix = null)
        {
             ApiResponse<List<Workflow>> localVarResponse = ListAllWorkflowWithHttpInfo(prefix);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all the workflow applicable for a tenant. List all the workflows for the tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>ApiResponse of List&lt;Workflow&gt;</returns>
        public ApiResponse< List<Workflow> > ListAllWorkflowWithHttpInfo (string prefix = null)
        {

            var localVarPath = "/api/workflow/v1/workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Workflow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Workflow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Workflow>)));
        }

        /// <summary>
        /// List all the workflow applicable for a tenant. List all the workflows for the tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>Task of List&lt;Workflow&gt;</returns>
        public async System.Threading.Tasks.Task<List<Workflow>> ListAllWorkflowAsync (string prefix = null)
        {
             ApiResponse<List<Workflow>> localVarResponse = await ListAllWorkflowAsyncWithHttpInfo(prefix);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all the workflow applicable for a tenant. List all the workflows for the tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prefix">Filter workflow names which start with  the full prefix specified. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Workflow&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Workflow>>> ListAllWorkflowAsyncWithHttpInfo (string prefix = null)
        {

            var localVarPath = "/api/workflow/v1/workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Workflow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Workflow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Workflow>)));
        }

        /// <summary>
        /// Trigger a workflow. Trigger a workflow mentioned in payload.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>WorkflowRun</returns>
        public WorkflowRun TriggerWorkflow (string workflowName, WorkflowTriggerRequest body = null)
        {
             ApiResponse<WorkflowRun> localVarResponse = TriggerWorkflowWithHttpInfo(workflowName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger a workflow. Trigger a workflow mentioned in payload.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of WorkflowRun</returns>
        public ApiResponse< WorkflowRun > TriggerWorkflowWithHttpInfo (string workflowName, WorkflowTriggerRequest body = null)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->TriggerWorkflow");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriggerWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkflowRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowRun)));
        }

        /// <summary>
        /// Trigger a workflow. Trigger a workflow mentioned in payload.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of WorkflowRun</returns>
        public async System.Threading.Tasks.Task<WorkflowRun> TriggerWorkflowAsync (string workflowName, WorkflowTriggerRequest body = null)
        {
             ApiResponse<WorkflowRun> localVarResponse = await TriggerWorkflowAsyncWithHttpInfo(workflowName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trigger a workflow. Trigger a workflow mentioned in payload.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of the Workflow to run.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkflowRun)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowRun>> TriggerWorkflowAsyncWithHttpInfo (string workflowName, WorkflowTriggerRequest body = null)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->TriggerWorkflow");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriggerWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkflowRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowRun)));
        }

        /// <summary>
        /// Update the workflow run instance. Update workflow run.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Workflow</returns>
        public Workflow UpdateWorkflowRun (string workflowName, string runId, WorkflowRun body = null)
        {
             ApiResponse<Workflow> localVarResponse = UpdateWorkflowRunWithHttpInfo(workflowName, runId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the workflow run instance. Update workflow run.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        public ApiResponse< Workflow > UpdateWorkflowRunWithHttpInfo (string workflowName, string runId, WorkflowRun body = null)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->UpdateWorkflowRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling WorkflowApi->UpdateWorkflowRun");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (runId != null) localVarPathParams.Add("runId", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkflowRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
        }

        /// <summary>
        /// Update the workflow run instance. Update workflow run.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> UpdateWorkflowRunAsync (string workflowName, string runId, WorkflowRun body = null)
        {
             ApiResponse<Workflow> localVarResponse = await UpdateWorkflowRunAsyncWithHttpInfo(workflowName, runId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the workflow run instance. Update workflow run.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Unique Name of Workflow.</param>
        /// <param name="runId">Run id for the worfkow.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workflow>> UpdateWorkflowRunAsyncWithHttpInfo (string workflowName, string runId, WorkflowRun body = null)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->UpdateWorkflowRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling WorkflowApi->UpdateWorkflowRun");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter
            if (runId != null) localVarPathParams.Add("runId", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkflowRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
        }

        /// <summary>
        /// Get complete details for a workflow. Get complete details for an workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>Workflow</returns>
        public Workflow ViewWorkflow (string workflowName)
        {
             ApiResponse<Workflow> localVarResponse = ViewWorkflowWithHttpInfo(workflowName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get complete details for a workflow. Get complete details for an workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>ApiResponse of Workflow</returns>
        public ApiResponse< Workflow > ViewWorkflowWithHttpInfo (string workflowName)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->ViewWorkflow");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
        }

        /// <summary>
        /// Get complete details for a workflow. Get complete details for an workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> ViewWorkflowAsync (string workflowName)
        {
             ApiResponse<Workflow> localVarResponse = await ViewWorkflowAsyncWithHttpInfo(workflowName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get complete details for a workflow. Get complete details for an workflow.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowName">Name of the Workflow.</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workflow>> ViewWorkflowAsyncWithHttpInfo (string workflowName)
        {
            // verify the required parameter 'workflowName' is set
            if (workflowName == null)
                throw new ApiException(400, "Missing required parameter 'workflowName' when calling WorkflowApi->ViewWorkflow");

            var localVarPath = "/api/workflow/v1/workflow/{workflow_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowName != null) localVarPathParams.Add("workflow_name", this.Configuration.ApiClient.ParameterToString(workflowName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
        }

    }
}
