/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RegisterSubscriptionCreateResult
    /// </summary>
    [DataContract]
    public partial class RegisterSubscriptionCreateResult :  IEquatable<RegisterSubscriptionCreateResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterSubscriptionCreateResult" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="topic">topic.</param>
        /// <param name="pushEndpoint">pushEndpoint.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="notificationId">notificationId.</param>
        /// <param name="createdOnEpoch">createdOnEpoch.</param>
        /// <param name="secret">secret.</param>
        public RegisterSubscriptionCreateResult(string id = default(string), string name = default(string), string description = default(string), string topic = default(string), string pushEndpoint = default(string), string createdBy = default(string), string notificationId = default(string), RegisterCreatedOnEpoch createdOnEpoch = default(RegisterCreatedOnEpoch), RegisterSecret secret = default(RegisterSecret))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Topic = topic;
            this.PushEndpoint = pushEndpoint;
            this.CreatedBy = createdBy;
            this.NotificationId = notificationId;
            this.CreatedOnEpoch = createdOnEpoch;
            this.Secret = secret;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name="topic", EmitDefaultValue=false)]
        public string Topic { get; set; }

        /// <summary>
        /// Gets or Sets PushEndpoint
        /// </summary>
        [DataMember(Name="pushEndpoint", EmitDefaultValue=false)]
        public string PushEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets NotificationId
        /// </summary>
        [DataMember(Name="notificationId", EmitDefaultValue=false)]
        public string NotificationId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOnEpoch
        /// </summary>
        [DataMember(Name="createdOnEpoch", EmitDefaultValue=false)]
        public RegisterCreatedOnEpoch CreatedOnEpoch { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public RegisterSecret Secret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterSubscriptionCreateResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  PushEndpoint: ").Append(PushEndpoint).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  CreatedOnEpoch: ").Append(CreatedOnEpoch).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterSubscriptionCreateResult);
        }

        /// <summary>
        /// Returns true if RegisterSubscriptionCreateResult instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterSubscriptionCreateResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterSubscriptionCreateResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) && 
                (
                    this.PushEndpoint == input.PushEndpoint ||
                    (this.PushEndpoint != null &&
                    this.PushEndpoint.Equals(input.PushEndpoint))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.NotificationId == input.NotificationId ||
                    (this.NotificationId != null &&
                    this.NotificationId.Equals(input.NotificationId))
                ) && 
                (
                    this.CreatedOnEpoch == input.CreatedOnEpoch ||
                    (this.CreatedOnEpoch != null &&
                    this.CreatedOnEpoch.Equals(input.CreatedOnEpoch))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Topic != null)
                    hashCode = hashCode * 59 + this.Topic.GetHashCode();
                if (this.PushEndpoint != null)
                    hashCode = hashCode * 59 + this.PushEndpoint.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.NotificationId != null)
                    hashCode = hashCode * 59 + this.NotificationId.GetHashCode();
                if (this.CreatedOnEpoch != null)
                    hashCode = hashCode * 59 + this.CreatedOnEpoch.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) pattern
            Regex regexName = new Regex(@"^[A-Za-z0-9- ]{2,50}", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[A-Za-z0-9. ]{0,255}", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            yield break;
        }
    }

}
