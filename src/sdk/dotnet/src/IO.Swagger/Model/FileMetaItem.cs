/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A meta data item, which allows the association of named properties or property values to a Unit/Measurement/CRS/Azimuth/Time context.
    /// </summary>
    [DataContract]
    public partial class FileMetaItem :  IEquatable<FileMetaItem>, IValidatableObject
    {
        /// <summary>
        /// The kind of reference, unit, measurement, CRS or azimuth reference.
        /// </summary>
        /// <value>The kind of reference, unit, measurement, CRS or azimuth reference.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            
            /// <summary>
            /// Enum CRS for value: CRS
            /// </summary>
            [EnumMember(Value = "CRS")]
            CRS = 1,
            
            /// <summary>
            /// Enum Unit for value: Unit
            /// </summary>
            [EnumMember(Value = "Unit")]
            Unit = 2,
            
            /// <summary>
            /// Enum Measurement for value: Measurement
            /// </summary>
            [EnumMember(Value = "Measurement")]
            Measurement = 3,
            
            /// <summary>
            /// Enum AzimuthReference for value: AzimuthReference
            /// </summary>
            [EnumMember(Value = "AzimuthReference")]
            AzimuthReference = 4,
            
            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 5
        }

        /// <summary>
        /// The kind of reference, unit, measurement, CRS or azimuth reference.
        /// </summary>
        /// <value>The kind of reference, unit, measurement, CRS or azimuth reference.</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public KindEnum Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetaItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileMetaItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetaItem" /> class.
        /// </summary>
        /// <param name="kind">The kind of reference, unit, measurement, CRS or azimuth reference. (required).</param>
        /// <param name="name">The name of the CRS or the symbol/name of the unit.</param>
        /// <param name="persistableReference">The persistable reference string uniquely identifying the CRS or Unit (required).</param>
        /// <param name="propertyNames">The list of property names, to which this meta data item provides Unit/CRS context to. Data structures, which come in a single frame of reference, can register the property name, others require a full path like \&quot;data.structureA.propertyB\&quot; to define a unique context..</param>
        /// <param name="propertyValues">The list of property values, to which this meta data item provides Unit/CRS context to. Typically a unit symbol is a value to a data structure; this symbol is then registered in this propertyValues array and the persistableReference provides the absolute reference..</param>
        /// <param name="uncertainty">The uncertainty of the values measured given the unit or CRS unit..</param>
        public FileMetaItem(KindEnum kind = default(KindEnum), string name = default(string), string persistableReference = default(string), List<string> propertyNames = default(List<string>), List<string> propertyValues = default(List<string>), decimal? uncertainty = default(decimal?))
        {
            // to ensure "kind" is required (not null)
            if (kind == null)
            {
                throw new InvalidDataException("kind is a required property for FileMetaItem and cannot be null");
            }
            else
            {
                this.Kind = kind;
            }
            // to ensure "persistableReference" is required (not null)
            if (persistableReference == null)
            {
                throw new InvalidDataException("persistableReference is a required property for FileMetaItem and cannot be null");
            }
            else
            {
                this.PersistableReference = persistableReference;
            }
            this.Name = name;
            this.PropertyNames = propertyNames;
            this.PropertyValues = propertyValues;
            this.Uncertainty = uncertainty;
        }
        

        /// <summary>
        /// The name of the CRS or the symbol/name of the unit
        /// </summary>
        /// <value>The name of the CRS or the symbol/name of the unit</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The persistable reference string uniquely identifying the CRS or Unit
        /// </summary>
        /// <value>The persistable reference string uniquely identifying the CRS or Unit</value>
        [DataMember(Name="persistableReference", EmitDefaultValue=false)]
        public string PersistableReference { get; set; }

        /// <summary>
        /// The list of property names, to which this meta data item provides Unit/CRS context to. Data structures, which come in a single frame of reference, can register the property name, others require a full path like \&quot;data.structureA.propertyB\&quot; to define a unique context.
        /// </summary>
        /// <value>The list of property names, to which this meta data item provides Unit/CRS context to. Data structures, which come in a single frame of reference, can register the property name, others require a full path like \&quot;data.structureA.propertyB\&quot; to define a unique context.</value>
        [DataMember(Name="propertyNames", EmitDefaultValue=false)]
        public List<string> PropertyNames { get; set; }

        /// <summary>
        /// The list of property values, to which this meta data item provides Unit/CRS context to. Typically a unit symbol is a value to a data structure; this symbol is then registered in this propertyValues array and the persistableReference provides the absolute reference.
        /// </summary>
        /// <value>The list of property values, to which this meta data item provides Unit/CRS context to. Typically a unit symbol is a value to a data structure; this symbol is then registered in this propertyValues array and the persistableReference provides the absolute reference.</value>
        [DataMember(Name="propertyValues", EmitDefaultValue=false)]
        public List<string> PropertyValues { get; set; }

        /// <summary>
        /// The uncertainty of the values measured given the unit or CRS unit.
        /// </summary>
        /// <value>The uncertainty of the values measured given the unit or CRS unit.</value>
        [DataMember(Name="uncertainty", EmitDefaultValue=false)]
        public decimal? Uncertainty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileMetaItem {\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PersistableReference: ").Append(PersistableReference).Append("\n");
            sb.Append("  PropertyNames: ").Append(PropertyNames).Append("\n");
            sb.Append("  PropertyValues: ").Append(PropertyValues).Append("\n");
            sb.Append("  Uncertainty: ").Append(Uncertainty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileMetaItem);
        }

        /// <summary>
        /// Returns true if FileMetaItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FileMetaItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileMetaItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PersistableReference == input.PersistableReference ||
                    (this.PersistableReference != null &&
                    this.PersistableReference.Equals(input.PersistableReference))
                ) && 
                (
                    this.PropertyNames == input.PropertyNames ||
                    this.PropertyNames != null &&
                    this.PropertyNames.SequenceEqual(input.PropertyNames)
                ) && 
                (
                    this.PropertyValues == input.PropertyValues ||
                    this.PropertyValues != null &&
                    this.PropertyValues.SequenceEqual(input.PropertyValues)
                ) && 
                (
                    this.Uncertainty == input.Uncertainty ||
                    (this.Uncertainty != null &&
                    this.Uncertainty.Equals(input.Uncertainty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PersistableReference != null)
                    hashCode = hashCode * 59 + this.PersistableReference.GetHashCode();
                if (this.PropertyNames != null)
                    hashCode = hashCode * 59 + this.PropertyNames.GetHashCode();
                if (this.PropertyValues != null)
                    hashCode = hashCode * 59 + this.PropertyValues.GetHashCode();
                if (this.Uncertainty != null)
                    hashCode = hashCode * 59 + this.Uncertainty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
