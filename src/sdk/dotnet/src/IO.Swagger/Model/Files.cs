/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The file data container containing all necessary details of the file record
    /// </summary>
    [DataContract]
    public partial class Files :  IEquatable<Files>, IValidatableObject
    {
        /// <summary>
        /// Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.
        /// </summary>
        /// <value>Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndianEnum
        {
            
            /// <summary>
            /// Enum BIGLITTLE for value: BIG LITTLE
            /// </summary>
            [EnumMember(Value = "BIG LITTLE")]
            BIGLITTLE = 1
        }

        /// <summary>
        /// Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.
        /// </summary>
        /// <value>Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.</value>
        [DataMember(Name="Endian", EmitDefaultValue=false)]
        public EndianEnum Endian { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Files" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Files() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Files" /> class.
        /// </summary>
        /// <param name="name">An optional name of the dataset, e.g. a user friendly file or file collection name. (required).</param>
        /// <param name="description">An optional, textual description of the dataset..</param>
        /// <param name="totalSize">Total size of the dataset in bytes; for files it is the same as declared in FileSourceInfo.FileSize or the sum of all individual files. Implemented as string. The value must be convertible to a long integer (sizes can become very large)..</param>
        /// <param name="encodingFormatTypeID">Encoding Format Type ID.</param>
        /// <param name="schemaFormatTypeID">Schema Format Type ID.</param>
        /// <param name="endian">Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators. (required).</param>
        /// <param name="checksum">MD5 checksum of file bytes - a 32 byte hexadecimal number.</param>
        /// <param name="datasetProperties">datasetProperties (required).</param>
        /// <param name="extensionProperties">extensionProperties.</param>
        public Files(string name = default(string), string description = default(string), string totalSize = default(string), string encodingFormatTypeID = default(string), string schemaFormatTypeID = default(string), EndianEnum endian = default(EndianEnum), string checksum = default(string), Object datasetProperties = default(Object), Object extensionProperties = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Files and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "endian" is required (not null)
            if (endian == null)
            {
                throw new InvalidDataException("endian is a required property for Files and cannot be null");
            }
            else
            {
                this.Endian = endian;
            }
            // to ensure "datasetProperties" is required (not null)
            if (datasetProperties == null)
            {
                throw new InvalidDataException("datasetProperties is a required property for Files and cannot be null");
            }
            else
            {
                this.DatasetProperties = datasetProperties;
            }
            this.Description = description;
            this.TotalSize = totalSize;
            this.EncodingFormatTypeID = encodingFormatTypeID;
            this.SchemaFormatTypeID = schemaFormatTypeID;
            this.Checksum = checksum;
            this.ExtensionProperties = extensionProperties;
        }
        
        /// <summary>
        /// An optional name of the dataset, e.g. a user friendly file or file collection name.
        /// </summary>
        /// <value>An optional name of the dataset, e.g. a user friendly file or file collection name.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An optional, textual description of the dataset.
        /// </summary>
        /// <value>An optional, textual description of the dataset.</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Total size of the dataset in bytes; for files it is the same as declared in FileSourceInfo.FileSize or the sum of all individual files. Implemented as string. The value must be convertible to a long integer (sizes can become very large).
        /// </summary>
        /// <value>Total size of the dataset in bytes; for files it is the same as declared in FileSourceInfo.FileSize or the sum of all individual files. Implemented as string. The value must be convertible to a long integer (sizes can become very large).</value>
        [DataMember(Name="TotalSize", EmitDefaultValue=false)]
        public string TotalSize { get; set; }

        /// <summary>
        /// Encoding Format Type ID
        /// </summary>
        /// <value>Encoding Format Type ID</value>
        [DataMember(Name="EncodingFormatTypeID", EmitDefaultValue=false)]
        public string EncodingFormatTypeID { get; set; }

        /// <summary>
        /// Schema Format Type ID
        /// </summary>
        /// <value>Schema Format Type ID</value>
        [DataMember(Name="SchemaFormatTypeID", EmitDefaultValue=false)]
        public string SchemaFormatTypeID { get; set; }


        /// <summary>
        /// MD5 checksum of file bytes - a 32 byte hexadecimal number
        /// </summary>
        /// <value>MD5 checksum of file bytes - a 32 byte hexadecimal number</value>
        [DataMember(Name="Checksum", EmitDefaultValue=false)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or Sets DatasetProperties
        /// </summary>
        [DataMember(Name="DatasetProperties", EmitDefaultValue=false)]
        public Object DatasetProperties { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionProperties
        /// </summary>
        [DataMember(Name="ExtensionProperties", EmitDefaultValue=false)]
        public Object ExtensionProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Files {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TotalSize: ").Append(TotalSize).Append("\n");
            sb.Append("  EncodingFormatTypeID: ").Append(EncodingFormatTypeID).Append("\n");
            sb.Append("  SchemaFormatTypeID: ").Append(SchemaFormatTypeID).Append("\n");
            sb.Append("  Endian: ").Append(Endian).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  DatasetProperties: ").Append(DatasetProperties).Append("\n");
            sb.Append("  ExtensionProperties: ").Append(ExtensionProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Files);
        }

        /// <summary>
        /// Returns true if Files instances are equal
        /// </summary>
        /// <param name="input">Instance of Files to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Files input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TotalSize == input.TotalSize ||
                    (this.TotalSize != null &&
                    this.TotalSize.Equals(input.TotalSize))
                ) && 
                (
                    this.EncodingFormatTypeID == input.EncodingFormatTypeID ||
                    (this.EncodingFormatTypeID != null &&
                    this.EncodingFormatTypeID.Equals(input.EncodingFormatTypeID))
                ) && 
                (
                    this.SchemaFormatTypeID == input.SchemaFormatTypeID ||
                    (this.SchemaFormatTypeID != null &&
                    this.SchemaFormatTypeID.Equals(input.SchemaFormatTypeID))
                ) && 
                (
                    this.Endian == input.Endian ||
                    (this.Endian != null &&
                    this.Endian.Equals(input.Endian))
                ) && 
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                ) && 
                (
                    this.DatasetProperties == input.DatasetProperties ||
                    (this.DatasetProperties != null &&
                    this.DatasetProperties.Equals(input.DatasetProperties))
                ) && 
                (
                    this.ExtensionProperties == input.ExtensionProperties ||
                    (this.ExtensionProperties != null &&
                    this.ExtensionProperties.Equals(input.ExtensionProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TotalSize != null)
                    hashCode = hashCode * 59 + this.TotalSize.GetHashCode();
                if (this.EncodingFormatTypeID != null)
                    hashCode = hashCode * 59 + this.EncodingFormatTypeID.GetHashCode();
                if (this.SchemaFormatTypeID != null)
                    hashCode = hashCode * 59 + this.SchemaFormatTypeID.GetHashCode();
                if (this.Endian != null)
                    hashCode = hashCode * 59 + this.Endian.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                if (this.DatasetProperties != null)
                    hashCode = hashCode * 59 + this.DatasetProperties.GetHashCode();
                if (this.ExtensionProperties != null)
                    hashCode = hashCode * 59 + this.ExtensionProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TotalSize (string) pattern
            Regex regexTotalSize = new Regex(@"^[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexTotalSize.Match(this.TotalSize).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalSize, must match a pattern of " + regexTotalSize, new [] { "TotalSize" });
            }

            // EncodingFormatTypeID (string) pattern
            Regex regexEncodingFormatTypeID = new Regex(@"^srn:<namespace>:reference-data\\\/EncodingFormatType:[^:]+:[0-9]*$", RegexOptions.CultureInvariant);
            if (false == regexEncodingFormatTypeID.Match(this.EncodingFormatTypeID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EncodingFormatTypeID, must match a pattern of " + regexEncodingFormatTypeID, new [] { "EncodingFormatTypeID" });
            }

            // SchemaFormatTypeID (string) pattern
            Regex regexSchemaFormatTypeID = new Regex(@"^srn:<namespace>:reference-data\\\/SchemaFormatType:[^:]+:[0-9]*$", RegexOptions.CultureInvariant);
            if (false == regexSchemaFormatTypeID.Match(this.SchemaFormatTypeID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SchemaFormatTypeID, must match a pattern of " + regexSchemaFormatTypeID, new [] { "SchemaFormatTypeID" });
            }

            // Checksum (string) pattern
            Regex regexChecksum = new Regex(@"^[0-9a-fA-F]32}$", RegexOptions.CultureInvariant);
            if (false == regexChecksum.Match(this.Checksum).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Checksum, must match a pattern of " + regexChecksum, new [] { "Checksum" });
            }

            yield break;
        }
    }

}
