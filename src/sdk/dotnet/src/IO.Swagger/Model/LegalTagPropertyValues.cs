/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Shows the allowed values of the fields of a LegalTag.
    /// </summary>
    [DataContract]
    public partial class LegalTagPropertyValues :  IEquatable<LegalTagPropertyValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalTagPropertyValues" /> class.
        /// </summary>
        /// <param name="countriesOfOrigin">The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name..</param>
        /// <param name="otherRelevantDataCountries">The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name..</param>
        /// <param name="securityClassifications">The values of all the allowed Security Classifications..</param>
        /// <param name="exportClassificationControlNumbers">The name of all the allowed Export Classifications..</param>
        /// <param name="personalDataTypes">The name of all the allowed Personal Data Type values..</param>
        public LegalTagPropertyValues(Dictionary<string, string> countriesOfOrigin = default(Dictionary<string, string>), Dictionary<string, string> otherRelevantDataCountries = default(Dictionary<string, string>), List<string> securityClassifications = default(List<string>), List<string> exportClassificationControlNumbers = default(List<string>), List<string> personalDataTypes = default(List<string>))
        {
            this.CountriesOfOrigin = countriesOfOrigin;
            this.OtherRelevantDataCountries = otherRelevantDataCountries;
            this.SecurityClassifications = securityClassifications;
            this.ExportClassificationControlNumbers = exportClassificationControlNumbers;
            this.PersonalDataTypes = personalDataTypes;
        }
        
        /// <summary>
        /// The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name.
        /// </summary>
        /// <value>The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name.</value>
        [DataMember(Name="countriesOfOrigin", EmitDefaultValue=false)]
        public Dictionary<string, string> CountriesOfOrigin { get; set; }

        /// <summary>
        /// The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name.
        /// </summary>
        /// <value>The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name.</value>
        [DataMember(Name="otherRelevantDataCountries", EmitDefaultValue=false)]
        public Dictionary<string, string> OtherRelevantDataCountries { get; set; }

        /// <summary>
        /// The values of all the allowed Security Classifications.
        /// </summary>
        /// <value>The values of all the allowed Security Classifications.</value>
        [DataMember(Name="securityClassifications", EmitDefaultValue=false)]
        public List<string> SecurityClassifications { get; set; }

        /// <summary>
        /// The name of all the allowed Export Classifications.
        /// </summary>
        /// <value>The name of all the allowed Export Classifications.</value>
        [DataMember(Name="exportClassificationControlNumbers", EmitDefaultValue=false)]
        public List<string> ExportClassificationControlNumbers { get; set; }

        /// <summary>
        /// The name of all the allowed Personal Data Type values.
        /// </summary>
        /// <value>The name of all the allowed Personal Data Type values.</value>
        [DataMember(Name="personalDataTypes", EmitDefaultValue=false)]
        public List<string> PersonalDataTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalTagPropertyValues {\n");
            sb.Append("  CountriesOfOrigin: ").Append(CountriesOfOrigin).Append("\n");
            sb.Append("  OtherRelevantDataCountries: ").Append(OtherRelevantDataCountries).Append("\n");
            sb.Append("  SecurityClassifications: ").Append(SecurityClassifications).Append("\n");
            sb.Append("  ExportClassificationControlNumbers: ").Append(ExportClassificationControlNumbers).Append("\n");
            sb.Append("  PersonalDataTypes: ").Append(PersonalDataTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegalTagPropertyValues);
        }

        /// <summary>
        /// Returns true if LegalTagPropertyValues instances are equal
        /// </summary>
        /// <param name="input">Instance of LegalTagPropertyValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalTagPropertyValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountriesOfOrigin == input.CountriesOfOrigin ||
                    this.CountriesOfOrigin != null &&
                    this.CountriesOfOrigin.SequenceEqual(input.CountriesOfOrigin)
                ) && 
                (
                    this.OtherRelevantDataCountries == input.OtherRelevantDataCountries ||
                    this.OtherRelevantDataCountries != null &&
                    this.OtherRelevantDataCountries.SequenceEqual(input.OtherRelevantDataCountries)
                ) && 
                (
                    this.SecurityClassifications == input.SecurityClassifications ||
                    this.SecurityClassifications != null &&
                    this.SecurityClassifications.SequenceEqual(input.SecurityClassifications)
                ) && 
                (
                    this.ExportClassificationControlNumbers == input.ExportClassificationControlNumbers ||
                    this.ExportClassificationControlNumbers != null &&
                    this.ExportClassificationControlNumbers.SequenceEqual(input.ExportClassificationControlNumbers)
                ) && 
                (
                    this.PersonalDataTypes == input.PersonalDataTypes ||
                    this.PersonalDataTypes != null &&
                    this.PersonalDataTypes.SequenceEqual(input.PersonalDataTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountriesOfOrigin != null)
                    hashCode = hashCode * 59 + this.CountriesOfOrigin.GetHashCode();
                if (this.OtherRelevantDataCountries != null)
                    hashCode = hashCode * 59 + this.OtherRelevantDataCountries.GetHashCode();
                if (this.SecurityClassifications != null)
                    hashCode = hashCode * 59 + this.SecurityClassifications.GetHashCode();
                if (this.ExportClassificationControlNumbers != null)
                    hashCode = hashCode * 59 + this.ExportClassificationControlNumbers.GetHashCode();
                if (this.PersonalDataTypes != null)
                    hashCode = hashCode * 59 + this.PersonalDataTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
