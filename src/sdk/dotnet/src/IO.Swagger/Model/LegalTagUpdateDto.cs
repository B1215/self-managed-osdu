/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The model to update an existing LegalTag
    /// </summary>
    [DataContract]
    public partial class LegalTagUpdateDto :  IEquatable<LegalTagUpdateDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalTagUpdateDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LegalTagUpdateDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalTagUpdateDto" /> class.
        /// </summary>
        /// <param name="name">The name of the LegalTag. (required).</param>
        /// <param name="contractId">The Id of the physical contract associated with the data being ingested. (required).</param>
        /// <param name="description">The optional description if the LegalTag to allow for easier discoverability of Legaltags overtime..</param>
        /// <param name="expirationDate">The optional expiration date of the contract in the format YYYY-MM-DD.</param>
        public LegalTagUpdateDto(string name = default(string), string contractId = default(string), string description = default(string), string expirationDate = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for LegalTagUpdateDto and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new InvalidDataException("contractId is a required property for LegalTagUpdateDto and cannot be null");
            }
            else
            {
                this.ContractId = contractId;
            }
            this.Description = description;
            this.ExpirationDate = expirationDate;
        }
        
        /// <summary>
        /// The name of the LegalTag.
        /// </summary>
        /// <value>The name of the LegalTag.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The Id of the physical contract associated with the data being ingested.
        /// </summary>
        /// <value>The Id of the physical contract associated with the data being ingested.</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public string ContractId { get; set; }

        /// <summary>
        /// The optional description if the LegalTag to allow for easier discoverability of Legaltags overtime.
        /// </summary>
        /// <value>The optional description if the LegalTag to allow for easier discoverability of Legaltags overtime.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The optional expiration date of the contract in the format YYYY-MM-DD
        /// </summary>
        /// <value>The optional expiration date of the contract in the format YYYY-MM-DD</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalTagUpdateDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegalTagUpdateDto);
        }

        /// <summary>
        /// Returns true if LegalTagUpdateDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LegalTagUpdateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalTagUpdateDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ContractId != null)
                    hashCode = hashCode * 59 + this.ContractId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
