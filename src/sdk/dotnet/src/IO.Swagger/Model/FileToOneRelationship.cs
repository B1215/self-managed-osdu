/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A relationship from this entity to one other entity either by natural key (name) or id, optionally classified by confidence level
    /// </summary>
    [DataContract]
    public partial class FileToOneRelationship :  IEquatable<FileToOneRelationship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileToOneRelationship" /> class.
        /// </summary>
        /// <param name="confidence">The confidence of the relationship. If the property is absent a well-known relation is implied..</param>
        /// <param name="id">The id of the related object in the Data Ecosystem. If set, the id has priority over the natural key in the name property..</param>
        /// <param name="name">The name or natural key of the related object. This property is required if the target object id could not (yet) be identified..</param>
        /// <param name="version">The version number of the related entity. If no version number is specified, the last version is implied..</param>
        public FileToOneRelationship(decimal? confidence = default(decimal?), string id = default(string), string name = default(string), decimal? version = default(decimal?))
        {
            this.Confidence = confidence;
            this.Id = id;
            this.Name = name;
            this.Version = version;
        }
        
        /// <summary>
        /// The confidence of the relationship. If the property is absent a well-known relation is implied.
        /// </summary>
        /// <value>The confidence of the relationship. If the property is absent a well-known relation is implied.</value>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public decimal? Confidence { get; set; }

        /// <summary>
        /// The id of the related object in the Data Ecosystem. If set, the id has priority over the natural key in the name property.
        /// </summary>
        /// <value>The id of the related object in the Data Ecosystem. If set, the id has priority over the natural key in the name property.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name or natural key of the related object. This property is required if the target object id could not (yet) be identified.
        /// </summary>
        /// <value>The name or natural key of the related object. This property is required if the target object id could not (yet) be identified.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The version number of the related entity. If no version number is specified, the last version is implied.
        /// </summary>
        /// <value>The version number of the related entity. If no version number is specified, the last version is implied.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public decimal? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileToOneRelationship {\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileToOneRelationship);
        }

        /// <summary>
        /// Returns true if FileToOneRelationship instances are equal
        /// </summary>
        /// <param name="input">Instance of FileToOneRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileToOneRelationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
