/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FileDeliveryGetFileSignedURLResponse
    /// </summary>
    [DataContract]
    public partial class FileDeliveryGetFileSignedURLResponse :  IEquatable<FileDeliveryGetFileSignedURLResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileDeliveryGetFileSignedURLResponse" /> class.
        /// </summary>
        /// <param name="unprocessed">A list of SRNs which could not be processed.</param>
        /// <param name="processed">Each key is equal to an SRN that was able to be processed.</param>
        public FileDeliveryGetFileSignedURLResponse(List<string> unprocessed = default(List<string>), Dictionary<string, Object> processed = default(Dictionary<string, Object>))
        {
            this.Unprocessed = unprocessed;
            this.Processed = processed;
        }
        
        /// <summary>
        /// A list of SRNs which could not be processed
        /// </summary>
        /// <value>A list of SRNs which could not be processed</value>
        [DataMember(Name="unprocessed", EmitDefaultValue=false)]
        public List<string> Unprocessed { get; set; }

        /// <summary>
        /// Each key is equal to an SRN that was able to be processed
        /// </summary>
        /// <value>Each key is equal to an SRN that was able to be processed</value>
        [DataMember(Name="processed", EmitDefaultValue=false)]
        public Dictionary<string, Object> Processed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileDeliveryGetFileSignedURLResponse {\n");
            sb.Append("  Unprocessed: ").Append(Unprocessed).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileDeliveryGetFileSignedURLResponse);
        }

        /// <summary>
        /// Returns true if FileDeliveryGetFileSignedURLResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FileDeliveryGetFileSignedURLResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileDeliveryGetFileSignedURLResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Unprocessed == input.Unprocessed ||
                    this.Unprocessed != null &&
                    this.Unprocessed.SequenceEqual(input.Unprocessed)
                ) && 
                (
                    this.Processed == input.Processed ||
                    this.Processed != null &&
                    this.Processed.SequenceEqual(input.Processed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unprocessed != null)
                    hashCode = hashCode * 59 + this.Unprocessed.GetHashCode();
                if (this.Processed != null)
                    hashCode = hashCode * 59 + this.Processed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
