/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LegalTag properties
    /// </summary>
    [DataContract]
    public partial class LegalTagProperties :  IEquatable<LegalTagProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalTagProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LegalTagProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalTagProperties" /> class.
        /// </summary>
        /// <param name="contractId">The Id of the physical contract associated with the data being ingested. (required).</param>
        /// <param name="countryOfOrigin">The ISO Alpha 2 country code(s) of where the data relates to. (required).</param>
        /// <param name="dataType">The type of data being ingested. (required).</param>
        /// <param name="expirationDate">The optional expiration date of the contract in the format YYYY-MM-DD (required).</param>
        /// <param name="exportClassification">The ECCN value of the data if one applies. (required).</param>
        /// <param name="originator">The company who owns the data. (required).</param>
        /// <param name="personalData">Whether the data contains any personally identifiable data. (required).</param>
        /// <param name="securityClassification">The security classification of the data. (required).</param>
        public LegalTagProperties(string contractId = default(string), List<string> countryOfOrigin = default(List<string>), string dataType = default(string), string expirationDate = default(string), string exportClassification = default(string), string originator = default(string), string personalData = default(string), string securityClassification = default(string))
        {
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new InvalidDataException("contractId is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.ContractId = contractId;
            }
            // to ensure "countryOfOrigin" is required (not null)
            if (countryOfOrigin == null)
            {
                throw new InvalidDataException("countryOfOrigin is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.CountryOfOrigin = countryOfOrigin;
            }
            // to ensure "dataType" is required (not null)
            if (dataType == null)
            {
                throw new InvalidDataException("dataType is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.DataType = dataType;
            }
            // to ensure "expirationDate" is required (not null)
            if (expirationDate == null)
            {
                throw new InvalidDataException("expirationDate is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.ExpirationDate = expirationDate;
            }
            // to ensure "exportClassification" is required (not null)
            if (exportClassification == null)
            {
                throw new InvalidDataException("exportClassification is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.ExportClassification = exportClassification;
            }
            // to ensure "originator" is required (not null)
            if (originator == null)
            {
                throw new InvalidDataException("originator is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.Originator = originator;
            }
            // to ensure "personalData" is required (not null)
            if (personalData == null)
            {
                throw new InvalidDataException("personalData is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.PersonalData = personalData;
            }
            // to ensure "securityClassification" is required (not null)
            if (securityClassification == null)
            {
                throw new InvalidDataException("securityClassification is a required property for LegalTagProperties and cannot be null");
            }
            else
            {
                this.SecurityClassification = securityClassification;
            }
        }
        
        /// <summary>
        /// The Id of the physical contract associated with the data being ingested.
        /// </summary>
        /// <value>The Id of the physical contract associated with the data being ingested.</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public string ContractId { get; set; }

        /// <summary>
        /// The ISO Alpha 2 country code(s) of where the data relates to.
        /// </summary>
        /// <value>The ISO Alpha 2 country code(s) of where the data relates to.</value>
        [DataMember(Name="countryOfOrigin", EmitDefaultValue=false)]
        public List<string> CountryOfOrigin { get; set; }

        /// <summary>
        /// The type of data being ingested.
        /// </summary>
        /// <value>The type of data being ingested.</value>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public string DataType { get; set; }

        /// <summary>
        /// The optional expiration date of the contract in the format YYYY-MM-DD
        /// </summary>
        /// <value>The optional expiration date of the contract in the format YYYY-MM-DD</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// The ECCN value of the data if one applies.
        /// </summary>
        /// <value>The ECCN value of the data if one applies.</value>
        [DataMember(Name="exportClassification", EmitDefaultValue=false)]
        public string ExportClassification { get; set; }

        /// <summary>
        /// The company who owns the data.
        /// </summary>
        /// <value>The company who owns the data.</value>
        [DataMember(Name="originator", EmitDefaultValue=false)]
        public string Originator { get; set; }

        /// <summary>
        /// Whether the data contains any personally identifiable data.
        /// </summary>
        /// <value>Whether the data contains any personally identifiable data.</value>
        [DataMember(Name="personalData", EmitDefaultValue=false)]
        public string PersonalData { get; set; }

        /// <summary>
        /// The security classification of the data.
        /// </summary>
        /// <value>The security classification of the data.</value>
        [DataMember(Name="securityClassification", EmitDefaultValue=false)]
        public string SecurityClassification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalTagProperties {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExportClassification: ").Append(ExportClassification).Append("\n");
            sb.Append("  Originator: ").Append(Originator).Append("\n");
            sb.Append("  PersonalData: ").Append(PersonalData).Append("\n");
            sb.Append("  SecurityClassification: ").Append(SecurityClassification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegalTagProperties);
        }

        /// <summary>
        /// Returns true if LegalTagProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of LegalTagProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalTagProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.CountryOfOrigin == input.CountryOfOrigin ||
                    this.CountryOfOrigin != null &&
                    this.CountryOfOrigin.SequenceEqual(input.CountryOfOrigin)
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExportClassification == input.ExportClassification ||
                    (this.ExportClassification != null &&
                    this.ExportClassification.Equals(input.ExportClassification))
                ) && 
                (
                    this.Originator == input.Originator ||
                    (this.Originator != null &&
                    this.Originator.Equals(input.Originator))
                ) && 
                (
                    this.PersonalData == input.PersonalData ||
                    (this.PersonalData != null &&
                    this.PersonalData.Equals(input.PersonalData))
                ) && 
                (
                    this.SecurityClassification == input.SecurityClassification ||
                    (this.SecurityClassification != null &&
                    this.SecurityClassification.Equals(input.SecurityClassification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractId != null)
                    hashCode = hashCode * 59 + this.ContractId.GetHashCode();
                if (this.CountryOfOrigin != null)
                    hashCode = hashCode * 59 + this.CountryOfOrigin.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ExportClassification != null)
                    hashCode = hashCode * 59 + this.ExportClassification.GetHashCode();
                if (this.Originator != null)
                    hashCode = hashCode * 59 + this.Originator.GetHashCode();
                if (this.PersonalData != null)
                    hashCode = hashCode * 59 + this.PersonalData.GetHashCode();
                if (this.SecurityClassification != null)
                    hashCode = hashCode * 59 + this.SecurityClassification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
