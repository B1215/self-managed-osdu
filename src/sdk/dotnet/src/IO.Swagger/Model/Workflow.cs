/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Workflow
    /// </summary>
    [DataContract]
    public partial class Workflow :  IEquatable<Workflow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Workflow" /> class.
        /// </summary>
        /// <param name="workflowName">Workfow name given as input from user while deploying the workflow..</param>
        /// <param name="registrationInstructions">Workfow registration instructions which could contains: - Name of already registered Airflow DAG - Cotent of python DAG file - etc By default this is Airflow DAG named &#x60;workflowName&#x60; .</param>
        /// <param name="description">Description of workflow provided by user at time of creation of workflow..</param>
        public Workflow(string workflowName = default(string), Object registrationInstructions = default(Object), string description = default(string))
        {
            this.WorkflowName = workflowName;
            this.RegistrationInstructions = registrationInstructions;
            this.Description = description;
        }
        
        /// <summary>
        /// System generated id, which uniquely recongnizes a workflow.
        /// </summary>
        /// <value>System generated id, which uniquely recongnizes a workflow.</value>
        [DataMember(Name="workflowId", EmitDefaultValue=false)]
        public string WorkflowId { get; private set; }

        /// <summary>
        /// Workfow name given as input from user while deploying the workflow.
        /// </summary>
        /// <value>Workfow name given as input from user while deploying the workflow.</value>
        [DataMember(Name="workflowName", EmitDefaultValue=false)]
        public string WorkflowName { get; set; }

        /// <summary>
        /// Workfow registration instructions which could contains: - Name of already registered Airflow DAG - Cotent of python DAG file - etc By default this is Airflow DAG named &#x60;workflowName&#x60; 
        /// </summary>
        /// <value>Workfow registration instructions which could contains: - Name of already registered Airflow DAG - Cotent of python DAG file - etc By default this is Airflow DAG named &#x60;workflowName&#x60; </value>
        [DataMember(Name="registrationInstructions", EmitDefaultValue=false)]
        public Object RegistrationInstructions { get; set; }

        /// <summary>
        /// Description of workflow provided by user at time of creation of workflow.
        /// </summary>
        /// <value>Description of workflow provided by user at time of creation of workflow.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// System captured user info who created workflow.
        /// </summary>
        /// <value>System captured user info who created workflow.</value>
        [DataMember(Name="createdby", EmitDefaultValue=false)]
        public string Createdby { get; private set; }

        /// <summary>
        /// System date of creation of workflow.Epoch tiemstamp.
        /// </summary>
        /// <value>System date of creation of workflow.Epoch tiemstamp.</value>
        [DataMember(Name="creationTimestamp", EmitDefaultValue=false)]
        public decimal? CreationTimestamp { get; private set; }

        /// <summary>
        /// Sematic versions of workflow. These numbers are assigned in increasing order and correspond to edits\\modifications to workflow definitions.
        /// </summary>
        /// <value>Sematic versions of workflow. These numbers are assigned in increasing order and correspond to edits\\modifications to workflow definitions.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Workflow {\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  WorkflowName: ").Append(WorkflowName).Append("\n");
            sb.Append("  RegistrationInstructions: ").Append(RegistrationInstructions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Createdby: ").Append(Createdby).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Workflow);
        }

        /// <summary>
        /// Returns true if Workflow instances are equal
        /// </summary>
        /// <param name="input">Instance of Workflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workflow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WorkflowId == input.WorkflowId ||
                    (this.WorkflowId != null &&
                    this.WorkflowId.Equals(input.WorkflowId))
                ) && 
                (
                    this.WorkflowName == input.WorkflowName ||
                    (this.WorkflowName != null &&
                    this.WorkflowName.Equals(input.WorkflowName))
                ) && 
                (
                    this.RegistrationInstructions == input.RegistrationInstructions ||
                    (this.RegistrationInstructions != null &&
                    this.RegistrationInstructions.Equals(input.RegistrationInstructions))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Createdby == input.Createdby ||
                    (this.Createdby != null &&
                    this.Createdby.Equals(input.Createdby))
                ) && 
                (
                    this.CreationTimestamp == input.CreationTimestamp ||
                    (this.CreationTimestamp != null &&
                    this.CreationTimestamp.Equals(input.CreationTimestamp))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkflowId != null)
                    hashCode = hashCode * 59 + this.WorkflowId.GetHashCode();
                if (this.WorkflowName != null)
                    hashCode = hashCode * 59 + this.WorkflowName.GetHashCode();
                if (this.RegistrationInstructions != null)
                    hashCode = hashCode * 59 + this.RegistrationInstructions.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Createdby != null)
                    hashCode = hashCode * 59 + this.Createdby.GetHashCode();
                if (this.CreationTimestamp != null)
                    hashCode = hashCode * 59 + this.CreationTimestamp.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
