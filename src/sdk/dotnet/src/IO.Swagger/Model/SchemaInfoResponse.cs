/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The response for a GET schema request
    /// </summary>
    [DataContract]
    public partial class SchemaInfoResponse :  IEquatable<SchemaInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaInfoResponse" /> class.
        /// </summary>
        /// <param name="schemaInfos">schemaInfos.</param>
        /// <param name="offset">The offset for the next query.</param>
        /// <param name="count">The number of schema versions in this response.</param>
        /// <param name="totalCount">The total number of entity type codes in the repositories.</param>
        public SchemaInfoResponse(List<SchemaInfo> schemaInfos = default(List<SchemaInfo>), int? offset = default(int?), int? count = default(int?), int? totalCount = default(int?))
        {
            this.SchemaInfos = schemaInfos;
            this.Offset = offset;
            this.Count = count;
            this.TotalCount = totalCount;
        }
        
        /// <summary>
        /// Gets or Sets SchemaInfos
        /// </summary>
        [DataMember(Name="schemaInfos", EmitDefaultValue=false)]
        public List<SchemaInfo> SchemaInfos { get; set; }

        /// <summary>
        /// The offset for the next query
        /// </summary>
        /// <value>The offset for the next query</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// The number of schema versions in this response
        /// </summary>
        /// <value>The number of schema versions in this response</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// The total number of entity type codes in the repositories
        /// </summary>
        /// <value>The total number of entity type codes in the repositories</value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchemaInfoResponse {\n");
            sb.Append("  SchemaInfos: ").Append(SchemaInfos).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchemaInfoResponse);
        }

        /// <summary>
        /// Returns true if SchemaInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SchemaInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemaInfoResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchemaInfos == input.SchemaInfos ||
                    this.SchemaInfos != null &&
                    this.SchemaInfos.SequenceEqual(input.SchemaInfos)
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemaInfos != null)
                    hashCode = hashCode * 59 + this.SchemaInfos.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Offset (int?) minimum
            if(this.Offset < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Offset, must be a value greater than or equal to 0.", new [] { "Offset" });
            }

            // Count (int?) minimum
            if(this.Count < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value greater than or equal to 0.", new [] { "Count" });
            }

            // TotalCount (int?) minimum
            if(this.TotalCount < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalCount, must be a value greater than or equal to 0.", new [] { "TotalCount" });
            }

            yield break;
        }
    }

}
