/* 
 * self-managed-osdu
 *
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Reperesent one workflow run.
    /// </summary>
    [DataContract]
    public partial class WorkflowRun :  IEquatable<WorkflowRun>, IValidatableObject
    {
        /// <summary>
        /// Task execution status
        /// </summary>
        /// <value>Task execution status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum INPROGRESS for value: INPROGRESS
            /// </summary>
            [EnumMember(Value = "INPROGRESS")]
            INPROGRESS = 1,
            
            /// <summary>
            /// Enum PARTIALSUCCESS for value: PARTIAL_SUCCESS
            /// </summary>
            [EnumMember(Value = "PARTIAL_SUCCESS")]
            PARTIALSUCCESS = 2,
            
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 3,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4,
            
            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            [EnumMember(Value = "SUBMITTED")]
            SUBMITTED = 5
        }

        /// <summary>
        /// Task execution status
        /// </summary>
        /// <value>Task execution status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowRun" /> class.
        /// </summary>
        /// <param name="status">Task execution status.</param>
        public WorkflowRun(StatusEnum? status = default(StatusEnum?))
        {
            this.Status = status;
        }
        
        /// <summary>
        /// Workflow id for the workflow.
        /// </summary>
        /// <value>Workflow id for the workflow.</value>
        [DataMember(Name="workflowId", EmitDefaultValue=false)]
        public string WorkflowId { get; private set; }

        /// <summary>
        /// Run id for the workflow.
        /// </summary>
        /// <value>Run id for the workflow.</value>
        [DataMember(Name="runId", EmitDefaultValue=false)]
        public string RunId { get; private set; }

        /// <summary>
        /// Start timestamp of the workflow run.Epoch time stamp.
        /// </summary>
        /// <value>Start timestamp of the workflow run.Epoch time stamp.</value>
        [DataMember(Name="startTimestamp", EmitDefaultValue=false)]
        public decimal? StartTimestamp { get; private set; }

        /// <summary>
        /// End timestamp of the workflow run.Epoch timestamp.
        /// </summary>
        /// <value>End timestamp of the workflow run.Epoch timestamp.</value>
        [DataMember(Name="endTimestamp", EmitDefaultValue=false)]
        public decimal? EndTimestamp { get; private set; }


        /// <summary>
        /// System captured user details which triggered the  run.
        /// </summary>
        /// <value>System captured user details which triggered the  run.</value>
        [DataMember(Name="submittedBy", EmitDefaultValue=false)]
        public string SubmittedBy { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowRun {\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubmittedBy: ").Append(SubmittedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowRun);
        }

        /// <summary>
        /// Returns true if WorkflowRun instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowRun input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WorkflowId == input.WorkflowId ||
                    (this.WorkflowId != null &&
                    this.WorkflowId.Equals(input.WorkflowId))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.StartTimestamp == input.StartTimestamp ||
                    (this.StartTimestamp != null &&
                    this.StartTimestamp.Equals(input.StartTimestamp))
                ) && 
                (
                    this.EndTimestamp == input.EndTimestamp ||
                    (this.EndTimestamp != null &&
                    this.EndTimestamp.Equals(input.EndTimestamp))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubmittedBy == input.SubmittedBy ||
                    (this.SubmittedBy != null &&
                    this.SubmittedBy.Equals(input.SubmittedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkflowId != null)
                    hashCode = hashCode * 59 + this.WorkflowId.GetHashCode();
                if (this.RunId != null)
                    hashCode = hashCode * 59 + this.RunId.GetHashCode();
                if (this.StartTimestamp != null)
                    hashCode = hashCode * 59 + this.StartTimestamp.GetHashCode();
                if (this.EndTimestamp != null)
                    hashCode = hashCode * 59 + this.EndTimestamp.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubmittedBy != null)
                    hashCode = hashCode * 59 + this.SubmittedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
