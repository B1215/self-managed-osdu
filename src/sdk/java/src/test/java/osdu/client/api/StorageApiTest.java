/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiException;
import osdu.client.model.StorageBulkUpdateRecordsResponse;
import osdu.client.model.StorageDeleteRecordError;
import osdu.client.model.StorageErrorResponse;
import osdu.client.model.StorageMultiRecordIds;
import osdu.client.model.StorageQueryResponse;
import osdu.client.model.StorageRecord;
import osdu.client.model.StorageRecordBulkUpdateParam;
import osdu.client.model.StorageRecordData;
import osdu.client.model.StorageRecordVersions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageApi
 */
@Ignore
public class StorageApiTest {

    private final StorageApi api = new StorageApi();

    
    /**
     * Create or update records
     *
     * The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateRecordsTest() throws ApiException {
        String osDUAccountId = null;
        Boolean skipdupes = null;
        List<StorageRecord> body = null;
        StorageRecord response = api.createOrUpdateRecords(osDUAccountId, skipdupes, body);

        // TODO: test validations
    }
    
    /**
     * Delete record
     *
     * The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecordTest() throws ApiException {
        String id = null;
        String osDUAccountId = null;
        api.deleteRecord(id, osDUAccountId);

        // TODO: test validations
    }
    
    /**
     * Soft delete of multiple records
     *
     * The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecordsTest() throws ApiException {
        String dataPartitionId = null;
        List<String> partitionInfo = null;
        api.deleteRecords(dataPartitionId, partitionInfo);

        // TODO: test validations
    }
    
    /**
     * Fetch records
     *
     * The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchRecordsTest() throws ApiException {
        String osDUAccountId = null;
        StorageMultiRecordIds body = null;
        StorageMultiRecordIds response = api.fetchRecords(osDUAccountId, body);

        // TODO: test validations
    }
    
    /**
     * Get all kinds
     *
     * The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllKindsTest() throws ApiException {
        String osDUAccountId = null;
        String cursor = null;
        Integer limit = null;
        StorageQueryResponse response = api.getAllKinds(osDUAccountId, cursor, limit);

        // TODO: test validations
    }
    
    /**
     * Get all record from kind
     *
     * The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRecordFromKindTest() throws ApiException {
        String osDUAccountId = null;
        String cursor = null;
        Integer limit = null;
        String kind = null;
        StorageQueryResponse response = api.getAllRecordFromKind(osDUAccountId, cursor, limit, kind);

        // TODO: test validations
    }
    
    /**
     * Get all record versions
     *
     * The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRecordVersionsTest() throws ApiException {
        String id = null;
        String osDUAccountId = null;
        StorageRecordVersions response = api.getAllRecordVersions(id, osDUAccountId);

        // TODO: test validations
    }
    
    /**
     * Get record
     *
     * This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String id = null;
        String osDUAccountId = null;
        List<String> attribute = null;
        StorageRecordData response = api.getRecord(id, osDUAccountId, attribute);

        // TODO: test validations
    }
    
    /**
     * Get record version
     *
     * The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordVersionTest() throws ApiException {
        String id = null;
        Long version = null;
        String osDUAccountId = null;
        List<String> attribute = null;
        StorageRecordData response = api.getRecordVersion(id, version, osDUAccountId, attribute);

        // TODO: test validations
    }
    
    /**
     * Modify record metadata attributes using patch operations
     *
     * The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUpdateRecordsTest() throws ApiException {
        String osDUAccountId = null;
        List<StorageRecordBulkUpdateParam> body = null;
        StorageBulkUpdateRecordsResponse response = api.patchUpdateRecords(osDUAccountId, body);

        // TODO: test validations
    }
    
    /**
     * Purge record
     *
     * The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purgeRecordTest() throws ApiException {
        String id = null;
        String osDUAccountId = null;
        api.purgeRecord(id, osDUAccountId);

        // TODO: test validations
    }
    
}
