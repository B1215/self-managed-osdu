/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiException;
import osdu.client.model.FileApplicationError;
import osdu.client.model.FileDownloadResponse;
import osdu.client.model.FileLandingZoneLocationResponse;
import osdu.client.model.FileLocationRequest;
import osdu.client.model.FileMetadata;
import osdu.client.model.FileMetadataResponse;
import osdu.client.model.FileRecordVersion;
import osdu.client.model.FileSourceLocationResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FileServiceApi
 */
@Ignore
public class FileServiceApiTest {

    private final FileServiceApi api = new FileServiceApi();

    
    /**
     * Deletes metadata record &amp; file assocaited with that record for the given id
     *
     * Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletesMetadataRecordFileForTheGivenIdTest() throws ApiException {
        String dataPartitionId = null;
        String id = null;
        api.deletesMetadataRecordFileForTheGivenId(dataPartitionId, id);

        // TODO: test validations
    }
    
    /**
     * Get a location in Landing Zone to upload a file.
     *
     * Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getALocationInLandingZoneToUploadAFile_Test() throws ApiException {
        String dataPartitionId = null;
        FileLocationRequest body = null;
        FileLandingZoneLocationResponse response = api.getALocationInLandingZoneToUploadAFile_(dataPartitionId, body);

        // TODO: test validations
    }
    
    /**
     * Get a location in Landing Zone to upload a file.
     *
     * Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTheLocationToUploadAFileTest() throws ApiException {
        String dataPartitionId = null;
        FileSourceLocationResponse response = api.getTheLocationToUploadAFile(dataPartitionId);

        // TODO: test validations
    }
    
    /**
     * Gets metadata record for the given id
     *
     * Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getsMetadataRecordForTheGivenIdTest() throws ApiException {
        String dataPartitionId = null;
        String id = null;
        FileRecordVersion response = api.getsMetadataRecordForTheGivenId(dataPartitionId, id);

        // TODO: test validations
    }
    
    /**
     * Gets a URL to download the file
     *
     * Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getsURLToDownloadTheFileAssociatedWithTheGivenId_Test() throws ApiException {
        String dataPartitionId = null;
        String id = null;
        String expiryTime = null;
        FileDownloadResponse response = api.getsURLToDownloadTheFileAssociatedWithTheGivenId_(dataPartitionId, id, expiryTime);

        // TODO: test validations
    }
    
    /**
     * Creates metadata for a file
     *
     * This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishFileMetadataForAFile_Test() throws ApiException {
        String dataPartitionId = null;
        FileMetadata body = null;
        FileMetadataResponse response = api.publishFileMetadataForAFile_(dataPartitionId, body);

        // TODO: test validations
    }
    
}
