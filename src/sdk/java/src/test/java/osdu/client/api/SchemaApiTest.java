/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiException;
import osdu.client.model.SchemaErrorResponseFormat;
import osdu.client.model.SchemaInfo;
import osdu.client.model.SchemaInfoResponse;
import osdu.client.model.SchemaRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SchemaApi
 */
@Ignore
public class SchemaApiTest {

    private final SchemaApi api = new SchemaApi();

    
    /**
     * Adds a schema to the schema repository.
     *
     * Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSchemaTest() throws ApiException {
        String dataPartitionId = null;
        SchemaRequest body = null;
        SchemaInfo response = api.createSchema(dataPartitionId, body);

        // TODO: test validations
    }
    
    /**
     * Gets schema from the schema repository.
     *
     * Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchemaTest() throws ApiException {
        String dataPartitionId = null;
        String id = null;
        Object response = api.getSchema(dataPartitionId, id);

        // TODO: test validations
    }
    
    /**
     * Searches schemaInfo repository
     *
     * Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSchemaInfoRepositoryTest() throws ApiException {
        String dataPartitionId = null;
        String authority = null;
        String source = null;
        String entityType = null;
        String schemaVersionMajor = null;
        String schemaVersionMinor = null;
        String status = null;
        String scope = null;
        Boolean latestVersion = null;
        Integer limit = null;
        Integer offset = null;
        SchemaInfoResponse response = api.searchSchemaInfoRepository(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Creates/Updates a schema in development status
     *
     * Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSchemaTest() throws ApiException {
        String dataPartitionId = null;
        SchemaRequest body = null;
        SchemaInfo response = api.updateSchema(dataPartitionId, body);

        // TODO: test validations
    }
    
}
