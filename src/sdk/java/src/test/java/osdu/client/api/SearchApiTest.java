/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiException;
import osdu.client.model.SearchAppError;
import osdu.client.model.SearchCursorQueryRequest;
import osdu.client.model.SearchCursorQueryResponse;
import osdu.client.model.SearchQueryRequest;
import osdu.client.model.SearchQueryResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchApi
 */
@Ignore
public class SearchApiTest {

    private final SearchApi api = new SearchApi();

    
    /**
     * Deletes all documents from index for given &#39;kind&#39;.
     *
     * The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIndexTest() throws ApiException {
        String osDUAccountId = null;
        String kind = null;
        String osDUOnBehalfOf = null;
        api.deleteIndex(osDUAccountId, kind, osDUOnBehalfOf);

        // TODO: test validations
    }
    
    /**
     * Returns the index schema for given &#39;kind&#39;.
     *
     * The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKindSchemaTest() throws ApiException {
        String osDUAccountId = null;
        String kind = null;
        String osDUOnBehalfOf = null;
        String response = api.getKindSchema(osDUAccountId, kind, osDUOnBehalfOf);

        // TODO: test validations
    }
    
    /**
     * Queries the index for the specified kind using the input query string.
     *
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryRecordsTest() throws ApiException {
        String osDUAccountId = null;
        SearchQueryRequest body = null;
        String osDUOnBehalfOf = null;
        SearchQueryResponse response = api.queryRecords(osDUAccountId, body, osDUOnBehalfOf);

        // TODO: test validations
    }
    
    /**
     * Query the index using cursor and optionally return only requested fields.
     *
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryWithCursorTest() throws ApiException {
        String osDUAccountId = null;
        SearchCursorQueryRequest body = null;
        String osDUOnBehalfOf = null;
        SearchCursorQueryResponse response = api.queryWithCursor(osDUAccountId, body, osDUOnBehalfOf);

        // TODO: test validations
    }
    
}
