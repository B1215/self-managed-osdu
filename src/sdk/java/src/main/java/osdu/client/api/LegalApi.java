/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiCallback;
import osdu.client.ApiClient;
import osdu.client.ApiException;
import osdu.client.ApiResponse;
import osdu.client.Configuration;
import osdu.client.Pair;
import osdu.client.ProgressRequestBody;
import osdu.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import osdu.client.model.LegalTagDto;
import osdu.client.model.LegalTagDtos;
import osdu.client.model.LegalTagInvalidResponseList;
import osdu.client.model.LegalTagPropertyValues;
import osdu.client.model.LegalTagRequest;
import osdu.client.model.LegalTagUpdateDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LegalApi {
    private ApiClient apiClient;

    public LegalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LegalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLegalTag
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLegalTagCall(String osDUAccountId, LegalTagDto body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLegalTagValidateBeforeCall(String osDUAccountId, LegalTagDto body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling createLegalTag(Async)");
        }
        

        com.squareup.okhttp.Call call = createLegalTagCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates the LegalTag for the given &#39;name&#39;.
     * This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return LegalTagDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegalTagDto createLegalTag(String osDUAccountId, LegalTagDto body, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<LegalTagDto> resp = createLegalTagWithHttpInfo(osDUAccountId, body, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Creates the LegalTag for the given &#39;name&#39;.
     * This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return ApiResponse&lt;LegalTagDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegalTagDto> createLegalTagWithHttpInfo(String osDUAccountId, LegalTagDto body, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = createLegalTagValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<LegalTagDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates the LegalTag for the given &#39;name&#39;. (asynchronously)
     * This allows for the creation of your LegalTag. There can only be 1 LegalTag per &#39;name&#39;. A LegalTag must be created before you can start ingesting data for that name.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLegalTagAsync(String osDUAccountId, LegalTagDto body, String osDUOnBehalfOf, final ApiCallback<LegalTagDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLegalTagValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegalTagDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLegalTag
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLegalTagCall(String dataPartitionId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLegalTagValidateBeforeCall(String dataPartitionId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteLegalTag(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteLegalTag(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLegalTagCall(dataPartitionId, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Legal Tag
     * This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLegalTag(String dataPartitionId, String name) throws ApiException {
        deleteLegalTagWithHttpInfo(dataPartitionId, name);
    }

    /**
     * Delete Legal Tag
     * This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLegalTagWithHttpInfo(String dataPartitionId, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteLegalTagValidateBeforeCall(dataPartitionId, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Legal Tag (asynchronously)
     * This allows for the deletion of your LegalTag using the &#39;name&#39; associated with it. 
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLegalTagAsync(String dataPartitionId, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLegalTagValidateBeforeCall(dataPartitionId, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLegalTag
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLegalTagCall(String dataPartitionId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLegalTagValidateBeforeCall(String dataPartitionId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getLegalTag(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLegalTag(Async)");
        }
        

        com.squareup.okhttp.Call call = getLegalTagCall(dataPartitionId, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a LegalTag for the given &#39;name&#39;.
     * This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @return LegalTagDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegalTagDto getLegalTag(String dataPartitionId, String name) throws ApiException {
        ApiResponse<LegalTagDto> resp = getLegalTagWithHttpInfo(dataPartitionId, name);
        return resp.getData();
    }

    /**
     * Gets a LegalTag for the given &#39;name&#39;.
     * This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @return ApiResponse&lt;LegalTagDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegalTagDto> getLegalTagWithHttpInfo(String dataPartitionId, String name) throws ApiException {
        com.squareup.okhttp.Call call = getLegalTagValidateBeforeCall(dataPartitionId, name, null, null);
        Type localVarReturnType = new TypeToken<LegalTagDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a LegalTag for the given &#39;name&#39;. (asynchronously)
     * This allows for the retrieval of your LegalTag using the &#39;name&#39; associated with it.
     * @param dataPartitionId Partition Id (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLegalTagAsync(String dataPartitionId, String name, final ApiCallback<LegalTagDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLegalTagValidateBeforeCall(dataPartitionId, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegalTagDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLegalTagProperties
     * @param dataPartitionId Partition Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLegalTagPropertiesCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags:properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLegalTagPropertiesValidateBeforeCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getLegalTagProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = getLegalTagPropertiesCall(dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets LegalTag property values.
     * This allows for the retrieval of allowed values for LegalTag properties.
     * @param dataPartitionId Partition Id (required)
     * @return LegalTagPropertyValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegalTagPropertyValues getLegalTagProperties(String dataPartitionId) throws ApiException {
        ApiResponse<LegalTagPropertyValues> resp = getLegalTagPropertiesWithHttpInfo(dataPartitionId);
        return resp.getData();
    }

    /**
     * Gets LegalTag property values.
     * This allows for the retrieval of allowed values for LegalTag properties.
     * @param dataPartitionId Partition Id (required)
     * @return ApiResponse&lt;LegalTagPropertyValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegalTagPropertyValues> getLegalTagPropertiesWithHttpInfo(String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = getLegalTagPropertiesValidateBeforeCall(dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<LegalTagPropertyValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets LegalTag property values. (asynchronously)
     * This allows for the retrieval of allowed values for LegalTag properties.
     * @param dataPartitionId Partition Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLegalTagPropertiesAsync(String dataPartitionId, final ApiCallback<LegalTagPropertyValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLegalTagPropertiesValidateBeforeCall(dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegalTagPropertyValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLegalTags
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLegalTagsCall(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags:batchRetrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLegalTagsValidateBeforeCall(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling getLegalTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getLegalTagsCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the LegalTags for the given names.
     * This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return LegalTagDtos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegalTagDtos getLegalTags(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<LegalTagDtos> resp = getLegalTagsWithHttpInfo(osDUAccountId, body, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Retrieves the LegalTags for the given names.
     * This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return ApiResponse&lt;LegalTagDtos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegalTagDtos> getLegalTagsWithHttpInfo(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = getLegalTagsValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<LegalTagDtos>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the LegalTags for the given names. (asynchronously)
     * This allows for the retrieval of your LegalTags using the &#39;name&#39; associated with it. A maximum of 25 can be retrieved at once.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLegalTagsAsync(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf, final ApiCallback<LegalTagDtos> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLegalTagsValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegalTagDtos>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLegalTags
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param valid If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLegalTagsCall(String osDUAccountId, Boolean valid, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (valid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLegalTagsValidateBeforeCall(String osDUAccountId, Boolean valid, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling listLegalTags(Async)");
        }
        

        com.squareup.okhttp.Call call = listLegalTagsCall(osDUAccountId, valid, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all LegalTags.
     * This allows for the retrieval of all LegalTags.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param valid If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return LegalTagDtos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegalTagDtos listLegalTags(String osDUAccountId, Boolean valid, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<LegalTagDtos> resp = listLegalTagsWithHttpInfo(osDUAccountId, valid, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Gets all LegalTags.
     * This allows for the retrieval of all LegalTags.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param valid If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return ApiResponse&lt;LegalTagDtos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegalTagDtos> listLegalTagsWithHttpInfo(String osDUAccountId, Boolean valid, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = listLegalTagsValidateBeforeCall(osDUAccountId, valid, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<LegalTagDtos>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all LegalTags. (asynchronously)
     * This allows for the retrieval of all LegalTags.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param valid If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true. (optional, default to true)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLegalTagsAsync(String osDUAccountId, Boolean valid, String osDUOnBehalfOf, final ApiCallback<LegalTagDtos> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLegalTagsValidateBeforeCall(osDUAccountId, valid, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegalTagDtos>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLegalTag
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLegalTagCall(String osDUAccountId, LegalTagUpdateDto body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLegalTagValidateBeforeCall(String osDUAccountId, LegalTagUpdateDto body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling updateLegalTag(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLegalTagCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the LegalTag for the given &#39;name&#39;.
     * This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return LegalTagDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegalTagDto updateLegalTag(String osDUAccountId, LegalTagUpdateDto body, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<LegalTagDto> resp = updateLegalTagWithHttpInfo(osDUAccountId, body, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Updates the LegalTag for the given &#39;name&#39;.
     * This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return ApiResponse&lt;LegalTagDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegalTagDto> updateLegalTagWithHttpInfo(String osDUAccountId, LegalTagUpdateDto body, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = updateLegalTagValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<LegalTagDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the LegalTag for the given &#39;name&#39;. (asynchronously)
     * This allows to update certain properties of your LegalTag using the &#39;name&#39; associated with it.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLegalTagAsync(String osDUAccountId, LegalTagUpdateDto body, String osDUOnBehalfOf, final ApiCallback<LegalTagDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLegalTagValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegalTagDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateLegalTags
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateLegalTagsCall(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/legal/v1/legaltags:validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateLegalTagsValidateBeforeCall(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling validateLegalTags(Async)");
        }
        

        com.squareup.okhttp.Call call = validateLegalTagsCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the invalid LegalTag names with reasons for the given names.
     * This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return LegalTagInvalidResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegalTagInvalidResponseList validateLegalTags(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<LegalTagInvalidResponseList> resp = validateLegalTagsWithHttpInfo(osDUAccountId, body, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Retrieves the invalid LegalTag names with reasons for the given names.
     * This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @return ApiResponse&lt;LegalTagInvalidResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegalTagInvalidResponseList> validateLegalTagsWithHttpInfo(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = validateLegalTagsValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<LegalTagInvalidResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the invalid LegalTag names with reasons for the given names. (asynchronously)
     * This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
     * @param osDUAccountId Users account e.g. OSDU (required)
     * @param body  (optional)
     * @param osDUOnBehalfOf User&#39;s email or auth token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateLegalTagsAsync(String osDUAccountId, LegalTagRequest body, String osDUOnBehalfOf, final ApiCallback<LegalTagInvalidResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateLegalTagsValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegalTagInvalidResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
