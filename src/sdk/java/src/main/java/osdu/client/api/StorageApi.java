/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiCallback;
import osdu.client.ApiClient;
import osdu.client.ApiException;
import osdu.client.ApiResponse;
import osdu.client.Configuration;
import osdu.client.Pair;
import osdu.client.ProgressRequestBody;
import osdu.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import osdu.client.model.StorageBulkUpdateRecordsResponse;
import osdu.client.model.StorageDeleteRecordError;
import osdu.client.model.StorageErrorResponse;
import osdu.client.model.StorageMultiRecordIds;
import osdu.client.model.StorageQueryResponse;
import osdu.client.model.StorageRecord;
import osdu.client.model.StorageRecordBulkUpdateParam;
import osdu.client.model.StorageRecordData;
import osdu.client.model.StorageRecordVersions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient apiClient;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOrUpdateRecords
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param skipdupes Skip duplicates when updating records with the same value. (optional, default to true)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateRecordsCall(String osDUAccountId, Boolean skipdupes, List<StorageRecord> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/storage/v2/records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipdupes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipdupes", skipdupes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateRecordsValidateBeforeCall(String osDUAccountId, Boolean skipdupes, List<StorageRecord> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling createOrUpdateRecords(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrUpdateRecordsCall(osDUAccountId, skipdupes, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update records
     * The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param skipdupes Skip duplicates when updating records with the same value. (optional, default to true)
     * @param body  (optional)
     * @return StorageRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageRecord createOrUpdateRecords(String osDUAccountId, Boolean skipdupes, List<StorageRecord> body) throws ApiException {
        ApiResponse<StorageRecord> resp = createOrUpdateRecordsWithHttpInfo(osDUAccountId, skipdupes, body);
        return resp.getData();
    }

    /**
     * Create or update records
     * The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param skipdupes Skip duplicates when updating records with the same value. (optional, default to true)
     * @param body  (optional)
     * @return ApiResponse&lt;StorageRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageRecord> createOrUpdateRecordsWithHttpInfo(String osDUAccountId, Boolean skipdupes, List<StorageRecord> body) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateRecordsValidateBeforeCall(osDUAccountId, skipdupes, body, null, null);
        Type localVarReturnType = new TypeToken<StorageRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create or update records (asynchronously)
     * The API represents the main injection mechanism into the Data Lake. It allows records creation and/or update. When no record id is provided or when the provided id is not already present in the Data Lake then a new record is created. If the id is related to an existing record in the Data Lake then an update operation takes place and a new version of the record is created. Allowed roles: service.storage.creator and service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param skipdupes Skip duplicates when updating records with the same value. (optional, default to true)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateRecordsAsync(String osDUAccountId, Boolean skipdupes, List<StorageRecord> body, final ApiCallback<StorageRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateRecordsValidateBeforeCall(osDUAccountId, skipdupes, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRecord
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRecordCall(String id, String osDUAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/records/{id}:delete"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecordValidateBeforeCall(String id, String osDUAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRecord(Async)");
        }
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling deleteRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRecordCall(id, osDUAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete record
     * The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRecord(String id, String osDUAccountId) throws ApiException {
        deleteRecordWithHttpInfo(id, osDUAccountId);
    }

    /**
     * Delete record
     * The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRecordWithHttpInfo(String id, String osDUAccountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(id, osDUAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete record (asynchronously)
     * The API performs a logical deletion of the given record. This operation can be reverted later. Allowed roles: service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecordAsync(String id, String osDUAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(id, osDUAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRecords
     * @param dataPartitionId Partition Id (required)
     * @param partitionInfo partitionInfo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRecordsCall(String dataPartitionId, List<String> partitionInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = partitionInfo;

        // create path and map variables
        String localVarPath = "/api/storage/v2/records/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecordsValidateBeforeCall(String dataPartitionId, List<String> partitionInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteRecords(Async)");
        }
        
        // verify the required parameter 'partitionInfo' is set
        if (partitionInfo == null) {
            throw new ApiException("Missing the required parameter 'partitionInfo' when calling deleteRecords(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRecordsCall(dataPartitionId, partitionInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Soft delete of multiple records
     * The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     * @param dataPartitionId Partition Id (required)
     * @param partitionInfo partitionInfo (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRecords(String dataPartitionId, List<String> partitionInfo) throws ApiException {
        deleteRecordsWithHttpInfo(dataPartitionId, partitionInfo);
    }

    /**
     * Soft delete of multiple records
     * The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     * @param dataPartitionId Partition Id (required)
     * @param partitionInfo partitionInfo (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRecordsWithHttpInfo(String dataPartitionId, List<String> partitionInfo) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecordsValidateBeforeCall(dataPartitionId, partitionInfo, null, null);
        return apiClient.execute(call);
    }

    /**
     * Soft delete of multiple records (asynchronously)
     * The API performs a soft deletion of the given list of records. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     * @param dataPartitionId Partition Id (required)
     * @param partitionInfo partitionInfo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecordsAsync(String dataPartitionId, List<String> partitionInfo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecordsValidateBeforeCall(dataPartitionId, partitionInfo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for fetchRecords
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchRecordsCall(String osDUAccountId, StorageMultiRecordIds body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/storage/v2/query/records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchRecordsValidateBeforeCall(String osDUAccountId, StorageMultiRecordIds body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling fetchRecords(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchRecordsCall(osDUAccountId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch records
     * The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @return StorageMultiRecordIds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageMultiRecordIds fetchRecords(String osDUAccountId, StorageMultiRecordIds body) throws ApiException {
        ApiResponse<StorageMultiRecordIds> resp = fetchRecordsWithHttpInfo(osDUAccountId, body);
        return resp.getData();
    }

    /**
     * Fetch records
     * The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;StorageMultiRecordIds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageMultiRecordIds> fetchRecordsWithHttpInfo(String osDUAccountId, StorageMultiRecordIds body) throws ApiException {
        com.squareup.okhttp.Call call = fetchRecordsValidateBeforeCall(osDUAccountId, body, null, null);
        Type localVarReturnType = new TypeToken<StorageMultiRecordIds>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch records (asynchronously)
     * The API fetches multiple records at once. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchRecordsAsync(String osDUAccountId, StorageMultiRecordIds body, final ApiCallback<StorageMultiRecordIds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchRecordsValidateBeforeCall(osDUAccountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageMultiRecordIds>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllKinds
     * @param osDUAccountId Account ID is the active account account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllKindsCall(String osDUAccountId, String cursor, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/storage/v2/query/kinds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllKindsValidateBeforeCall(String osDUAccountId, String cursor, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling getAllKinds(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllKindsCall(osDUAccountId, cursor, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all kinds
     * The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
     * @param osDUAccountId Account ID is the active account account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @return StorageQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageQueryResponse getAllKinds(String osDUAccountId, String cursor, Integer limit) throws ApiException {
        ApiResponse<StorageQueryResponse> resp = getAllKindsWithHttpInfo(osDUAccountId, cursor, limit);
        return resp.getData();
    }

    /**
     * Get all kinds
     * The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
     * @param osDUAccountId Account ID is the active account account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @return ApiResponse&lt;StorageQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageQueryResponse> getAllKindsWithHttpInfo(String osDUAccountId, String cursor, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getAllKindsValidateBeforeCall(osDUAccountId, cursor, limit, null, null);
        Type localVarReturnType = new TypeToken<StorageQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all kinds (asynchronously)
     * The API returns a list of all kinds in the specific {Account-Id}. Allowed roles: service.storage.admin.
     * @param osDUAccountId Account ID is the active account account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllKindsAsync(String osDUAccountId, String cursor, Integer limit, final ApiCallback<StorageQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllKindsValidateBeforeCall(osDUAccountId, cursor, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllRecordFromKind
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @param kind Filter Kind (optional, default to tenant1:public:well:1.0.2)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllRecordFromKindCall(String osDUAccountId, String cursor, Integer limit, String kind, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/storage/v2/query/records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRecordFromKindValidateBeforeCall(String osDUAccountId, String cursor, Integer limit, String kind, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling getAllRecordFromKind(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllRecordFromKindCall(osDUAccountId, cursor, limit, kind, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all record from kind
     * The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @param kind Filter Kind (optional, default to tenant1:public:well:1.0.2)
     * @return StorageQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageQueryResponse getAllRecordFromKind(String osDUAccountId, String cursor, Integer limit, String kind) throws ApiException {
        ApiResponse<StorageQueryResponse> resp = getAllRecordFromKindWithHttpInfo(osDUAccountId, cursor, limit, kind);
        return resp.getData();
    }

    /**
     * Get all record from kind
     * The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @param kind Filter Kind (optional, default to tenant1:public:well:1.0.2)
     * @return ApiResponse&lt;StorageQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageQueryResponse> getAllRecordFromKindWithHttpInfo(String osDUAccountId, String cursor, Integer limit, String kind) throws ApiException {
        com.squareup.okhttp.Call call = getAllRecordFromKindValidateBeforeCall(osDUAccountId, cursor, limit, kind, null, null);
        Type localVarReturnType = new TypeToken<StorageQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all record from kind (asynchronously)
     * The API returns a list of all record ids which belong to the specified kind. Allowed roles: service.storage.admin.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param cursor Cursor (optional)
     * @param limit Page Size (optional, default to 10)
     * @param kind Filter Kind (optional, default to tenant1:public:well:1.0.2)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRecordFromKindAsync(String osDUAccountId, String cursor, Integer limit, String kind, final ApiCallback<StorageQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRecordFromKindValidateBeforeCall(osDUAccountId, cursor, limit, kind, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllRecordVersions
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllRecordVersionsCall(String id, String osDUAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/storage/v2/records/versions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRecordVersionsValidateBeforeCall(String id, String osDUAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAllRecordVersions(Async)");
        }
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling getAllRecordVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllRecordVersionsCall(id, osDUAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all record versions
     * The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @return StorageRecordVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageRecordVersions getAllRecordVersions(String id, String osDUAccountId) throws ApiException {
        ApiResponse<StorageRecordVersions> resp = getAllRecordVersionsWithHttpInfo(id, osDUAccountId);
        return resp.getData();
    }

    /**
     * Get all record versions
     * The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @return ApiResponse&lt;StorageRecordVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageRecordVersions> getAllRecordVersionsWithHttpInfo(String id, String osDUAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAllRecordVersionsValidateBeforeCall(id, osDUAccountId, null, null);
        Type localVarReturnType = new TypeToken<StorageRecordVersions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all record versions (asynchronously)
     * The API returns a list containing all versions for the given record id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRecordVersionsAsync(String id, String osDUAccountId, final ApiCallback<StorageRecordVersions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRecordVersionsValidateBeforeCall(id, osDUAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageRecordVersions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecord
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecordCall(String id, String osDUAccountId, List<String> attribute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/storage/v2/records/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (attribute != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "attribute", attribute));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecordValidateBeforeCall(String id, String osDUAccountId, List<String> attribute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecord(Async)");
        }
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling getRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecordCall(id, osDUAccountId, attribute, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get record
     * This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @return StorageRecordData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageRecordData getRecord(String id, String osDUAccountId, List<String> attribute) throws ApiException {
        ApiResponse<StorageRecordData> resp = getRecordWithHttpInfo(id, osDUAccountId, attribute);
        return resp.getData();
    }

    /**
     * Get record
     * This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @return ApiResponse&lt;StorageRecordData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageRecordData> getRecordWithHttpInfo(String id, String osDUAccountId, List<String> attribute) throws ApiException {
        com.squareup.okhttp.Call call = getRecordValidateBeforeCall(id, osDUAccountId, attribute, null, null);
        Type localVarReturnType = new TypeToken<StorageRecordData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get record (asynchronously)
     * This API returns the latest version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecordAsync(String id, String osDUAccountId, List<String> attribute, final ApiCallback<StorageRecordData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecordValidateBeforeCall(id, osDUAccountId, attribute, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageRecordData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecordVersion
     * @param id Record id (required)
     * @param version Record version (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecordVersionCall(String id, Long version, String osDUAccountId, List<String> attribute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/storage/v2/records/{id}/{version}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (attribute != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "attribute", attribute));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecordVersionValidateBeforeCall(String id, Long version, String osDUAccountId, List<String> attribute, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecordVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getRecordVersion(Async)");
        }
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling getRecordVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecordVersionCall(id, version, osDUAccountId, attribute, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get record version
     * The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param version Record version (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @return StorageRecordData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageRecordData getRecordVersion(String id, Long version, String osDUAccountId, List<String> attribute) throws ApiException {
        ApiResponse<StorageRecordData> resp = getRecordVersionWithHttpInfo(id, version, osDUAccountId, attribute);
        return resp.getData();
    }

    /**
     * Get record version
     * The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param version Record version (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @return ApiResponse&lt;StorageRecordData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageRecordData> getRecordVersionWithHttpInfo(String id, Long version, String osDUAccountId, List<String> attribute) throws ApiException {
        com.squareup.okhttp.Call call = getRecordVersionValidateBeforeCall(id, version, osDUAccountId, attribute, null, null);
        Type localVarReturnType = new TypeToken<StorageRecordData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get record version (asynchronously)
     * The API retrieves the specific version of the given record. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin.
     * @param id Record id (required)
     * @param version Record version (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param attribute Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecordVersionAsync(String id, Long version, String osDUAccountId, List<String> attribute, final ApiCallback<StorageRecordData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecordVersionValidateBeforeCall(id, version, osDUAccountId, attribute, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageRecordData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchUpdateRecords
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchUpdateRecordsCall(String osDUAccountId, List<StorageRecordBulkUpdateParam> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/storage/v2/records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchUpdateRecordsValidateBeforeCall(String osDUAccountId, List<StorageRecordBulkUpdateParam> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling patchUpdateRecords(Async)");
        }
        

        com.squareup.okhttp.Call call = patchUpdateRecordsCall(osDUAccountId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Modify record metadata attributes using patch operations
     * The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @return StorageBulkUpdateRecordsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageBulkUpdateRecordsResponse patchUpdateRecords(String osDUAccountId, List<StorageRecordBulkUpdateParam> body) throws ApiException {
        ApiResponse<StorageBulkUpdateRecordsResponse> resp = patchUpdateRecordsWithHttpInfo(osDUAccountId, body);
        return resp.getData();
    }

    /**
     * Modify record metadata attributes using patch operations
     * The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;StorageBulkUpdateRecordsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageBulkUpdateRecordsResponse> patchUpdateRecordsWithHttpInfo(String osDUAccountId, List<StorageRecordBulkUpdateParam> body) throws ApiException {
        com.squareup.okhttp.Call call = patchUpdateRecordsValidateBeforeCall(osDUAccountId, body, null, null);
        Type localVarReturnType = new TypeToken<StorageBulkUpdateRecordsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify record metadata attributes using patch operations (asynchronously)
     * The API represents the patch update mechanism for records. It allows updating multiple records in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags.  Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchUpdateRecordsAsync(String osDUAccountId, List<StorageRecordBulkUpdateParam> body, final ApiCallback<StorageBulkUpdateRecordsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchUpdateRecordsValidateBeforeCall(osDUAccountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageBulkUpdateRecordsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purgeRecord
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call purgeRecordCall(String id, String osDUAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/storage/v2/records/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purgeRecordValidateBeforeCall(String id, String osDUAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling purgeRecord(Async)");
        }
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling purgeRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = purgeRecordCall(id, osDUAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purge record
     * The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void purgeRecord(String id, String osDUAccountId) throws ApiException {
        purgeRecordWithHttpInfo(id, osDUAccountId);
    }

    /**
     * Purge record
     * The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> purgeRecordWithHttpInfo(String id, String osDUAccountId) throws ApiException {
        com.squareup.okhttp.Call call = purgeRecordValidateBeforeCall(id, osDUAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Purge record (asynchronously)
     * The API performs the physical deletion of the given record and all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin.
     * @param id Record id (required)
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call purgeRecordAsync(String id, String osDUAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purgeRecordValidateBeforeCall(id, osDUAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
