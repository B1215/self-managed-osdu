/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiCallback;
import osdu.client.ApiClient;
import osdu.client.ApiException;
import osdu.client.ApiResponse;
import osdu.client.Configuration;
import osdu.client.Pair;
import osdu.client.ProgressRequestBody;
import osdu.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import osdu.client.model.EntitlementGroupResponse;
import osdu.client.model.EntitlementMemberDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntitlementApi {
    private ApiClient apiClient;

    public EntitlementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntitlementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMemberUsingPOST
     * @param dataPartitionId Partition Name (required)
     * @param groupEmail group_email (required)
     * @param partitionInfo partitionInfo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMemberUsingPOSTCall(String dataPartitionId, String groupEmail, EntitlementMemberDto partitionInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = partitionInfo;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/groups/{group_email}/members"
            .replaceAll("\\{" + "group_email" + "\\}", apiClient.escapeString(groupEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMemberUsingPOSTValidateBeforeCall(String dataPartitionId, String groupEmail, EntitlementMemberDto partitionInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling addMemberUsingPOST(Async)");
        }
        
        // verify the required parameter 'groupEmail' is set
        if (groupEmail == null) {
            throw new ApiException("Missing the required parameter 'groupEmail' when calling addMemberUsingPOST(Async)");
        }
        
        // verify the required parameter 'partitionInfo' is set
        if (partitionInfo == null) {
            throw new ApiException("Missing the required parameter 'partitionInfo' when calling addMemberUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addMemberUsingPOSTCall(dataPartitionId, groupEmail, partitionInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add Member to Group
     * 
     * @param dataPartitionId Partition Name (required)
     * @param groupEmail group_email (required)
     * @param partitionInfo partitionInfo (required)
     * @return EntitlementMemberDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntitlementMemberDto addMemberUsingPOST(String dataPartitionId, String groupEmail, EntitlementMemberDto partitionInfo) throws ApiException {
        ApiResponse<EntitlementMemberDto> resp = addMemberUsingPOSTWithHttpInfo(dataPartitionId, groupEmail, partitionInfo);
        return resp.getData();
    }

    /**
     * Add Member to Group
     * 
     * @param dataPartitionId Partition Name (required)
     * @param groupEmail group_email (required)
     * @param partitionInfo partitionInfo (required)
     * @return ApiResponse&lt;EntitlementMemberDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntitlementMemberDto> addMemberUsingPOSTWithHttpInfo(String dataPartitionId, String groupEmail, EntitlementMemberDto partitionInfo) throws ApiException {
        com.squareup.okhttp.Call call = addMemberUsingPOSTValidateBeforeCall(dataPartitionId, groupEmail, partitionInfo, null, null);
        Type localVarReturnType = new TypeToken<EntitlementMemberDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Member to Group (asynchronously)
     * 
     * @param dataPartitionId Partition Name (required)
     * @param groupEmail group_email (required)
     * @param partitionInfo partitionInfo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMemberUsingPOSTAsync(String dataPartitionId, String groupEmail, EntitlementMemberDto partitionInfo, final ApiCallback<EntitlementMemberDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMemberUsingPOSTValidateBeforeCall(dataPartitionId, groupEmail, partitionInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntitlementMemberDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGroupUsingPOST
     * @param dataPartitionId Partition Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGroupUsingPOSTCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGroupUsingPOSTValidateBeforeCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling createGroupUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createGroupUsingPOSTCall(dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Group
     * 
     * @param dataPartitionId Partition Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createGroupUsingPOST(String dataPartitionId) throws ApiException {
        createGroupUsingPOSTWithHttpInfo(dataPartitionId);
    }

    /**
     * Create a Group
     * 
     * @param dataPartitionId Partition Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createGroupUsingPOSTWithHttpInfo(String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = createGroupUsingPOSTValidateBeforeCall(dataPartitionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a Group (asynchronously)
     * 
     * @param dataPartitionId Partition Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGroupUsingPOSTAsync(String dataPartitionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGroupUsingPOSTValidateBeforeCall(dataPartitionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGroupUsingDELETE
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGroupUsingDELETECall(String dataPartitionId, String groupEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/groups/{group_email}"
            .replaceAll("\\{" + "group_email" + "\\}", apiClient.escapeString(groupEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGroupUsingDELETEValidateBeforeCall(String dataPartitionId, String groupEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteGroupUsingDELETE(Async)");
        }
        
        // verify the required parameter 'groupEmail' is set
        if (groupEmail == null) {
            throw new ApiException("Missing the required parameter 'groupEmail' when calling deleteGroupUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGroupUsingDELETECall(dataPartitionId, groupEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Group
     * 
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGroupUsingDELETE(String dataPartitionId, String groupEmail) throws ApiException {
        deleteGroupUsingDELETEWithHttpInfo(dataPartitionId, groupEmail);
    }

    /**
     * Delete a Group
     * 
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGroupUsingDELETEWithHttpInfo(String dataPartitionId, String groupEmail) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupUsingDELETEValidateBeforeCall(dataPartitionId, groupEmail, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Group (asynchronously)
     * 
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupUsingDELETEAsync(String dataPartitionId, String groupEmail, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupUsingDELETEValidateBeforeCall(dataPartitionId, groupEmail, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMemberUsingDELETE
     * @param dataPartitionId Data Partition Id (required)
     * @param memberEmail member_email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMemberUsingDELETECall(String dataPartitionId, String memberEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/members/{member_email}"
            .replaceAll("\\{" + "member_email" + "\\}", apiClient.escapeString(memberEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMemberUsingDELETEValidateBeforeCall(String dataPartitionId, String memberEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteMemberUsingDELETE(Async)");
        }
        
        // verify the required parameter 'memberEmail' is set
        if (memberEmail == null) {
            throw new ApiException("Missing the required parameter 'memberEmail' when calling deleteMemberUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMemberUsingDELETECall(dataPartitionId, memberEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a User
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param memberEmail member_email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMemberUsingDELETE(String dataPartitionId, String memberEmail) throws ApiException {
        deleteMemberUsingDELETEWithHttpInfo(dataPartitionId, memberEmail);
    }

    /**
     * Delete a User
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param memberEmail member_email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMemberUsingDELETEWithHttpInfo(String dataPartitionId, String memberEmail) throws ApiException {
        com.squareup.okhttp.Call call = deleteMemberUsingDELETEValidateBeforeCall(dataPartitionId, memberEmail, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a User (asynchronously)
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param memberEmail member_email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMemberUsingDELETEAsync(String dataPartitionId, String memberEmail, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMemberUsingDELETEValidateBeforeCall(dataPartitionId, memberEmail, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMemberUsingDELETE1
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param memberEmail member_email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMemberUsingDELETE1Call(String dataPartitionId, String groupEmail, String memberEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/groups/{group_email}/members/{member_email}"
            .replaceAll("\\{" + "group_email" + "\\}", apiClient.escapeString(groupEmail.toString()))
            .replaceAll("\\{" + "member_email" + "\\}", apiClient.escapeString(memberEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMemberUsingDELETE1ValidateBeforeCall(String dataPartitionId, String groupEmail, String memberEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteMemberUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'groupEmail' is set
        if (groupEmail == null) {
            throw new ApiException("Missing the required parameter 'groupEmail' when calling deleteMemberUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'memberEmail' is set
        if (memberEmail == null) {
            throw new ApiException("Missing the required parameter 'memberEmail' when calling deleteMemberUsingDELETE1(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMemberUsingDELETE1Call(dataPartitionId, groupEmail, memberEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove Member from Group
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param memberEmail member_email (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteMemberUsingDELETE1(String dataPartitionId, String groupEmail, String memberEmail) throws ApiException {
        ApiResponse<String> resp = deleteMemberUsingDELETE1WithHttpInfo(dataPartitionId, groupEmail, memberEmail);
        return resp.getData();
    }

    /**
     * Remove Member from Group
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param memberEmail member_email (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteMemberUsingDELETE1WithHttpInfo(String dataPartitionId, String groupEmail, String memberEmail) throws ApiException {
        com.squareup.okhttp.Call call = deleteMemberUsingDELETE1ValidateBeforeCall(dataPartitionId, groupEmail, memberEmail, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Member from Group (asynchronously)
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param memberEmail member_email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMemberUsingDELETE1Async(String dataPartitionId, String groupEmail, String memberEmail, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMemberUsingDELETE1ValidateBeforeCall(dataPartitionId, groupEmail, memberEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listGroupMembersUsingGET
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param role role (optional)
     * @param includeType includeType (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGroupMembersUsingGETCall(String dataPartitionId, String groupEmail, String role, Boolean includeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/groups/{group_email}/members"
            .replaceAll("\\{" + "group_email" + "\\}", apiClient.escapeString(groupEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (includeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeType", includeType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGroupMembersUsingGETValidateBeforeCall(String dataPartitionId, String groupEmail, String role, Boolean includeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling listGroupMembersUsingGET(Async)");
        }
        
        // verify the required parameter 'groupEmail' is set
        if (groupEmail == null) {
            throw new ApiException("Missing the required parameter 'groupEmail' when calling listGroupMembersUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listGroupMembersUsingGETCall(dataPartitionId, groupEmail, role, includeType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Group Members
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param role role (optional)
     * @param includeType includeType (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listGroupMembersUsingGET(String dataPartitionId, String groupEmail, String role, Boolean includeType) throws ApiException {
        listGroupMembersUsingGETWithHttpInfo(dataPartitionId, groupEmail, role, includeType);
    }

    /**
     * List Group Members
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param role role (optional)
     * @param includeType includeType (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listGroupMembersUsingGETWithHttpInfo(String dataPartitionId, String groupEmail, String role, Boolean includeType) throws ApiException {
        com.squareup.okhttp.Call call = listGroupMembersUsingGETValidateBeforeCall(dataPartitionId, groupEmail, role, includeType, null, null);
        return apiClient.execute(call);
    }

    /**
     * List Group Members (asynchronously)
     * 
     * @param dataPartitionId Data Partition Id (required)
     * @param groupEmail group_email (required)
     * @param role role (optional)
     * @param includeType includeType (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGroupMembersUsingGETAsync(String dataPartitionId, String groupEmail, String role, Boolean includeType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGroupMembersUsingGETValidateBeforeCall(dataPartitionId, groupEmail, role, includeType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listGroupsOnBehalfOfUsingGET
     * @param dataPartitionId tenant (required)
     * @param memberEmail member_email (required)
     * @param type type (optional)
     * @param appid appid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGroupsOnBehalfOfUsingGETCall(String dataPartitionId, String memberEmail, String type, String appid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/members/{member_email}/groups"
            .replaceAll("\\{" + "member_email" + "\\}", apiClient.escapeString(memberEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (appid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appid", appid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGroupsOnBehalfOfUsingGETValidateBeforeCall(String dataPartitionId, String memberEmail, String type, String appid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling listGroupsOnBehalfOfUsingGET(Async)");
        }
        
        // verify the required parameter 'memberEmail' is set
        if (memberEmail == null) {
            throw new ApiException("Missing the required parameter 'memberEmail' when calling listGroupsOnBehalfOfUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listGroupsOnBehalfOfUsingGETCall(dataPartitionId, memberEmail, type, appid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Assigned Groups for User
     * 
     * @param dataPartitionId tenant (required)
     * @param memberEmail member_email (required)
     * @param type type (optional)
     * @param appid appid (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listGroupsOnBehalfOfUsingGET(String dataPartitionId, String memberEmail, String type, String appid) throws ApiException {
        listGroupsOnBehalfOfUsingGETWithHttpInfo(dataPartitionId, memberEmail, type, appid);
    }

    /**
     * List Assigned Groups for User
     * 
     * @param dataPartitionId tenant (required)
     * @param memberEmail member_email (required)
     * @param type type (optional)
     * @param appid appid (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listGroupsOnBehalfOfUsingGETWithHttpInfo(String dataPartitionId, String memberEmail, String type, String appid) throws ApiException {
        com.squareup.okhttp.Call call = listGroupsOnBehalfOfUsingGETValidateBeforeCall(dataPartitionId, memberEmail, type, appid, null, null);
        return apiClient.execute(call);
    }

    /**
     * List Assigned Groups for User (asynchronously)
     * 
     * @param dataPartitionId tenant (required)
     * @param memberEmail member_email (required)
     * @param type type (optional)
     * @param appid appid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGroupsOnBehalfOfUsingGETAsync(String dataPartitionId, String memberEmail, String type, String appid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGroupsOnBehalfOfUsingGETValidateBeforeCall(dataPartitionId, memberEmail, type, appid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listGroupsUsingGET
     * @param dataPartitionId tenant (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGroupsUsingGETCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGroupsUsingGETValidateBeforeCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling listGroupsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listGroupsUsingGETCall(dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Assigned Groups
     * 
     * @param dataPartitionId tenant (required)
     * @return EntitlementGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntitlementGroupResponse listGroupsUsingGET(String dataPartitionId) throws ApiException {
        ApiResponse<EntitlementGroupResponse> resp = listGroupsUsingGETWithHttpInfo(dataPartitionId);
        return resp.getData();
    }

    /**
     * List Assigned Groups
     * 
     * @param dataPartitionId tenant (required)
     * @return ApiResponse&lt;EntitlementGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntitlementGroupResponse> listGroupsUsingGETWithHttpInfo(String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = listGroupsUsingGETValidateBeforeCall(dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<EntitlementGroupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Assigned Groups (asynchronously)
     * 
     * @param dataPartitionId tenant (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGroupsUsingGETAsync(String dataPartitionId, final ApiCallback<EntitlementGroupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGroupsUsingGETValidateBeforeCall(dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntitlementGroupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGroupUsingPATCH
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGroupUsingPATCHCall(String dataPartitionId, String groupEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/entitlements/v2/groups/{group_email}"
            .replaceAll("\\{" + "group_email" + "\\}", apiClient.escapeString(groupEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGroupUsingPATCHValidateBeforeCall(String dataPartitionId, String groupEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling updateGroupUsingPATCH(Async)");
        }
        
        // verify the required parameter 'groupEmail' is set
        if (groupEmail == null) {
            throw new ApiException("Missing the required parameter 'groupEmail' when calling updateGroupUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGroupUsingPATCHCall(dataPartitionId, groupEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates Items in Group
     * 
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateGroupUsingPATCH(String dataPartitionId, String groupEmail) throws ApiException {
        updateGroupUsingPATCHWithHttpInfo(dataPartitionId, groupEmail);
    }

    /**
     * Updates Items in Group
     * 
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateGroupUsingPATCHWithHttpInfo(String dataPartitionId, String groupEmail) throws ApiException {
        com.squareup.okhttp.Call call = updateGroupUsingPATCHValidateBeforeCall(dataPartitionId, groupEmail, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates Items in Group (asynchronously)
     * 
     * @param dataPartitionId tenant (required)
     * @param groupEmail group_email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGroupUsingPATCHAsync(String dataPartitionId, String groupEmail, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGroupUsingPATCHValidateBeforeCall(dataPartitionId, groupEmail, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
