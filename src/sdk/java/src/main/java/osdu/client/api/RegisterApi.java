/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package osdu.client.api;

import osdu.client.ApiCallback;
import osdu.client.ApiClient;
import osdu.client.ApiException;
import osdu.client.ApiResponse;
import osdu.client.Configuration;
import osdu.client.Pair;
import osdu.client.ProgressRequestBody;
import osdu.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import osdu.client.model.RegisterAction;
import osdu.client.model.RegisterAppError;
import osdu.client.model.RegisterCreateAction;
import osdu.client.model.RegisterDdms;
import osdu.client.model.RegisterGetSubscriptionResult;
import osdu.client.model.RegisterRecord;
import osdu.client.model.RegisterSecret;
import osdu.client.model.RegisterSubscription;
import osdu.client.model.RegisterSubscriptionCreateResult;
import osdu.client.model.RegisterTestAction;
import osdu.client.model.RegisterTestActionResult;
import osdu.client.model.RegisterTopic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegisterApi {
    private ApiClient apiClient;

    public RegisterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegisterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createADDMSRegistration
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createADDMSRegistrationCall(String dataPartitionId, RegisterDdms body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/register/v1/ddms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createADDMSRegistrationValidateBeforeCall(String dataPartitionId, RegisterDdms body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling createADDMSRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = createADDMSRegistrationCall(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a DDMS registration
     * Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return RegisterDdms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterDdms createADDMSRegistration(String dataPartitionId, RegisterDdms body) throws ApiException {
        ApiResponse<RegisterDdms> resp = createADDMSRegistrationWithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Create a DDMS registration
     * Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;RegisterDdms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterDdms> createADDMSRegistrationWithHttpInfo(String dataPartitionId, RegisterDdms body) throws ApiException {
        com.squareup.okhttp.Call call = createADDMSRegistrationValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<RegisterDdms>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a DDMS registration (asynchronously)
     * Create a DDMS registration using an OpenApi spec V3 document. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createADDMSRegistrationAsync(String dataPartitionId, RegisterDdms body, final ApiCallback<RegisterDdms> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createADDMSRegistrationValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterDdms>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createASubscription
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createASubscriptionCall(String dataPartitionId, RegisterSubscription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/register/v1/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createASubscriptionValidateBeforeCall(String dataPartitionId, RegisterSubscription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling createASubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = createASubscriptionCall(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a subscription
     * Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return RegisterSubscriptionCreateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterSubscriptionCreateResult createASubscription(String dataPartitionId, RegisterSubscription body) throws ApiException {
        ApiResponse<RegisterSubscriptionCreateResult> resp = createASubscriptionWithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Create a subscription
     * Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;RegisterSubscriptionCreateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterSubscriptionCreateResult> createASubscriptionWithHttpInfo(String dataPartitionId, RegisterSubscription body) throws ApiException {
        com.squareup.okhttp.Call call = createASubscriptionValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<RegisterSubscriptionCreateResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a subscription (asynchronously)
     * Create a subscription. Required roles: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createASubscriptionAsync(String dataPartitionId, RegisterSubscription body, final ApiCallback<RegisterSubscriptionCreateResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createASubscriptionValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterSubscriptionCreateResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAnActionRegistration
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAnActionRegistrationCall(String dataPartitionId, RegisterCreateAction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/register/v1/action";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAnActionRegistrationValidateBeforeCall(String dataPartitionId, RegisterCreateAction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling createAnActionRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = createAnActionRegistrationCall(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an action registration
     * Create an action registration. Required role: &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return RegisterAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterAction createAnActionRegistration(String dataPartitionId, RegisterCreateAction body) throws ApiException {
        ApiResponse<RegisterAction> resp = createAnActionRegistrationWithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Create an action registration
     * Create an action registration. Required role: &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;RegisterAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterAction> createAnActionRegistrationWithHttpInfo(String dataPartitionId, RegisterCreateAction body) throws ApiException {
        com.squareup.okhttp.Call call = createAnActionRegistrationValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<RegisterAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an action registration (asynchronously)
     * Create an action registration. Required role: &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAnActionRegistrationAsync(String dataPartitionId, RegisterCreateAction body, final ApiCallback<RegisterAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAnActionRegistrationValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteADDMSRegistration
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteADDMSRegistrationCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/ddms/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteADDMSRegistrationValidateBeforeCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteADDMSRegistration(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteADDMSRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteADDMSRegistrationCall(id, dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a DDMS registration
     * Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteADDMSRegistration(String id, String dataPartitionId) throws ApiException {
        deleteADDMSRegistrationWithHttpInfo(id, dataPartitionId);
    }

    /**
     * Delete a DDMS registration
     * Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteADDMSRegistrationWithHttpInfo(String id, String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteADDMSRegistrationValidateBeforeCall(id, dataPartitionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a DDMS registration (asynchronously)
     * Delete a DDMS registration with the given id. Required roles: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteADDMSRegistrationAsync(String id, String dataPartitionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteADDMSRegistrationValidateBeforeCall(id, dataPartitionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteASubscriptionById
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteASubscriptionByIdCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/subscription/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteASubscriptionByIdValidateBeforeCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteASubscriptionById(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteASubscriptionById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteASubscriptionByIdCall(id, dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a subscription
     * Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteASubscriptionById(String id, String dataPartitionId) throws ApiException {
        deleteASubscriptionByIdWithHttpInfo(id, dataPartitionId);
    }

    /**
     * Delete a subscription
     * Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteASubscriptionByIdWithHttpInfo(String id, String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteASubscriptionByIdValidateBeforeCall(id, dataPartitionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a subscription (asynchronously)
     * Delete a subscription with its Id. Required role: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteASubscriptionByIdAsync(String id, String dataPartitionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteASubscriptionByIdValidateBeforeCall(id, dataPartitionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAnActionRegistration
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnActionRegistrationCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/action/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAnActionRegistrationValidateBeforeCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAnActionRegistration(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deleteAnActionRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAnActionRegistrationCall(id, dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an action  registration
     * Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAnActionRegistration(String id, String dataPartitionId) throws ApiException {
        deleteAnActionRegistrationWithHttpInfo(id, dataPartitionId);
    }

    /**
     * Delete an action  registration
     * Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAnActionRegistrationWithHttpInfo(String id, String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnActionRegistrationValidateBeforeCall(id, dataPartitionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an action  registration (asynchronously)
     * Delete an action registration with the given id. Required role: &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnActionRegistrationAsync(String id, String dataPartitionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnActionRegistrationValidateBeforeCall(id, dataPartitionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getADDMSRegistration
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getADDMSRegistrationCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/ddms/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getADDMSRegistrationValidateBeforeCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getADDMSRegistration(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getADDMSRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = getADDMSRegistrationCall(id, dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a DDMS registration
     * Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return RegisterDdms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterDdms getADDMSRegistration(String id, String dataPartitionId) throws ApiException {
        ApiResponse<RegisterDdms> resp = getADDMSRegistrationWithHttpInfo(id, dataPartitionId);
        return resp.getData();
    }

    /**
     * Get a DDMS registration
     * Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;RegisterDdms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterDdms> getADDMSRegistrationWithHttpInfo(String id, String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = getADDMSRegistrationValidateBeforeCall(id, dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<RegisterDdms>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a DDMS registration (asynchronously)
     * Get a DDMS registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getADDMSRegistrationAsync(String id, String dataPartitionId, final ApiCallback<RegisterDdms> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getADDMSRegistrationValidateBeforeCall(id, dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterDdms>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getASubscriptionById
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getASubscriptionByIdCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/subscription/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getASubscriptionByIdValidateBeforeCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getASubscriptionById(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getASubscriptionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getASubscriptionByIdCall(id, dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a subscription
     * Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return RegisterGetSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterGetSubscriptionResult getASubscriptionById(String id, String dataPartitionId) throws ApiException {
        ApiResponse<RegisterGetSubscriptionResult> resp = getASubscriptionByIdWithHttpInfo(id, dataPartitionId);
        return resp.getData();
    }

    /**
     * Get a subscription
     * Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;RegisterGetSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterGetSubscriptionResult> getASubscriptionByIdWithHttpInfo(String id, String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = getASubscriptionByIdValidateBeforeCall(id, dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<RegisterGetSubscriptionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a subscription (asynchronously)
     * Get a subscription with its Id. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getASubscriptionByIdAsync(String id, String dataPartitionId, final ApiCallback<RegisterGetSubscriptionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getASubscriptionByIdValidateBeforeCall(id, dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterGetSubscriptionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnActionRegistration
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnActionRegistrationCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/action/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnActionRegistrationValidateBeforeCall(String id, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnActionRegistration(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getAnActionRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = getAnActionRegistrationCall(id, dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an action registration
     * Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return RegisterAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterAction getAnActionRegistration(String id, String dataPartitionId) throws ApiException {
        ApiResponse<RegisterAction> resp = getAnActionRegistrationWithHttpInfo(id, dataPartitionId);
        return resp.getData();
    }

    /**
     * Get an action registration
     * Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;RegisterAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterAction> getAnActionRegistrationWithHttpInfo(String id, String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = getAnActionRegistrationValidateBeforeCall(id, dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<RegisterAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an action registration (asynchronously)
     * Get an action registration with the given id. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnActionRegistrationAsync(String id, String dataPartitionId, final ApiCallback<RegisterAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnActionRegistrationValidateBeforeCall(id, dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllTopics
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllTopicsCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/topics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllTopicsValidateBeforeCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling listAllTopics(Async)");
        }
        

        com.squareup.okhttp.Call call = listAllTopicsCall(dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all topics
     * List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return List&lt;RegisterTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RegisterTopic> listAllTopics(String dataPartitionId) throws ApiException {
        ApiResponse<List<RegisterTopic>> resp = listAllTopicsWithHttpInfo(dataPartitionId);
        return resp.getData();
    }

    /**
     * List all topics
     * List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;List&lt;RegisterTopic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RegisterTopic>> listAllTopicsWithHttpInfo(String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = listAllTopicsValidateBeforeCall(dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<List<RegisterTopic>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all topics (asynchronously)
     * List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllTopicsAsync(String dataPartitionId, final ApiCallback<List<RegisterTopic>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllTopicsValidateBeforeCall(dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RegisterTopic>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryADDMSRegistration
     * @param type  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryADDMSRegistrationCall(String type, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/register/v1/ddms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryADDMSRegistrationValidateBeforeCall(String type, String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling queryADDMSRegistration(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling queryADDMSRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = queryADDMSRegistrationCall(type, dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query for DDMS registrations
     * Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param type  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return List&lt;RegisterDdms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RegisterDdms> queryADDMSRegistration(String type, String dataPartitionId) throws ApiException {
        ApiResponse<List<RegisterDdms>> resp = queryADDMSRegistrationWithHttpInfo(type, dataPartitionId);
        return resp.getData();
    }

    /**
     * Query for DDMS registrations
     * Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param type  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @return ApiResponse&lt;List&lt;RegisterDdms&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RegisterDdms>> queryADDMSRegistrationWithHttpInfo(String type, String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = queryADDMSRegistrationValidateBeforeCall(type, dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<List<RegisterDdms>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query for DDMS registrations (asynchronously)
     * Query for DDMS registrations allowing retrievals by type. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param type  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryADDMSRegistrationAsync(String type, String dataPartitionId, final ApiCallback<List<RegisterDdms>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryADDMSRegistrationValidateBeforeCall(type, dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RegisterDdms>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveAnActionRegistration
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body The Record to find matching actions for and apply the template for. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveAnActionRegistrationCall(String dataPartitionId, RegisterRecord body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/register/v1/action:retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveAnActionRegistrationValidateBeforeCall(String dataPartitionId, RegisterRecord body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling retrieveAnActionRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveAnActionRegistrationCall(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query for action registrations and substitutes any action with the given parameters
     * Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body The Record to find matching actions for and apply the template for. (optional)
     * @return List&lt;RegisterAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RegisterAction> retrieveAnActionRegistration(String dataPartitionId, RegisterRecord body) throws ApiException {
        ApiResponse<List<RegisterAction>> resp = retrieveAnActionRegistrationWithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Query for action registrations and substitutes any action with the given parameters
     * Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body The Record to find matching actions for and apply the template for. (optional)
     * @return ApiResponse&lt;List&lt;RegisterAction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RegisterAction>> retrieveAnActionRegistrationWithHttpInfo(String dataPartitionId, RegisterRecord body) throws ApiException {
        com.squareup.okhttp.Call call = retrieveAnActionRegistrationValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<List<RegisterAction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query for action registrations and substitutes any action with the given parameters (asynchronously)
     * Retrieve an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body The Record to find matching actions for and apply the template for. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveAnActionRegistrationAsync(String dataPartitionId, RegisterRecord body, final ApiCallback<List<RegisterAction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveAnActionRegistrationValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RegisterAction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for testAnActionRegistration
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call testAnActionRegistrationCall(String dataPartitionId, RegisterTestAction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/register/v1/action:test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testAnActionRegistrationValidateBeforeCall(String dataPartitionId, RegisterTestAction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling testAnActionRegistration(Async)");
        }
        

        com.squareup.okhttp.Call call = testAnActionRegistrationCall(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Test an action registration
     * Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return RegisterTestActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterTestActionResult testAnActionRegistration(String dataPartitionId, RegisterTestAction body) throws ApiException {
        ApiResponse<RegisterTestActionResult> resp = testAnActionRegistrationWithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Test an action registration
     * Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;RegisterTestActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterTestActionResult> testAnActionRegistrationWithHttpInfo(String dataPartitionId, RegisterTestAction body) throws ApiException {
        com.squareup.okhttp.Call call = testAnActionRegistrationValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<RegisterTestActionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test an action registration (asynchronously)
     * Test an action registration. Required roles: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call testAnActionRegistrationAsync(String dataPartitionId, RegisterTestAction body, final ApiCallback<RegisterTestActionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testAnActionRegistrationValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterTestActionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSecretForSubscription
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSecretForSubscriptionCall(String id, String dataPartitionId, RegisterSecret body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/register/v1/subscription/{id}/secret"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSecretForSubscriptionValidateBeforeCall(String id, String dataPartitionId, RegisterSecret body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSecretForSubscription(Async)");
        }
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling updateSecretForSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSecretForSubscriptionCall(id, dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update secret for subscription
     * Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSecretForSubscription(String id, String dataPartitionId, RegisterSecret body) throws ApiException {
        updateSecretForSubscriptionWithHttpInfo(id, dataPartitionId, body);
    }

    /**
     * Update secret for subscription
     * Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSecretForSubscriptionWithHttpInfo(String id, String dataPartitionId, RegisterSecret body) throws ApiException {
        com.squareup.okhttp.Call call = updateSecretForSubscriptionValidateBeforeCall(id, dataPartitionId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update secret for subscription (asynchronously)
     * Update secret for a subscription. Required role: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39;
     * @param id  (required)
     * @param dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSecretForSubscriptionAsync(String id, String dataPartitionId, RegisterSecret body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSecretForSubscriptionValidateBeforeCall(id, dataPartitionId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
