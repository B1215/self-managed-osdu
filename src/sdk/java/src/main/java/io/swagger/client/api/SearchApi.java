/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SearchAppError;
import io.swagger.client.model.SearchCursorQueryRequest;
import io.swagger.client.model.SearchCursorQueryResponse;
import io.swagger.client.model.SearchQueryRequest;
import io.swagger.client.model.SearchQueryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient apiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteIndex
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIndexCall(String osDUAccountId, String kind, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/search/v2/index/{kind}"
            .replaceAll("\\{" + "kind" + "\\}", apiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIndexValidateBeforeCall(String osDUAccountId, String kind, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling deleteIndex(Async)");
        }
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling deleteIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteIndexCall(osDUAccountId, kind, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes all documents from index for given &#39;kind&#39;.
     * The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIndex(String osDUAccountId, String kind, String osDUOnBehalfOf) throws ApiException {
        deleteIndexWithHttpInfo(osDUAccountId, kind, osDUOnBehalfOf);
    }

    /**
     * Deletes all documents from index for given &#39;kind&#39;.
     * The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIndexWithHttpInfo(String osDUAccountId, String kind, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = deleteIndexValidateBeforeCall(osDUAccountId, kind, osDUOnBehalfOf, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes all documents from index for given &#39;kind&#39;. (asynchronously)
     * The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIndexAsync(String osDUAccountId, String kind, String osDUOnBehalfOf, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIndexValidateBeforeCall(osDUAccountId, kind, osDUOnBehalfOf, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getKindSchema
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKindSchemaCall(String osDUAccountId, String kind, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/search/v2/index/schema/{kind}"
            .replaceAll("\\{" + "kind" + "\\}", apiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKindSchemaValidateBeforeCall(String osDUAccountId, String kind, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling getKindSchema(Async)");
        }
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling getKindSchema(Async)");
        }
        

        com.squareup.okhttp.Call call = getKindSchemaCall(osDUAccountId, kind, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the index schema for given &#39;kind&#39;.
     * The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getKindSchema(String osDUAccountId, String kind, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<String> resp = getKindSchemaWithHttpInfo(osDUAccountId, kind, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Returns the index schema for given &#39;kind&#39;.
     * The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getKindSchemaWithHttpInfo(String osDUAccountId, String kind, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = getKindSchemaValidateBeforeCall(osDUAccountId, kind, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the index schema for given &#39;kind&#39;. (asynchronously)
     * The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param kind Kind of the record. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKindSchemaAsync(String osDUAccountId, String kind, String osDUOnBehalfOf, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKindSchemaValidateBeforeCall(osDUAccountId, kind, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryRecords
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryRecordsCall(String osDUAccountId, SearchQueryRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/search/v2/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryRecordsValidateBeforeCall(String osDUAccountId, SearchQueryRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling queryRecords(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryRecords(Async)");
        }
        

        com.squareup.okhttp.Call call = queryRecordsCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries the index for the specified kind using the input query string.
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @return SearchQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchQueryResponse queryRecords(String osDUAccountId, SearchQueryRequest body, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<SearchQueryResponse> resp = queryRecordsWithHttpInfo(osDUAccountId, body, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Queries the index for the specified kind using the input query string.
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @return ApiResponse&lt;SearchQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchQueryResponse> queryRecordsWithHttpInfo(String osDUAccountId, SearchQueryRequest body, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = queryRecordsValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<SearchQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries the index for the specified kind using the input query string. (asynchronously)
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryRecordsAsync(String osDUAccountId, SearchQueryRequest body, String osDUOnBehalfOf, final ApiCallback<SearchQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryRecordsValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryWithCursor
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryWithCursorCall(String osDUAccountId, SearchCursorQueryRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/search/v2/query_with_cursor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (osDUAccountId != null)
        localVarHeaderParams.put("OSDU-Account-Id", apiClient.parameterToString(osDUAccountId));
        if (osDUOnBehalfOf != null)
        localVarHeaderParams.put("OSDU-On-Behalf-Of", apiClient.parameterToString(osDUOnBehalfOf));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryWithCursorValidateBeforeCall(String osDUAccountId, SearchCursorQueryRequest body, String osDUOnBehalfOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'osDUAccountId' is set
        if (osDUAccountId == null) {
            throw new ApiException("Missing the required parameter 'osDUAccountId' when calling queryWithCursor(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryWithCursor(Async)");
        }
        

        com.squareup.okhttp.Call call = queryWithCursorCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query the index using cursor and optionally return only requested fields.
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @return SearchCursorQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchCursorQueryResponse queryWithCursor(String osDUAccountId, SearchCursorQueryRequest body, String osDUOnBehalfOf) throws ApiException {
        ApiResponse<SearchCursorQueryResponse> resp = queryWithCursorWithHttpInfo(osDUAccountId, body, osDUOnBehalfOf);
        return resp.getData();
    }

    /**
     * Query the index using cursor and optionally return only requested fields.
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @return ApiResponse&lt;SearchCursorQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchCursorQueryResponse> queryWithCursorWithHttpInfo(String osDUAccountId, SearchCursorQueryRequest body, String osDUOnBehalfOf) throws ApiException {
        com.squareup.okhttp.Call call = queryWithCursorValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, null, null);
        Type localVarReturnType = new TypeToken<SearchCursorQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query the index using cursor and optionally return only requested fields. (asynchronously)
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.
     * @param osDUAccountId Account ID is the active OSDU account (OSDU account or customer&#39;s account) which the users choose to use with the Search API. (required)
     * @param body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly. (required)
     * @param osDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryWithCursorAsync(String osDUAccountId, SearchCursorQueryRequest body, String osDUOnBehalfOf, final ApiCallback<SearchCursorQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryWithCursorValidateBeforeCall(osDUAccountId, body, osDUOnBehalfOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchCursorQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
