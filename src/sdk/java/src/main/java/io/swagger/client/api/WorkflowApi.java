/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Workflow;
import io.swagger.client.model.WorkflowError;
import io.swagger.client.model.WorkflowRun;
import io.swagger.client.model.WorkflowTriggerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkflowApi {
    private ApiClient apiClient;

    public WorkflowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteWorkflow
     * @param workflowName Unique Name of the Workflow to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWorkflowCall(String workflowName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow/{workflow_name}"
            .replaceAll("\\{" + "workflow_name" + "\\}", apiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWorkflowValidateBeforeCall(String workflowName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling deleteWorkflow(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWorkflowCall(workflowName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a workflow defintion.
     * Delete a workflow by it&#39;s name.
     * @param workflowName Unique Name of the Workflow to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWorkflow(String workflowName) throws ApiException {
        deleteWorkflowWithHttpInfo(workflowName);
    }

    /**
     * Delete a workflow defintion.
     * Delete a workflow by it&#39;s name.
     * @param workflowName Unique Name of the Workflow to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWorkflowWithHttpInfo(String workflowName) throws ApiException {
        com.squareup.okhttp.Call call = deleteWorkflowValidateBeforeCall(workflowName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a workflow defintion. (asynchronously)
     * Delete a workflow by it&#39;s name.
     * @param workflowName Unique Name of the Workflow to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWorkflowAsync(String workflowName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWorkflowValidateBeforeCall(workflowName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deployWorkflow
     * @param body Request payload for deploying new workflow. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployWorkflowCall(Workflow body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployWorkflowValidateBeforeCall(Workflow body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deployWorkflowCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates workflow definition with standard orchestrator operators.
     * API to create a new workflow using standard operators of orchestrator.
     * @param body Request payload for deploying new workflow. (optional)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Workflow deployWorkflow(Workflow body) throws ApiException {
        ApiResponse<Workflow> resp = deployWorkflowWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates workflow definition with standard orchestrator operators.
     * API to create a new workflow using standard operators of orchestrator.
     * @param body Request payload for deploying new workflow. (optional)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Workflow> deployWorkflowWithHttpInfo(Workflow body) throws ApiException {
        com.squareup.okhttp.Call call = deployWorkflowValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates workflow definition with standard orchestrator operators. (asynchronously)
     * API to create a new workflow using standard operators of orchestrator.
     * @param body Request payload for deploying new workflow. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployWorkflowAsync(Workflow body, final ApiCallback<Workflow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployWorkflowValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllWorkflowRuns
     * @param workflowName Unique Name of the Workflow for which the execution details has to be fetched. (required)
     * @param prefix A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)
     * @param startDate The start date where this call should start creating workflow runs from (inclusive) (optional)
     * @param endDate The end date where this call should stop creating workflow runs at (inclusive) (optional)
     * @param limit The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)
     * @param cursor Cursor for subsequent request. (optional)
     * @param partial Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)
     * @param conf JSON configuration added to the Workflow run conf attribute (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllWorkflowRunsCall(String workflowName, String prefix, String startDate, Boolean endDate, Integer limit, String cursor, Boolean partial, String conf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun"
            .replaceAll("\\{" + "workflow_name" + "\\}", apiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (partial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partial", partial));
        if (conf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("conf", conf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllWorkflowRunsValidateBeforeCall(String workflowName, String prefix, String startDate, Boolean endDate, Integer limit, String cursor, Boolean partial, String conf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getAllWorkflowRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllWorkflowRunsCall(workflowName, prefix, startDate, endDate, limit, cursor, partial, conf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all run instances of a workflow.
     * Get all run instances for a worflow.
     * @param workflowName Unique Name of the Workflow for which the execution details has to be fetched. (required)
     * @param prefix A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)
     * @param startDate The start date where this call should start creating workflow runs from (inclusive) (optional)
     * @param endDate The end date where this call should stop creating workflow runs at (inclusive) (optional)
     * @param limit The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)
     * @param cursor Cursor for subsequent request. (optional)
     * @param partial Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)
     * @param conf JSON configuration added to the Workflow run conf attribute (optional)
     * @return List&lt;WorkflowRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WorkflowRun> getAllWorkflowRuns(String workflowName, String prefix, String startDate, Boolean endDate, Integer limit, String cursor, Boolean partial, String conf) throws ApiException {
        ApiResponse<List<WorkflowRun>> resp = getAllWorkflowRunsWithHttpInfo(workflowName, prefix, startDate, endDate, limit, cursor, partial, conf);
        return resp.getData();
    }

    /**
     * Get all run instances of a workflow.
     * Get all run instances for a worflow.
     * @param workflowName Unique Name of the Workflow for which the execution details has to be fetched. (required)
     * @param prefix A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)
     * @param startDate The start date where this call should start creating workflow runs from (inclusive) (optional)
     * @param endDate The end date where this call should stop creating workflow runs at (inclusive) (optional)
     * @param limit The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)
     * @param cursor Cursor for subsequent request. (optional)
     * @param partial Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)
     * @param conf JSON configuration added to the Workflow run conf attribute (optional)
     * @return ApiResponse&lt;List&lt;WorkflowRun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WorkflowRun>> getAllWorkflowRunsWithHttpInfo(String workflowName, String prefix, String startDate, Boolean endDate, Integer limit, String cursor, Boolean partial, String conf) throws ApiException {
        com.squareup.okhttp.Call call = getAllWorkflowRunsValidateBeforeCall(workflowName, prefix, startDate, endDate, limit, cursor, partial, conf, null, null);
        Type localVarReturnType = new TypeToken<List<WorkflowRun>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all run instances of a workflow. (asynchronously)
     * Get all run instances for a worflow.
     * @param workflowName Unique Name of the Workflow for which the execution details has to be fetched. (required)
     * @param prefix A prefix used when generating the runId of the workflow run. Prefix cannot contain the word \&quot;backfill\&quot; (optional)
     * @param startDate The start date where this call should start creating workflow runs from (inclusive) (optional)
     * @param endDate The end date where this call should stop creating workflow runs at (inclusive) (optional)
     * @param limit The maximum number of workflow runs to create in a single request. Maximum is 500. (optional)
     * @param cursor Cursor for subsequent request. (optional)
     * @param partial Whether or not a partial batch can be created. If true, and the number of workflow runs that would be created between the start and end exceeds the limit, no workflow runs will be created. (optional)
     * @param conf JSON configuration added to the Workflow run conf attribute (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllWorkflowRunsAsync(String workflowName, String prefix, String startDate, Boolean endDate, Integer limit, String cursor, Boolean partial, String conf, final ApiCallback<List<WorkflowRun>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllWorkflowRunsValidateBeforeCall(workflowName, prefix, startDate, endDate, limit, cursor, partial, conf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WorkflowRun>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorkflowRun
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkflowRunCall(String workflowName, String runId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}"
            .replaceAll("\\{" + "workflow_name" + "\\}", apiClient.escapeString(workflowName.toString()))
            .replaceAll("\\{" + "runId" + "\\}", apiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkflowRunValidateBeforeCall(String workflowName, String runId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getWorkflowRun(Async)");
        }
        
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getWorkflowRun(Async)");
        }
        

        com.squareup.okhttp.Call call = getWorkflowRunCall(workflowName, runId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get details for a speciffic workflow run instance.
     * Get an execution instances for a workflow.
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @return WorkflowRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkflowRun getWorkflowRun(String workflowName, String runId) throws ApiException {
        ApiResponse<WorkflowRun> resp = getWorkflowRunWithHttpInfo(workflowName, runId);
        return resp.getData();
    }

    /**
     * Get details for a speciffic workflow run instance.
     * Get an execution instances for a workflow.
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @return ApiResponse&lt;WorkflowRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkflowRun> getWorkflowRunWithHttpInfo(String workflowName, String runId) throws ApiException {
        com.squareup.okhttp.Call call = getWorkflowRunValidateBeforeCall(workflowName, runId, null, null);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details for a speciffic workflow run instance. (asynchronously)
     * Get an execution instances for a workflow.
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkflowRunAsync(String workflowName, String runId, final ApiCallback<WorkflowRun> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkflowRunValidateBeforeCall(workflowName, runId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllWorkflow
     * @param prefix Filter workflow names which start with  the full prefix specified. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllWorkflowCall(String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllWorkflowValidateBeforeCall(String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAllWorkflowCall(prefix, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all the workflow applicable for a tenant.
     * List all the workflows for the tenant.
     * @param prefix Filter workflow names which start with  the full prefix specified. (optional)
     * @return List&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Workflow> listAllWorkflow(String prefix) throws ApiException {
        ApiResponse<List<Workflow>> resp = listAllWorkflowWithHttpInfo(prefix);
        return resp.getData();
    }

    /**
     * List all the workflow applicable for a tenant.
     * List all the workflows for the tenant.
     * @param prefix Filter workflow names which start with  the full prefix specified. (optional)
     * @return ApiResponse&lt;List&lt;Workflow&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Workflow>> listAllWorkflowWithHttpInfo(String prefix) throws ApiException {
        com.squareup.okhttp.Call call = listAllWorkflowValidateBeforeCall(prefix, null, null);
        Type localVarReturnType = new TypeToken<List<Workflow>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all the workflow applicable for a tenant. (asynchronously)
     * List all the workflows for the tenant.
     * @param prefix Filter workflow names which start with  the full prefix specified. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllWorkflowAsync(String prefix, final ApiCallback<List<Workflow>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllWorkflowValidateBeforeCall(prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Workflow>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for triggerWorkflow
     * @param workflowName Unique Name of the Workflow to run. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call triggerWorkflowCall(String workflowName, WorkflowTriggerRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun"
            .replaceAll("\\{" + "workflow_name" + "\\}", apiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call triggerWorkflowValidateBeforeCall(String workflowName, WorkflowTriggerRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling triggerWorkflow(Async)");
        }
        

        com.squareup.okhttp.Call call = triggerWorkflowCall(workflowName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger a workflow.
     * Trigger a workflow mentioned in payload.
     * @param workflowName Unique Name of the Workflow to run. (required)
     * @param body  (optional)
     * @return WorkflowRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkflowRun triggerWorkflow(String workflowName, WorkflowTriggerRequest body) throws ApiException {
        ApiResponse<WorkflowRun> resp = triggerWorkflowWithHttpInfo(workflowName, body);
        return resp.getData();
    }

    /**
     * Trigger a workflow.
     * Trigger a workflow mentioned in payload.
     * @param workflowName Unique Name of the Workflow to run. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;WorkflowRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkflowRun> triggerWorkflowWithHttpInfo(String workflowName, WorkflowTriggerRequest body) throws ApiException {
        com.squareup.okhttp.Call call = triggerWorkflowValidateBeforeCall(workflowName, body, null, null);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger a workflow. (asynchronously)
     * Trigger a workflow mentioned in payload.
     * @param workflowName Unique Name of the Workflow to run. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call triggerWorkflowAsync(String workflowName, WorkflowTriggerRequest body, final ApiCallback<WorkflowRun> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = triggerWorkflowValidateBeforeCall(workflowName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateWorkflowRun
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWorkflowRunCall(String workflowName, String runId, WorkflowRun body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow/{workflow_name}/workflowRun/{runId}"
            .replaceAll("\\{" + "workflow_name" + "\\}", apiClient.escapeString(workflowName.toString()))
            .replaceAll("\\{" + "runId" + "\\}", apiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWorkflowRunValidateBeforeCall(String workflowName, String runId, WorkflowRun body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling updateWorkflowRun(Async)");
        }
        
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling updateWorkflowRun(Async)");
        }
        

        com.squareup.okhttp.Call call = updateWorkflowRunCall(workflowName, runId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the workflow run instance.
     * Update workflow run.
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @param body  (optional)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Workflow updateWorkflowRun(String workflowName, String runId, WorkflowRun body) throws ApiException {
        ApiResponse<Workflow> resp = updateWorkflowRunWithHttpInfo(workflowName, runId, body);
        return resp.getData();
    }

    /**
     * Update the workflow run instance.
     * Update workflow run.
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Workflow> updateWorkflowRunWithHttpInfo(String workflowName, String runId, WorkflowRun body) throws ApiException {
        com.squareup.okhttp.Call call = updateWorkflowRunValidateBeforeCall(workflowName, runId, body, null, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the workflow run instance. (asynchronously)
     * Update workflow run.
     * @param workflowName Unique Name of Workflow. (required)
     * @param runId Run id for the worfkow. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWorkflowRunAsync(String workflowName, String runId, WorkflowRun body, final ApiCallback<Workflow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWorkflowRunValidateBeforeCall(workflowName, runId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewWorkflow
     * @param workflowName Name of the Workflow. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewWorkflowCall(String workflowName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflow/v1/workflow/{workflow_name}"
            .replaceAll("\\{" + "workflow_name" + "\\}", apiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewWorkflowValidateBeforeCall(String workflowName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling viewWorkflow(Async)");
        }
        

        com.squareup.okhttp.Call call = viewWorkflowCall(workflowName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get complete details for a workflow.
     * Get complete details for an workflow.
     * @param workflowName Name of the Workflow. (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Workflow viewWorkflow(String workflowName) throws ApiException {
        ApiResponse<Workflow> resp = viewWorkflowWithHttpInfo(workflowName);
        return resp.getData();
    }

    /**
     * Get complete details for a workflow.
     * Get complete details for an workflow.
     * @param workflowName Name of the Workflow. (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Workflow> viewWorkflowWithHttpInfo(String workflowName) throws ApiException {
        com.squareup.okhttp.Call call = viewWorkflowValidateBeforeCall(workflowName, null, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get complete details for a workflow. (asynchronously)
     * Get complete details for an workflow.
     * @param workflowName Name of the Workflow. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewWorkflowAsync(String workflowName, final ApiCallback<Workflow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewWorkflowValidateBeforeCall(workflowName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
