/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SchemaErrorResponseFormat;
import io.swagger.client.model.SchemaInfo;
import io.swagger.client.model.SchemaInfoResponse;
import io.swagger.client.model.SchemaRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemaApi {
    private ApiClient apiClient;

    public SchemaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSchema
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSchemaCall(String dataPartitionId, SchemaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/schema-service/v1/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSchemaValidateBeforeCall(String dataPartitionId, SchemaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling createSchema(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSchema(Async)");
        }
        

        com.squareup.okhttp.Call call = createSchemaCall(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a schema to the schema repository.
     * Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body  (required)
     * @return SchemaInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaInfo createSchema(String dataPartitionId, SchemaRequest body) throws ApiException {
        ApiResponse<SchemaInfo> resp = createSchemaWithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Adds a schema to the schema repository.
     * Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body  (required)
     * @return ApiResponse&lt;SchemaInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaInfo> createSchemaWithHttpInfo(String dataPartitionId, SchemaRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createSchemaValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<SchemaInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a schema to the schema repository. (asynchronously)
     * Adds a schema to the schema repository. The schemaIdentity must be unique. The &#x60;authority&#x60;, &#x60;source&#x60; and &#x60;entityType&#x60; will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status &#x60;DEVELOPMENT&#x60;. Scope to a schema will be set by system based on partition id (&#x60;SHARED&#x60; for common tenant and &#x60;INTERNAL&#x60; for private tenant). Required roles &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to create schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSchemaAsync(String dataPartitionId, SchemaRequest body, final ApiCallback<SchemaInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSchemaValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSchema
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param id the system id of the schema (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSchemaCall(String dataPartitionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/schema-service/v1/schema/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSchemaValidateBeforeCall(String dataPartitionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getSchema(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchema(Async)");
        }
        

        com.squareup.okhttp.Call call = getSchemaCall(dataPartitionId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets schema from the schema repository.
     * Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param id the system id of the schema (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getSchema(String dataPartitionId, String id) throws ApiException {
        ApiResponse<Object> resp = getSchemaWithHttpInfo(dataPartitionId, id);
        return resp.getData();
    }

    /**
     * Gets schema from the schema repository.
     * Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param id the system id of the schema (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getSchemaWithHttpInfo(String dataPartitionId, String id) throws ApiException {
        com.squareup.okhttp.Call call = getSchemaValidateBeforeCall(dataPartitionId, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets schema from the schema repository. (asynchronously)
     * Retrieve a schema using its system defined id. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param id the system id of the schema (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSchemaAsync(String dataPartitionId, String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSchemaValidateBeforeCall(dataPartitionId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchSchemaInfoRepository
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param authority pass an optional string to search for a specific authority (optional, default to *)
     * @param source pass an optional string to search for a specific source (optional, default to *)
     * @param entityType pass an optional string to search for a specific entityType (optional, default to *)
     * @param schemaVersionMajor pass an optional string to search for a specific schemaVersionMajor (optional, default to *)
     * @param schemaVersionMinor pass an optional string to search for a specific schemaVersionMinor (optional, default to *)
     * @param status The schema status specification (optional, default to PUBLISHED)
     * @param scope The scope or schema visibility specification (optional, default to INTERNAL)
     * @param latestVersion if True, only return the latest version (optional, default to false)
     * @param limit maximum number of schema records to return (optional)
     * @param offset number of records to skip for pagination (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchSchemaInfoRepositoryCall(String dataPartitionId, String authority, String source, String entityType, String schemaVersionMajor, String schemaVersionMinor, String status, String scope, Boolean latestVersion, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/schema-service/v1/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authority", authority));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (entityType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityType", entityType));
        if (schemaVersionMajor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("schemaVersionMajor", schemaVersionMajor));
        if (schemaVersionMinor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("schemaVersionMinor", schemaVersionMinor));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (latestVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("latestVersion", latestVersion));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchSchemaInfoRepositoryValidateBeforeCall(String dataPartitionId, String authority, String source, String entityType, String schemaVersionMajor, String schemaVersionMinor, String status, String scope, Boolean latestVersion, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling searchSchemaInfoRepository(Async)");
        }
        

        com.squareup.okhttp.Call call = searchSchemaInfoRepositoryCall(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searches schemaInfo repository
     * Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param authority pass an optional string to search for a specific authority (optional, default to *)
     * @param source pass an optional string to search for a specific source (optional, default to *)
     * @param entityType pass an optional string to search for a specific entityType (optional, default to *)
     * @param schemaVersionMajor pass an optional string to search for a specific schemaVersionMajor (optional, default to *)
     * @param schemaVersionMinor pass an optional string to search for a specific schemaVersionMinor (optional, default to *)
     * @param status The schema status specification (optional, default to PUBLISHED)
     * @param scope The scope or schema visibility specification (optional, default to INTERNAL)
     * @param latestVersion if True, only return the latest version (optional, default to false)
     * @param limit maximum number of schema records to return (optional)
     * @param offset number of records to skip for pagination (optional)
     * @return SchemaInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaInfoResponse searchSchemaInfoRepository(String dataPartitionId, String authority, String source, String entityType, String schemaVersionMajor, String schemaVersionMinor, String status, String scope, Boolean latestVersion, Integer limit, Integer offset) throws ApiException {
        ApiResponse<SchemaInfoResponse> resp = searchSchemaInfoRepositoryWithHttpInfo(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset);
        return resp.getData();
    }

    /**
     * Searches schemaInfo repository
     * Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param authority pass an optional string to search for a specific authority (optional, default to *)
     * @param source pass an optional string to search for a specific source (optional, default to *)
     * @param entityType pass an optional string to search for a specific entityType (optional, default to *)
     * @param schemaVersionMajor pass an optional string to search for a specific schemaVersionMajor (optional, default to *)
     * @param schemaVersionMinor pass an optional string to search for a specific schemaVersionMinor (optional, default to *)
     * @param status The schema status specification (optional, default to PUBLISHED)
     * @param scope The scope or schema visibility specification (optional, default to INTERNAL)
     * @param latestVersion if True, only return the latest version (optional, default to false)
     * @param limit maximum number of schema records to return (optional)
     * @param offset number of records to skip for pagination (optional)
     * @return ApiResponse&lt;SchemaInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaInfoResponse> searchSchemaInfoRepositoryWithHttpInfo(String dataPartitionId, String authority, String source, String entityType, String schemaVersionMajor, String schemaVersionMinor, String status, String scope, Boolean latestVersion, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = searchSchemaInfoRepositoryValidateBeforeCall(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<SchemaInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches schemaInfo repository (asynchronously)
     * Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to get the schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param authority pass an optional string to search for a specific authority (optional, default to *)
     * @param source pass an optional string to search for a specific source (optional, default to *)
     * @param entityType pass an optional string to search for a specific entityType (optional, default to *)
     * @param schemaVersionMajor pass an optional string to search for a specific schemaVersionMajor (optional, default to *)
     * @param schemaVersionMinor pass an optional string to search for a specific schemaVersionMinor (optional, default to *)
     * @param status The schema status specification (optional, default to PUBLISHED)
     * @param scope The scope or schema visibility specification (optional, default to INTERNAL)
     * @param latestVersion if True, only return the latest version (optional, default to false)
     * @param limit maximum number of schema records to return (optional)
     * @param offset number of records to skip for pagination (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchSchemaInfoRepositoryAsync(String dataPartitionId, String authority, String source, String entityType, String schemaVersionMajor, String schemaVersionMinor, String status, String scope, Boolean latestVersion, Integer limit, Integer offset, final ApiCallback<SchemaInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchSchemaInfoRepositoryValidateBeforeCall(dataPartitionId, authority, source, entityType, schemaVersionMajor, schemaVersionMinor, status, scope, latestVersion, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSchema
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body SchemaRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSchemaCall(String dataPartitionId, SchemaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/schema-service/v1/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSchemaValidateBeforeCall(String dataPartitionId, SchemaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling updateSchema(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSchema(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSchemaCall(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates/Updates a schema in development status
     * Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body SchemaRequest (required)
     * @return SchemaInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaInfo updateSchema(String dataPartitionId, SchemaRequest body) throws ApiException {
        ApiResponse<SchemaInfo> resp = updateSchemaWithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Creates/Updates a schema in development status
     * Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body SchemaRequest (required)
     * @return ApiResponse&lt;SchemaInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaInfo> updateSchemaWithHttpInfo(String dataPartitionId, SchemaRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateSchemaValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<SchemaInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates/Updates a schema in development status (asynchronously)
     * Creates a new schema or updates an already existing schema with status &#x60;DEVELOPMENT&#x60; in the schema repository. If a user tries to create/update a schema with status other then &#x60;DEVELOPMENT&#x60;, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; schemas). A schema state can also be changed from &#x60;DEVELOPMENT&#x60; to &#x60;PUBLISHED&#x60; or &#x60;OBSOLETE&#x60; while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in &#x60;DEVELOPMENT&#x60; state. If those schemas are updated themselves, it is the developer&#39;s responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can&#39;t be updated, its a system defined value. Required roles  &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; groups to update schema.
     * @param dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition. (required)
     * @param body SchemaRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSchemaAsync(String dataPartitionId, SchemaRequest body, final ApiCallback<SchemaInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSchemaValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
