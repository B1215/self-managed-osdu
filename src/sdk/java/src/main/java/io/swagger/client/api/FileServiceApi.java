/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.FileApplicationError;
import io.swagger.client.model.FileDownloadResponse;
import io.swagger.client.model.FileLandingZoneLocationResponse;
import io.swagger.client.model.FileLocationRequest;
import io.swagger.client.model.FileMetadataResponse;
import io.swagger.client.model.FileRecord;
import io.swagger.client.model.FileRecordVersion;
import io.swagger.client.model.FileSourceLocationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileServiceApi {
    private ApiClient apiClient;

    public FileServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deletesMetadataRecordFileForTheGivenId
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletesMetadataRecordFileForTheGivenIdCall(String dataPartitionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/file/v2/files/{Id}/metadata"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletesMetadataRecordFileForTheGivenIdValidateBeforeCall(String dataPartitionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling deletesMetadataRecordFileForTheGivenId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletesMetadataRecordFileForTheGivenId(Async)");
        }
        

        com.squareup.okhttp.Call call = deletesMetadataRecordFileForTheGivenIdCall(dataPartitionId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes metadata record &amp; file assocaited with that record for the given id
     * Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletesMetadataRecordFileForTheGivenId(String dataPartitionId, String id) throws ApiException {
        deletesMetadataRecordFileForTheGivenIdWithHttpInfo(dataPartitionId, id);
    }

    /**
     * Deletes metadata record &amp; file assocaited with that record for the given id
     * Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletesMetadataRecordFileForTheGivenIdWithHttpInfo(String dataPartitionId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deletesMetadataRecordFileForTheGivenIdValidateBeforeCall(dataPartitionId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes metadata record &amp; file assocaited with that record for the given id (asynchronously)
     * Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: &#39;users.datalake.editors&#39;  or &#39;users.datalake.admins&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletesMetadataRecordFileForTheGivenIdAsync(String dataPartitionId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletesMetadataRecordFileForTheGivenIdValidateBeforeCall(dataPartitionId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getALocationInLandingZoneToUploadAFile_
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getALocationInLandingZoneToUploadAFile_Call(String dataPartitionId, FileLocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/file/v2/getLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getALocationInLandingZoneToUploadAFile_ValidateBeforeCall(String dataPartitionId, FileLocationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getALocationInLandingZoneToUploadAFile_(Async)");
        }
        

        com.squareup.okhttp.Call call = getALocationInLandingZoneToUploadAFile_Call(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a location in Landing Zone to upload a file.
     * Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body  (optional)
     * @return FileLandingZoneLocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileLandingZoneLocationResponse getALocationInLandingZoneToUploadAFile_(String dataPartitionId, FileLocationRequest body) throws ApiException {
        ApiResponse<FileLandingZoneLocationResponse> resp = getALocationInLandingZoneToUploadAFile_WithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Get a location in Landing Zone to upload a file.
     * Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FileLandingZoneLocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileLandingZoneLocationResponse> getALocationInLandingZoneToUploadAFile_WithHttpInfo(String dataPartitionId, FileLocationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getALocationInLandingZoneToUploadAFile_ValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<FileLandingZoneLocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a location in Landing Zone to upload a file. (asynchronously)
     * Create a new location in the landing zone to upload a file. **Required roles**: &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;. 
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getALocationInLandingZoneToUploadAFile_Async(String dataPartitionId, FileLocationRequest body, final ApiCallback<FileLandingZoneLocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getALocationInLandingZoneToUploadAFile_ValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileLandingZoneLocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTheLocationToUploadAFile
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTheLocationToUploadAFileCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/file/v2/files/UploadURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTheLocationToUploadAFileValidateBeforeCall(String dataPartitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getTheLocationToUploadAFile(Async)");
        }
        

        com.squareup.okhttp.Call call = getTheLocationToUploadAFileCall(dataPartitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a location in Landing Zone to upload a file.
     * Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @return FileSourceLocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileSourceLocationResponse getTheLocationToUploadAFile(String dataPartitionId) throws ApiException {
        ApiResponse<FileSourceLocationResponse> resp = getTheLocationToUploadAFileWithHttpInfo(dataPartitionId);
        return resp.getData();
    }

    /**
     * Get a location in Landing Zone to upload a file.
     * Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @return ApiResponse&lt;FileSourceLocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileSourceLocationResponse> getTheLocationToUploadAFileWithHttpInfo(String dataPartitionId) throws ApiException {
        com.squareup.okhttp.Call call = getTheLocationToUploadAFileValidateBeforeCall(dataPartitionId, null, null);
        Type localVarReturnType = new TypeToken<FileSourceLocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a location in Landing Zone to upload a file. (asynchronously)
     * Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTheLocationToUploadAFileAsync(String dataPartitionId, final ApiCallback<FileSourceLocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTheLocationToUploadAFileValidateBeforeCall(dataPartitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileSourceLocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getsMetadataRecordForTheGivenId
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getsMetadataRecordForTheGivenIdCall(String dataPartitionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/file/v2/files/{Id}/metadata"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getsMetadataRecordForTheGivenIdValidateBeforeCall(String dataPartitionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getsMetadataRecordForTheGivenId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getsMetadataRecordForTheGivenId(Async)");
        }
        

        com.squareup.okhttp.Call call = getsMetadataRecordForTheGivenIdCall(dataPartitionId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets metadata record for the given id
     * Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @return FileRecordVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileRecordVersion getsMetadataRecordForTheGivenId(String dataPartitionId, String id) throws ApiException {
        ApiResponse<FileRecordVersion> resp = getsMetadataRecordForTheGivenIdWithHttpInfo(dataPartitionId, id);
        return resp.getData();
    }

    /**
     * Gets metadata record for the given id
     * Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @return ApiResponse&lt;FileRecordVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileRecordVersion> getsMetadataRecordForTheGivenIdWithHttpInfo(String dataPartitionId, String id) throws ApiException {
        com.squareup.okhttp.Call call = getsMetadataRecordForTheGivenIdValidateBeforeCall(dataPartitionId, id, null, null);
        Type localVarReturnType = new TypeToken<FileRecordVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets metadata record for the given id (asynchronously)
     * Gets the latest version of File metadata record identified by the given id. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File metadata record Id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getsMetadataRecordForTheGivenIdAsync(String dataPartitionId, String id, final ApiCallback<FileRecordVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getsMetadataRecordForTheGivenIdValidateBeforeCall(dataPartitionId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileRecordVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getsURLToDownloadTheFileAssociatedWithTheGivenId_
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File Metadata record Id. (required)
     * @param expiryTime The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getsURLToDownloadTheFileAssociatedWithTheGivenId_Call(String dataPartitionId, String id, String expiryTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/file/v2/files/{Id}/DownloadURL"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expiryTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiryTime", expiryTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getsURLToDownloadTheFileAssociatedWithTheGivenId_ValidateBeforeCall(String dataPartitionId, String id, String expiryTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling getsURLToDownloadTheFileAssociatedWithTheGivenId_(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getsURLToDownloadTheFileAssociatedWithTheGivenId_(Async)");
        }
        

        com.squareup.okhttp.Call call = getsURLToDownloadTheFileAssociatedWithTheGivenId_Call(dataPartitionId, id, expiryTime, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a URL to download the file
     * Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File Metadata record Id. (required)
     * @param expiryTime The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)
     * @return FileDownloadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileDownloadResponse getsURLToDownloadTheFileAssociatedWithTheGivenId_(String dataPartitionId, String id, String expiryTime) throws ApiException {
        ApiResponse<FileDownloadResponse> resp = getsURLToDownloadTheFileAssociatedWithTheGivenId_WithHttpInfo(dataPartitionId, id, expiryTime);
        return resp.getData();
    }

    /**
     * Gets a URL to download the file
     * Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File Metadata record Id. (required)
     * @param expiryTime The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)
     * @return ApiResponse&lt;FileDownloadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileDownloadResponse> getsURLToDownloadTheFileAssociatedWithTheGivenId_WithHttpInfo(String dataPartitionId, String id, String expiryTime) throws ApiException {
        com.squareup.okhttp.Call call = getsURLToDownloadTheFileAssociatedWithTheGivenId_ValidateBeforeCall(dataPartitionId, id, expiryTime, null, null);
        Type localVarReturnType = new TypeToken<FileDownloadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a URL to download the file (asynchronously)
     * Gets a URL for downloading the file associated with the unique &#x60;id&#x60;. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param id File Metadata record Id. (required)
     * @param expiryTime The Time for which Signed URL to be valid. Accepted Regex patterns are \&quot;^[0-9]+M$\&quot;, \&quot;^[0-9]+H$\&quot;, \&quot;^[0-9]+D$\&quot; denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getsURLToDownloadTheFileAssociatedWithTheGivenId_Async(String dataPartitionId, String id, String expiryTime, final ApiCallback<FileDownloadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getsURLToDownloadTheFileAssociatedWithTheGivenId_ValidateBeforeCall(dataPartitionId, id, expiryTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileDownloadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishFileMetadataForAFile_
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body File metadata content (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishFileMetadataForAFile_Call(String dataPartitionId, FileRecord body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/file/v2/files/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (dataPartitionId != null)
        localVarHeaderParams.put("data-partition-id", apiClient.parameterToString(dataPartitionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishFileMetadataForAFile_ValidateBeforeCall(String dataPartitionId, FileRecord body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dataPartitionId' is set
        if (dataPartitionId == null) {
            throw new ApiException("Missing the required parameter 'dataPartitionId' when calling publishFileMetadataForAFile_(Async)");
        }
        

        com.squareup.okhttp.Call call = publishFileMetadataForAFile_Call(dataPartitionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates metadata for a file
     * This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body File metadata content (optional)
     * @return FileMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileMetadataResponse publishFileMetadataForAFile_(String dataPartitionId, FileRecord body) throws ApiException {
        ApiResponse<FileMetadataResponse> resp = publishFileMetadataForAFile_WithHttpInfo(dataPartitionId, body);
        return resp.getData();
    }

    /**
     * Creates metadata for a file
     * This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body File metadata content (optional)
     * @return ApiResponse&lt;FileMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileMetadataResponse> publishFileMetadataForAFile_WithHttpInfo(String dataPartitionId, FileRecord body) throws ApiException {
        com.squareup.okhttp.Call call = publishFileMetadataForAFile_ValidateBeforeCall(dataPartitionId, body, null, null);
        Type localVarReturnType = new TypeToken<FileMetadataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates metadata for a file (asynchronously)
     * This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via &#x60;FileSource&#x60; provided in the request body. If &#x60;FileSource&#x60; attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the &#x60;Id&#x60; of the file metadata record. **Required roles**: &#39;users.datalake.viewers&#39; or &#39;users.datalake.editors&#39; or &#39;users.datalake.admins&#39; or &#39;users.datalake.ops&#39;.
     * @param dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition. (required)
     * @param body File metadata content (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishFileMetadataForAFile_Async(String dataPartitionId, FileRecord body, final ApiCallback<FileMetadataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishFileMetadataForAFile_ValidateBeforeCall(dataPartitionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileMetadataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
