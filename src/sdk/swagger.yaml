swagger: '2.0'
info:
  description: Rest API Documentation for Self Managed OSDU
  version: '0.11.0'
  title: self-managed-osdu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'

host: self-managed-osdu.westeurope.cloudapp.azure.com
schemes:
 - https

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

tags:
  - name: Partition
    description: Work with Partitions
  - name: Entitlement
    description: Work with Members and Groups
  - name: Legal
    description: Work with Legal Tags
  - name: Storage
    description: Work with Storage Records
  - name: Search
    description: Search for records
  - name: Schema
    description: Responsible for schema management in the Data Ecosystem and offers an implementation of our schema standard.
paths:
  #########################
  # Partition Service
  #########################

  '/api/partition/v1/partitions':
    get:
      tags:
        - Partition
      summary: List Partitions
      operationId: listUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []

  '/api/partition/v1/partitions/{partitionId}':
    get:
      tags:
        - Partition
      summary: Get Single Partition
      description: >
        By passing in a partition Id, you can retrieve the partition
        information.
      operationId: getUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: path
          description: partitionId
          required: true
          type: string
          x-example: opendes
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              "$ref": "#/definitions/PartitionProperty"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []

    post:
      tags:
        - Partition
      summary: Create Partition
      description: >
        By passing in a partition Id and a partition info object you can create
        a partition.
      operationId: createUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: path
          description: partitionId
          required: true
          type: string
          x-example: common
        - in: body
          name: partitionInfo
          description: partitionInfo
          required: true
          schema:
            $ref: '#/definitions/PartitionDto'
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []
    patch:
      tags:
        - Partition
      summary: Update Partition
      description: >
        By passing in a partition Id and a partition info object you can update
        a partition.
      operationId: updateUsingPATCH
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: partitionId
        in: path
        description: partitionId
        required: true
        type: string
        x-example: common
      - in: body
        name: partitionInfo
        description: partitionInfo
        required: true
        schema:
          $ref: '#/definitions/PartitionDto'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []
    delete:
      tags:
        - Partition
      summary: Delete Partition
      description: |
        By passing in a single partition Id, you can delete a partition.
      operationId: deleteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: path
          description: partitionId
          required: true
          type: string
          x-example: common
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: []


  #########################
  # Entitlement Service
  #########################

  '/api/entitlements/v2/groups':
    get:
      tags:
        - Entitlement
      summary: List Assigned Groups
      operationId: listGroupsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: tenant
          required: true
          type: string
          x-example: opendes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EntitlementGroupResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []
    post:
      tags:
        - Entitlement
      summary: Create a Group
      operationId: createGroupUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Partition Id
          required: true
          type: string
          x-example: opendes
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []

  '/api/entitlements/v2/groups/{group_email}/members':
    get:
      tags:
        - Entitlement
      summary: List Group Members
      operationId: listGroupMembersUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Data Partition Id
          required: true
          type: string
          x-example: opendes
        - name: group_email
          in: path
          description: group_email
          required: true
          type: string
          x-example: "users@opendes.contoso.com"
        - name: role
          in: query
          description: role
          required: false
          type: string
          enum:
            - MEMBER
            - OWNER
        - name: includeType
          in: query
          description: includeType
          required: false
          type: boolean
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []
    post:
      tags:
        - Entitlement
      summary: Add Member to Group
      operationId: addMemberUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Partition Name
          required: true
          type: string
          x-example: opendes
        - name: group_email
          in: path
          description: group_email
          required: true
          type: string
          x-example: "users@opendes.contoso.com"
        - in: body
          name: partitionInfo
          description: partitionInfo
          required: true
          schema:
            $ref: '#/definitions/EntitlementMemberDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EntitlementMemberDto'
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
      security:
        - Bearer: []

  '/api/entitlements/v2/groups/{group_email}/members/{member_email}':
    delete:
      tags:
        - Entitlement
      summary: Remove Member from Group
      operationId: deleteMemberUsingDELETE_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Data Partition Id
          required: true
          type: string
          x-example: opendes
        - name: group_email
          in: path
          description: group_email
          required: true
          type: string
          x-example: "users@opendes.contoso.com"
        - name: member_email
          in: path
          description: member_email
          required: true
          type: string
          x-example: "email@domain.com"
      responses:
        '200':
          description: OK
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: []

  '/api/entitlements/v2/groups/{group_email}':
    delete:
      tags:
        - Entitlement
      summary: Delete a Group
      operationId: deleteGroupUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: tenant
          required: true
          type: string
          x-example: common
        - name: group_email
          in: path
          description: group_email
          required: true
          type: string
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: []
    patch:
      tags:
        - Entitlement
      summary: Updates Items in Group
      operationId: updateGroupUsingPATCH
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: tenant
          required: true
          type: string
          x-example: common
        - name: group_email
          in: path
          description: group_email
          required: true
          type: string
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: []

  '/api/entitlements/v2/members/{member_email}':
    delete:
      tags:
        - Entitlement
      summary: Delete a User
      operationId: deleteMemberUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Data Partition Id
          required: true
          type: string
          x-example: opendes
        - name: member_email
          in: path
          description: member_email
          required: true
          type: string
          x-example: email@domain.com
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: []

  '/api/entitlements/v2/members/{member_email}/groups':
    get:
      tags:
        - Entitlement
      summary: List Assigned Groups for User
      operationId: listGroupsOnBehalfOfUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: tenant
          required: true
          type: string
          x-example: opendes
        - name: member_email
          in: path
          description: member_email
          required: true
          type: string
        - name: type
          in: query
          description: type
          required: false
          type: string
        - name: appid
          in: query
          description: appid
          required: false
          type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - Bearer: []


  #########################
  # Legal Service
  #########################

  '/api/legal/v1/legaltags:properties':
    get:
      tags:
        - Legal
      summary: Gets LegalTag property values.
      description: This allows for the retrieval of allowed values for LegalTag properties.
      operationId: getLegalTagProperties
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Partition Id
          required: true
          type: string
          x-example: opendes
      responses:
        '200':
          description: Retrieved proeprties successfully.
          schema:
            $ref: '#/definitions/LegalTagPropertyValues'
        '401':
          description: You do not have permissions to access this API.
      security:
        - Bearer: []

  '/api/legal/v1/legaltags:validate':
    post:
      tags:
        - Legal
      summary: Retrieves the invalid LegalTag names with reasons for the given names.
      description: This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
      operationId: validateLegalTags
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/LegalTagRequest'
        - name: OSDU-Account-Id
          in: header
          description: Users account e.g. OSDU
          required: true
          type: string
        - name: OSDU-On-Behalf-Of
          in: header
          description: User's email or auth token
          required: false
          type: string
      responses:
        '200':
          description: Retrieved LegalTag names with reason successfully.
          schema:
            $ref: '#/definitions/LegalTagInvalidResponseList'
        '400':
          description: Invalid parameters were given on request.
        '401':
          description: You do not have permissions to access this API.
        '404':
          description: LegalTag names were not found.
      security:
        - Bearer: []

  '/api/legal/v1/legaltags:batchRetrieve':
    post:
      tags:
        - Legal
      summary: Retrieves the LegalTags for the given names.
      description: This allows for the retrieval of your LegalTags using the 'name' associated with it. A maximum of 25 can be retrieved at once.
      operationId: getLegalTags
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/LegalTagRequest'
        - name: OSDU-Account-Id
          in: header
          description: Users account e.g. OSDU
          required: true
          type: string
        - name: OSDU-On-Behalf-Of
          in: header
          description: User's email or auth token
          required: false
          type: string
      responses:
        '200':
          description: Retrieved LegalTags successfully.
          schema:
            $ref: '#/definitions/LegalTagDtos'
        '400':
          description: Invalid parameters were given on request.
        '401':
          description: You do not have permissions to access this API.
        '404':
          description: One or more requested LegalTags were not found.
      security:
        - Bearer: []

  '/api/legal/v1/legaltags':
    get:
      tags:
        - Legal
      summary: Gets all LegalTags.
      description: This allows for the retrieval of all LegalTags.
      operationId: listLegalTags
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: valid
          in: query
          description: 'If true returns only valid LegalTags, if false returns only invalid LegalTags.  Default value is true.'
          required: false
          type: boolean
          default: true
        - name: OSDU-Account-Id
          in: header
          description: Users account e.g. OSDU
          required: true
          type: string
        - name: OSDU-On-Behalf-Of
          in: header
          description: User's email or auth token
          required: false
          type: string
      responses:
        '200':
          description: Retrieved LegalTags successfully.
          schema:
            $ref: '#/definitions/LegalTagDtos'
        '400':
          description: Invalid parameters were given on request.
        '401':
          description: You do not have permissions to access this API.
      security:
        - Bearer: []
    post:
      tags:
        - Legal
      summary: Creates the LegalTag for the given 'name'.
      description: This allows for the creation of your LegalTag. There can only be 1 LegalTag per 'name'. A LegalTag must be created before you can start ingesting data for that name.
      operationId: createLegalTag
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/LegalTagDto'
        - name: OSDU-Account-Id
          in: header
          description: Users account e.g. OSDU
          required: true
          type: string
        - name: OSDU-On-Behalf-Of
          in: header
          description: User's email or auth token
          required: false
          type: string
      responses:
        '201':
          description: Created LegalTag successfully.
          schema:
            $ref: '#/definitions/LegalTagDto'
        '400':
          description: Invalid parameters were given on request.
        '401':
          description: You do not have permissions to access this API.
        '409':
          description: A LegalTag with the given name already exists.
      security:
        - Bearer: []
    put:
      tags:
        - Legal
      summary: Updates the LegalTag for the given 'name'.
      description: This allows to update certain properties of your LegalTag using the 'name' associated with it.
      operationId: updateLegalTag
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/LegalTagUpdateDto'
        - name: OSDU-Account-Id
          in: header
          description: Users account e.g. OSDU
          required: true
          type: string
        - name: OSDU-On-Behalf-Of
          in: header
          description: User's email or auth token
          required: false
          type: string
      responses:
        '200':
          description: Updated LegalTag successfully.
          schema:
            $ref: '#/definitions/LegalTagDto'
        '400':
          description: Invalid parameters were given on request.
        '401':
          description: You do not have permissions to access this API.
        '404':
          description: Requested LegalTag to update was not found.
      security:
        - Bearer: []

  '/api/legal/v1/legaltags/{name}':
    get:
      tags:
        - Legal
      summary: Gets a LegalTag for the given 'name'.
      description: This allows for the retrieval of your LegalTag using the 'name' associated with it.
      operationId: getLegalTag
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Partition Id
          required: true
          type: string
          x-example: opendes
        - name: name
          in: path
          required: true
          type: string
          x-example: opendes-public-usa-swagger
      responses:
        '200':
          description: Retrieved LegalTag successfully.
          schema:
            $ref: '#/definitions/LegalTagDto'
        '400':
          description: Invalid parameters were given on request.
        '401':
          description: You do not have permissions to access this API.
        '404':
          description: Requested LegalTag was not found.
      security:
        - Bearer: []
    delete:
      tags:
        - Legal
      summary: Delete Legal Tag
      description: |
        This allows for the deletion of your LegalTag using the 'name' associated with it.
      operationId: deleteLegalTag
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Partition Id
          required: true
          type: string
          x-example: opendes
        - name: name
          in: path
          required: true
          type: string
          x-example: opendes-public-usa-swagger
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Bearer: []


  #########################
  # Storage Service
  #########################

  '/api/storage/v2/query/kinds':
    get:
      tags:
      - Storage
      summary: "Get all kinds"
      description: "The API returns a list of all kinds in the specific {Account-Id}.\
        \ Allowed roles: service.storage.admin."
      operationId: "Get all kinds"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Cursor"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Page Size"
        required: false
        type: "integer"
        default: 10
        format: "int32"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active account\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        200:
          description: "All kinds retrieved successfully."
          schema:
            $ref: "#/definitions/StorageQueryResponse"
        500:
          description: "Unknown Error."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []

  '/api/storage/v2/query/records':
    get:
      tags:
      - Storage
      summary: "Get all record from kind"
      description: "The API returns a list of all record ids which belong to the specified\
        \ kind. Allowed roles: service.storage.admin."
      operationId: "Get all record from kind"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Cursor"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Page Size"
        required: false
        type: "integer"
        default: 10
        format: "int32"
      - name: "kind"
        in: "query"
        description: "Filter Kind"
        required: false
        type: "string"
        default: "tenant1:public:well:1.0.2"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        200:
          description: "Record Ids retrieved successfully."
          schema:
            $ref: "#/definitions/StorageQueryResponse"
        404:
          description: "Kind or cursor not found."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []
    post:
      tags:
      - Storage
      summary: "Fetch records"
      description: "The API fetches multiple records at once. Allowed roles: service.storage.viewer,\
        \ service.storage.creator and service.storage.admin."
      operationId: "Fetch records"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StorageMultiRecordIds"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        200:
          description: "Fetch multiple records successfully."
          schema:
            $ref: "#/definitions/StorageMultiRecordIds"
        500:
          description: "Unknown storage error."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []

  '/api/records/{id}:delete':
    post:
      tags:
      - Storage
      summary: "Delete record"
      description: "The API performs a logical deletion of the given record. This\
        \ operation can be reverted later. Allowed roles: service.storage.creator\
        \ and service.storage.admin."
      operationId: "Delete record"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Record id"
        required: true
        type: "string"
        default: "tenant1:well:123456789"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        204:
          description: "Record deleted successfully."
        404:
          description: "Record not found."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []

  "/api/storage/v2/records/delete":
    post:
      tags:
        - Storage
      summary: Soft delete of multiple records
      description: "The API performs a soft deletion of the given list of records. Required roles: 'users.datalake.editors' or
        'users.datalake.admins'."
      operationId: Delete records
      parameters:
        - name: data-partition-id
          in: header
          description: Partition Id
          required: true
          type: string
          x-example: opendes
        - in: body
          name: partitionInfo
          description: partitionInfo
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "204":
          description: All records deleted successfully.
        "207":
          description: Some of the records weren't deleted successfully.
          schema:
            type: array
            items:
              $ref: "#/definitions/StorageDeleteRecordError"

        "400":
          description: "Invalid id format"
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
        - Bearer: []

  '/api/storage/v2/records/{id}':
    get:
      tags:
      - Storage
      summary: "Get record"
      description: "This API returns the latest version of the given record. Allowed\
        \ roles: service.storage.viewer, service.storage.creator and service.storage.admin."
      operationId: "Get record"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Record id"
        required: true
        type: "string"
        default: "tenant1:well:123456789"
      - name: "attribute"
        in: "query"
        description: "Filter attributes to restrict the returned fields of the record.\
          \ Usage: data.{record-data-field-name}."
        required: false
        type: "array"
        items:
          type: "string"
          default: "data.wellName"
        collectionFormat: "multi"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        200:
          description: "Record retrieved successfully."
          schema:
            $ref: "#/definitions/StorageRecordData"
        404:
          description: "Record not found."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - Storage
      summary: "Purge record"
      description: "The API performs the physical deletion of the given record and\
        \ all of its versions. This operation cannot be undone. Allowed roles: service.storage.admin."
      operationId: "Purge record"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Record id"
        required: true
        type: "string"
        default: "tenant1:well:123456789"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        204:
          description: "Record purged successfully."
        404:
          description: "Record not found."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []

  '/api/storage/v2/records/{id}/{version}':
    get:
      tags:
      - Storage
      summary: "Get record version"
      description: "The API retrieves the specific version of the given record. Allowed\
        \ roles: service.storage.viewer, service.storage.creator and service.storage.admin."
      operationId: "Get record version"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Record id"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "Record version"
        required: true
        type: "integer"
        default: 123456789
        format: "int64"
      - name: "attribute"
        in: "query"
        description: "Filter attributes to restrict the returned fields of the record.\
          \ Usage: data.{record-data-field-name}."
        required: false
        type: "array"
        items:
          type: "string"
          default: "data.wellName"
        collectionFormat: "multi"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        200:
          description: "Record retrieved successfully."
          schema:
            $ref: "#/definitions/StorageRecordData"
        404:
          description: "Record id or version not found."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []

  '/api/storage/v2/records/versions/{id}':
    get:
      tags:
      - Storage
      summary: "Get all record versions"
      description: "The API returns a list containing all versions for the given record\
        \ id. Allowed roles: service.storage.viewer, service.storage.creator and service.storage.admin."
      operationId: "Get all record versions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Record id"
        required: true
        type: "string"
        default: "tenant1:well:123456789"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        200:
          description: "Record versions retrieved successfully."
          schema:
            $ref: "#/definitions/StorageRecordVersions"
        404:
          description: "Record id or version not found."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []

  '/api/storage/v2/records':
    put:
      tags:
      - Storage
      summary: "Create or update records"
      description: "The API represents the main injection mechanism into the Data\
        \ Lake. It allows records creation and/or update. When no record id is provided\
        \ or when the provided id is not already present in the Data Lake then a new\
        \ record is created. If the id is related to an existing record in the Data\
        \ Lake then an update operation takes place and a new version of the record\
        \ is created. Allowed roles: service.storage.creator and service.storage.admin."
      operationId: "Create or update records"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "skipdupes"
        in: "query"
        description: "Skip duplicates when updating records with the same value."
        required: false
        type: "boolean"
        default: true
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/StorageRecord"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        201:
          description: "Records created and/or updated successfully."
          schema:
            $ref: "#/definitions/StorageRecord"
        400:
          description: "Invalid record format."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
        404:
          description: "Invalid acl group."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
        403:
          description: "User not authorized to perform the action."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []
    patch:
      tags:
      - Storage
      summary: "Modify record metadata attributes using patch operations"
      description: "The API represents the patch update mechanism for records. It allows\
        \ updating multiple records in one request. The currently supported operations are replace,\
        \ add, and remove for Legal Tags, ACLs, and Tags. \
        \ Required roles: 'users.datalake.editors' or 'users.datalake.admins'."
      operationId: "Patch update records"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/StorageRecordBulkUpdateParam"
      - name: "OSDU-Account-Id"
        in: "header"
        description: "Account ID is the active OSDU account (OSDU account or customer's\
          \ account) which the users choose to use with the Search API."
        required: true
        type: "string"
        default: "tenant1"
      responses:
        200:
          description: "Records updated successfully."
          schema:
            $ref: "#/definitions/StorageBulkUpdateRecordsResponse"
        206:
          description: "Records updated successful partially."
          schema:
            $ref: "#/definitions/StorageBulkUpdateRecordsResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/StorageErrorResponse"
        403:
          description: "User not authorized to perform the action."
          schema:
            $ref: "#/definitions/StorageErrorResponse"
      security:
      - Bearer: []

  #########################
  # Search Service
  #########################

  "/api/search/v2/index/{kind}":
    delete:
      tags:
      - Search
      summary: Deletes all documents from index for given 'kind'.
      description: The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin
      operationId: deleteIndex
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: OSDU-Account-Id
        in: header
        description: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
        required: true
        type: string
      - name: OSDU-On-Behalf-Of
        in: header
        description: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        required: false
        type: string
      - name: kind
        in: path
        description: Kind of the record.
        required: true
        type: string
      responses:
        '204':
          description: No Content Returned.
        '400':
          description: Invalid parameters were given on request.
          schema:
            "$ref": "#/definitions/SearchAppError"
        '404':
          description: Requested kind not found.
          schema:
            "$ref": "#/definitions/SearchAppError"
      security:
        - Bearer: []

  "/api/search/v2/index/schema/{kind}":
    get:
      tags:
      - Search
      summary: Returns the index schema for given 'kind'.
      description: The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin
      operationId: getKindSchema
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: OSDU-Account-Id
        in: header
        description: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
        required: true
        type: string
      - name: OSDU-On-Behalf-Of
        in: header
        description: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        required: false
        type: string
      - name: kind
        in: path
        description: Kind of the record.
        required: true
        type: string
      responses:
        '200':
          description: Success.
          schema:
            type: string
        '400':
          description: Invalid parameters were given on request.
          schema:
            "$ref": "#/definitions/SearchAppError"
        '404':
          description: Index schema for requested kind not found.
          schema:
            "$ref": "#/definitions/SearchAppError"
      security:
        - Bearer: []

  "/api/search/v2/query":
    post:
      tags:
      - Search
      summary: Queries the index for the specified kind using the input query string.
      description: The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.
      operationId: queryRecords
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: OSDU-Account-Id
        in: header
        description: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
        required: true
        type: string
      - name: OSDU-On-Behalf-Of
        in: header
        description: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        required: false
        type: string
      - in: body
        name: body
        required: true
        description: Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly.
        schema:
          "$ref": "#/definitions/SearchQueryRequest"
      responses:
        '200':
          description: Success.
          schema:
            "$ref": "#/definitions/SearchQueryResponse"
        '400':
          description: Invalid parameters were given on request / Unrecognized fields found on request/ Bad JSON format.
          schema:
            "$ref": "#/definitions/SearchAppError"
        '403':
          description: User not authorized to perform the action.
          schema:
            "$ref": "#/definitions/SearchAppError"
        '404':
          description: Resource you are trying to find does not exists
          schema:
           "$ref": "#/definitions/SearchAppError"
      security:
        - Bearer: []

  "/api/search/v2/query_with_cursor":
    post:
      tags:
      - Search
      summary: Query the index using cursor and optionally return only requested fields.
      description: The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.
      operationId: queryWithCursor
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: OSDU-Account-Id
        in: header
        description: Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
        required: true
        type: string
      - name: OSDU-On-Behalf-Of
        in: header
        description: On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
        required: false
        type: string
      - in: body
        name: body
        required: true
        description: Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly.
        schema:
          "$ref": "#/definitions/SearchCursorQueryRequest"
      responses:
        '200':
          description: Success.
          schema:
            "$ref": "#/definitions/SearchCursorQueryResponse"
        '400':
          description: Invalid parameters were given on request / Unrecognized fields found on request/ Bad JSON format.
          schema:
            "$ref": "#/definitions/SearchAppError"
        '403':
          description: User not authorized to perform the action.
          schema:
            "$ref": "#/definitions/SearchAppError"
        '404':
          description: Resource you are trying to find does not exists
          schema:
            "$ref": "#/definitions/SearchAppError"
      security:
        - Bearer: []

  #########################
  # Schema Service
  #########################

  '/api/schema-service/v1/schema':
    post:
      tags:
        - Schema
      summary: Adds a schema to the schema repository.
      description: Adds a schema to the schema repository. The schemaIdentity must be
        unique. The `authority`, `source` and `entityType` will be registered
        if not present. If lower minor versions are registered the service validates
        the new schema against breaking changes; if breaking changes are
        discovered the request fails. **Note:** The schema must not reference
        other schemas with status `DEVELOPMENT`. Scope to a schema will be set by system based on partition id (`SHARED` for common tenant and `INTERNAL` for private tenant). Required
        roles 'users.datalake.editors' or 'users.datalake.admins' groups to create schema.
      operationId: Create Schema
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
          required: true
          type: string
          x-example: opendes
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/SchemaRequest"
      responses:
        '201':
          description: Schema created
          schema:
            $ref: "#/definitions/SchemaInfo"
        '400':
          description: Bad user input. Mandatory fields missing or unacceptable value passed to API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '401':
          description: Unknown or invalid user.
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '403':
          description: User not authorised to access the API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
      security:
        - Bearer: []
    put:
      tags:
        - Schema
      summary: Creates/Updates a schema in development status
      description: Creates a new schema or updates an already existing schema with status `DEVELOPMENT` in the schema repository. If a user tries to create/update a schema with status other then `DEVELOPMENT`, API will throw an exception. Any
        schema instance with the same schemaIdentity is replaced (in contrast to
        the immutability of `PUBLISHED` or `OBSOLETE` schemas). A schema state can also be changed from `DEVELOPMENT` to `PUBLISHED` or `OBSOLETE` while updating schema content or by providing the same schema content. **Note:** The
        schema may refer to other schema definitions in `DEVELOPMENT` state. If
        those schemas are updated themselves, it is the developer's
        responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can't be updated, its a system defined value. Required
        roles  'users.datalake.editors' or 'users.datalake.admins' groups to update schema.
      operationId: Update Schema
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
          required: true
          type: string
          x-example: opendes
        - name: body
          in: body
          description: SchemaRequest
          required: true
          schema:
            $ref: "#/definitions/SchemaRequest"
      responses:
        '201':
          description: Schema created
          schema:
            $ref: "#/definitions/SchemaInfo"
        '200':
          description: Schema updated
          schema:
            $ref: "#/definitions/SchemaInfo"
        '400':
          description: Bad user input. Mandatory fields missing or unacceptable value passed to API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '401':
          description: Unknown or invalid user.
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '403':
          description: User not authorised to access the API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
      security:
        - Bearer: []
    get:
      tags:
        - Schema
      summary: Searches schemaInfo repository
      description: Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required
        roles 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' groups to get the schema.
      operationId: searchSchemaInfoRepository
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
          required: true
          type: string
          x-example: opendes
        - in: query
          name: authority
          description: pass an optional string to search for a specific authority
          required: false
          type: string
          default: '*'
          x-example: 'osdu'
        - in: query
          name: source
          description: pass an optional string to search for a specific source
          required: false
          type: string
          default: '*'
          x-example: 'wks'
        - in: query
          name: entityType
          description: pass an optional string to search for a specific entityType
          required: false
          type: string
          default: '*'
          x-example: 'wellbore'
        - in: query
          name: schemaVersionMajor
          description: pass an optional string to search for a specific schemaVersionMajor
          required: false
          type: string
          default: '*'
          x-example: 1
        - in: query
          name: schemaVersionMinor
          description: pass an optional string to search for a specific schemaVersionMinor
          required: false
          type: string
          default: '*'
          x-example: 1
        - in: query
          name: status
          description: The schema status specification
          type: string
          default: PUBLISHED
          enum:
            - PUBLISHED
            - DEVELOPMENT
            - OBSOLETE
          x-example: PUBLISHED
        - in: query
          name: scope
          description: The scope or schema visibility specification
          type: string
          default: INTERNAL
          enum:
            - "SHARED"
            - "INTERNAL"
          x-example: INTERNAL
        - in: query
          name: latestVersion
          description: if True, only return the latest version
          required: false
          type: boolean
          default: False
          x-example: True
        - in: query
          name: limit
          description: maximum number of schema records to return
          type: integer
          minimum: 0
          maximum: 100
          x-example: 10
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          minimum: 0
          x-example: 0
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/SchemaInfoResponse'
        '400':
          description: Bad user input. Mandatory fields missing or unacceptable value passed to API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '401':
          description: Unknown or invalid user.
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '403':
          description: User not authorised to access the API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
      security:
        - Bearer: []

  '/api/schema-service/v1/schema/{id}':
    get:
      tags:
        - Schema
      summary: Gets schema from the schema repository.
      description: Retrieve a schema using its system defined id. Required roles 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' groups to get the schema.
      operationId: Get Schema
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
          required: true
          type: string
          x-example: osdu
        - name: id
          in: path
          description: the system id of the schema
          required: true
          type: string
          x-example: osdu:wks:wellbore:1.0.0
      responses:
        '200':
          description: Search results matching criteria
          schema:
            type: object
            example: {$schema: 'http://json-schema.org/draft-07/schema#',
                     description: The entity shapefile.,
                     title: ShapeFile,
                     type: object,
                     definitions: {},
                     properties: {}}

        '400':
          description: Bad user input. Mandatory fields missing or unacceptable value passed to API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '401':
          description: Unknown or invalid user.
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '403':
          description: User not authorised to access the API
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
        '404':
          description: Requested Schema not found in repository
          schema:
            $ref: '#/definitions/SchemaErrorResponseFormat'
      security:
        - Bearer: []

definitions:
  PartitionProperty:
    type: object
    properties:
      sensitive:
        type: boolean
      value:
        type: object
  PartitionDto:
    type: object
    required:
      - properties
    properties:
      properties:
        type: object
        description: 'Free form key value pair object for any data partition specific values'
        additionalProperties:
          "$ref": "#/definitions/PartitionProperty"
    example:
      properties:
        compliance-ruleset:
          sensitive: false
          value: 'shared'
        elastic-endpoint:
          sensitive: true
          value: 'elastic-endpoint'
        cosmos-connection:
          sensitive: true
          value: 'cosmos-connection'

  EntitlementGroupProperties:
    type: object
    required:
      - name
      - description
      - email
    properties:
      name:
        type: string
        example: service.entitlements.user
        description: The name of an entitlement or group.
      description:
        type: string
        example: A service entitlement
        description: The description of an entitlement or group.
      email:
        type: string
        example: service.entitlements.user@partition.contoso.com
        description: The fully qualified group name.
    description: Group properties
  EntitlementGroupResponse:
    type: object
    properties:
      desId:
        type: string
      memberEmail:
        type: string
      groups:
        type: array
        description: A collection of groups.
        items:
          $ref: '#/definitions/EntitlementGroupProperties'
  EntitlementMemberDto:
    type: object
    properties:
      email:
        type: string
        example: email@domain.com
        description: Object ID or Email Address
      role:
        type: string
        example: MEMBER
        description: Role Name

  LegalTagProperties:
    type: object
    required:
      - contractId
      - countryOfOrigin
      - dataType
      - expirationDate
      - exportClassification
      - originator
      - personalData
      - securityClassification
    properties:
      contractId:
        type: string
        example: No Contract Related
        description: The Id of the physical contract associated with the data being ingested.
      countryOfOrigin:
        type: array
        example: US
        description: The ISO Alpha 2 country code(s) of where the data relates to.
        items:
          type: string
      dataType:
        type: string
        example: Third Party Data
        description: The type of data being ingested.
      expirationDate:
        type: string
        example: '2025-12-25'
        description: The optional expiration date of the contract in the format YYYY-MM-DD
      exportClassification:
        type: string
        example: EAR99
        description: The ECCN value of the data if one applies.
      originator:
        type: string
        example: Contoso
        description: The company who owns the data.
      personalData:
        type: string
        example: No Personal Data
        description: Whether the data contains any personally identifiable data.
      securityClassification:
        type: string
        example: Private
        description: The security classification of the data.
    description: LegalTag properties
  LegalTagPropertyValues:
    type: object
    properties:
      countriesOfOrigin:
        type: object
        description: The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name.
        additionalProperties:
          type: string
      otherRelevantDataCountries:
        type: object
        description: The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name.
        additionalProperties:
          type: string
      securityClassifications:
        type: array
        description: The values of all the allowed Security Classifications.
        uniqueItems: true
        items:
          type: string
      exportClassificationControlNumbers:
        type: array
        description: The name of all the allowed Export Classifications.
        uniqueItems: true
        items:
          type: string
      personalDataTypes:
        type: array
        description: The name of all the allowed Personal Data Type values.
        uniqueItems: true
        items:
          type: string
    description: Shows the allowed values of the fields of a LegalTag.
  LegalTagInvalidResponse:
    type: object
    properties:
      name:
        type: string
        description: The name of the LegalTag.
      reason:
        type: string
        description: The reason the LegalTag is currently invalid.
    description: Represents a single invalid LegalTag.
  LegalTagInvalidResponseList:
    type: object
    properties:
      invalidLegalTags:
        type: array
        description: A collection of invalid LegalTags.
        items:
          $ref: '#/definitions/LegalTagInvalidResponse'
    description: Represents a collection invalid LegalTags.
  LegalTagRequest:
    type: object
    required:
      - names
    properties:
      names:
        type: array
        description: The name of all the LegalTags to retrieve.
        items:
          type: string
        maxItems: 25
        minItems: 1
    description: The model to retrieve multiple LegalTags in batch.
  LegalTagDto:
    type: object
    properties:
      name:
        type: string
        example: OSDU-Private-EHCData
        description: The name of the LegalTag.
      description:
        type: string
        description: The description of the LegalTag.
      properties:
        $ref: '#/definitions/LegalTagProperties'
    description: Represents a single LegalTag.
  LegalTagDtos:
    type: object
    properties:
      legalTags:
        type: array
        description: A collection of complete LegalTags
        items:
          $ref: '#/definitions/LegalTagDto'
    description: Represents a collection of LegalTags.
  LegalTagUpdateDto:
    type: object
    required:
      - contractId
      - name
    properties:
      name:
        type: string
        description: The name of the LegalTag.
      contractId:
        type: string
        example: No Contract Related
        description: The Id of the physical contract associated with the data being ingested.
      description:
        type: string
        description: The optional description if the LegalTag to allow for easier discoverability of Legaltags overtime.
      expirationDate:
        type: string
        example: '2025-12-25'
        description: The optional expiration date of the contract in the format YYYY-MM-DD
    description: The model to update an existing LegalTag

  StorageQueryResponse:
    type: "object"
    properties:
      cursor:
        type: "string"
      results:
        type: "array"
        items:
          type: "string"
  StorageErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      reason:
        type: "string"
      message:
        type: "string"
    description: "An error that occurs during normal application logic"
  StorageMultiRecordIds:
    type: "object"
    required:
    - "records"
    properties:
      records:
        type: "array"
        example: "tenant1:well:123456789"
        description: "List of record ids. Each record id must follow the naming convention\
          \ {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}."
        items:
          type: "string"
      attributes:
        type: "array"
        example: "data.wellName"
        description: "Filter attributes to restrict the returned fields of the record.\
          \ Usage: data.{record-data-field-name}."
        items:
          type: "string"
    description: "Multiple storage record ids and filter attributes."
    example:
      records:
      - "tenant1:well:123456789"
      - "tenant1:wellTop:abc789456"
      - "tenant1:wellLog:654abc987"
      attributes:
      - "data.msg"
  StorageDeleteRecordError:
    type: object
    properties:
      notDeletedRecordId:
        type: string
        example: common:welldb:123456
        description: Record id which wasn't deleted successfully.
      message:
        type: string
        example: Record with id 'common:welldb:123456' not found
        description: Brief description of the cause why record wasn't delete
    description: Delete Records Response Body
  StorageRecordData:
    type: "object"
    properties:
      data:
        type: "object"
        additionalProperties:
          type: "object"
      meta:
        type: "array"
        items:
          type: "object"
          additionalProperties:
            type: "object"
    description: "Storage record"
  StorageRecordVersions:
    type: "object"
    properties:
      recordId:
        type: "string"
      versions:
        type: "array"
        items:
          type: "integer"
          format: "int64"
    description: "Storage record versions."
  StorageRecord:
    type: "object"
    required:
    - "acl"
    - "data"
    - "kind"
    - "legal"
    properties:
      id:
        type: "string"
        example: "tenant1:well:123456789"
        description: "Unique identifier in whole Data Lake. When not provided, Data\
          \ Lake will create and assign an id to the record. Must follow the naming\
          \ convention: {OSDU-Account-Id}:{object-type}:{uuid}."
        pattern: "^[\\w\\-\\.]+:[\\w-\\.\\/]+:.+$"
      kind:
        type: "string"
        example: "tenant1:public:well:1.0.2"
        description: "Kind of data it is being ingested. Must follow the naming convention:\
          \ {OSDU-Account-Id}:{dataset-name}:{record-type}:{version}."
        pattern: "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\/]+:[0-9]+.[0-9]+.[0-9]+$"
      acl:
        description: "Group of users who have access to the record."
        $ref: "#/definitions/StorageAcl"
      legal:
        description: "Attributes which represent the legal constraints associated\
          \ with the record."
        $ref: "#/definitions/StorageLegal"
      data:
        type: "object"
        description: "Record payload represented as a list of key-value pairs."
        additionalProperties:
          type: "object"
      history:
        description: "Record ancestry information."
        $ref: "#/definitions/StorageRecordHistory"
    description: "Storage record"
    example:
    - id: "tenant1:well:123456789"
      kind: "tenant1:public:well:1.0.2"
      acl:
        viewers:
        - "my-viewer-group@[OSDU].com"
        owners:
        - "my-owner-group@[OSDU].com"
      legal:
        legaltags:
        - "sample-legal-tag"
        otherRelevantDataCountries:
        - "US"
      data:
        msg: "hello world from Data Lake"
      history:
        parents:
        - "OSDU:parent-record:1.0.0"
  StorageAcl:
    type: "object"
    required:
    - "owners"
    - "viewers"
    properties:
      viewers:
        type: "array"
        description: "List of valid groups which will have view/read privileges over\
          \ the record."
        items:
          type: "string"
      owners:
        type: "array"
        description: "List of valid groups which will have write privileges over the\
          \ record."
        items:
          type: "string"
  StorageLegal:
    type: "object"
    properties:
      legaltags:
        type: "array"
        description: "List of legaltag names associated with the record."
        uniqueItems: true
        items:
          type: "string"
      otherRelevantDataCountries:
        type: "array"
        description: "List of other relevant data countries. Must have 2 values: where\
          \ the data was ingested from and where Data Lake stores the data."
        uniqueItems: true
        items:
          type: "string"
  StorageRecordHistory:
    type: "object"
    properties:
      parents:
        type: "array"
        description: "List of parent records. Must follow the naming convention: {parent-record-id}:{parent-record-version}."
        uniqueItems: true
        items:
          type: "string"
  StorageRecordBulkUpdateParam:
    type: "object"
    required:
    - "query"
    - "ops"
    properties:
      query:
        description: "Patch update query information"
        $ref: "#/definitions/StorageRecordQuery"
      ops:
        type: "array"
        description: "List of operations for records pathc update"
        items:
          $ref: "#/definitions/StoragePatchOperation"
    description: "Patch update input information"
    example:
      query:
      - ids:
          - "tenant:type:unique-identifier:version"
      ops:
      - op: "replace or add or remove"
        path: "/acl/viewers or /acl/owners or /legal/legaltags"
        value:
        - "value1"
        - "value2"
        - "value3"
      - op: "replace or add"
        path: "/tags"
        value:
          - "key1:value1"
          - "key2:value2"
          - "key3:value3"
      - op: "remove"
        path: "/tags"
        value:
          - "key1"
          - "key2"
          - "key3"
  StoragePatchOperation:
    type: "object"
    required:
      - "op"
      - "path"
      - "value"
    properties:
      op:
        type: "string"
        description: "Type of patch operation"
        enum:
        - "add"
        - "replace"
        - "remove"
      path:
        type: "string"
        description: "Path for batch operation"
      value:
        type: "array"
        description: "Path for batch operation"
        items:
          type: "string"
    description: "Patch api operation specific information"
  StorageBulkUpdateRecordsResponse:
    type: "object"
    properties:
      recordCount:
        type: "integer"
        format: "int32"
        description: "Number of records which updated successfully."
      recordIds:
        type: "array"
        description: "List of successfully updated record ids."
        items:
          type: "string"
      notFoundRecordIds:
        type: "array"
        description: "List of record ids for whom RecordMetadata was not found"
        items:
          type: "string"
      unAuthorizedRecordIds:
        type: "array"
        description: "List of record ids for whom user does not has owner permissions"
        items:
          type: "string"
      lockedRecordIds:
        type: "array"
        description: "List of locked record ids"
        items:
          type: "string"
    description: "Result of the record batch update request."
  StorageRecordQuery:
    type: "object"
    required:
    - "ids"
    properties:
      ids:
        type: "array"
        description: "Records ids for whom patch operations going to be applied"
        items:
          type: "string"

    description: "Patch api query specific information"

  SearchAppError:
    type: object
    properties:
      code:
        type: integer
        format: int32
      reason:
        type: string
      message:
        type: string
  SearchQueryResponse:
    type: object
    properties:
      results:
        type: array
        items:
          type: object
          additionalProperties:
            type: object
      totalCount:
        type: integer
        format: int64
  SearchByBoundingBox:
    description : A spatial filter criteria to allow to filter documents based on a point location within a bounding box.
    type: object
    required:
    - topLeft
    - bottomRight
    properties:
      topLeft:
        "$ref": "#/definitions/SearchPoint"
      bottomRight:
        "$ref": "#/definitions/SearchPoint"
  SearchByDistance:
    description: A spatial filter criteria to filter documents that exist within a specific distance from a geo point.
    type: object
    required:
    - point
    properties:
      distance:
        type: number
        format: double
        minimum: 0
      point:
        "$ref": "#/definitions/SearchPoint"
  SearchByGeoPolygon:
    description: A spatial filter criteria to filter documents which falls within a polygon of points.
    type: array
    items:
      "$ref": "#/definitions/SearchPoint"
    required:
    - points
    properties:
      points:
        type: array
        items:
            "$ref": "#/definitions/SearchPoint"
  SearchPoint:
    description: Geo-point with latitude and longitude
    type: object
    properties:
      latitude:
        type: number
        format: double
        minimum: -90
        maximum: 90
      longitude:
        type: number
        format: double
        minimum: -180
        maximum: 180
  SearchQueryRequest:
    description: Json object to query the Search API
    type: object
    required:
    - kind
    properties:
      offset:
        type: integer
        format: int32
        minimum: 0
        description: The starting offset from which to return results
      kind:
        type: string
        description: The kind of the record to query e.g. 'tenant1:test:well:1.0.0'.
      limit:
        type: integer
        format: int32
        minimum: 0
        description: The maximum number of results to return from the given offset. If no limit is provided, then it will return 10 items. Max number of items which can be fetched by the query is 1000.
      query:
        type: string
        description: The query string in Lucene query string syntax.
      spatialFilter:
        "$ref": "#/definitions/SearchSpatialFilter"
      returnedFields:
        type: array
        items:
          type: string
        description: The fields on which to project the results.
    example:
      offset: 10
      kind: tenant1:test:well:1.0.0
      limit: 30
      query: Status:Active
      spatialFilter:
        field: Location
        byBoundingBox:
          topLeft:
            latitude: 37.450727
            longitude: -122.174762
          bottomRight:
            latitude: 36.450727
            longitude: 122.174762
      returnedFields: [Location]
  SearchSpatialFilter:
    description: This filter is used to filter geo-point geo data which supports lat/lon pairs. The queries in this group are Geo Distance, Geo Polygon and Bounding Box. Only one spatial criteria can be used while defining filter.
    type: object
    required:
    - field
    properties:
      field:
        type: string
        description: geo-point field in the index on which filtering will be performed.
      byBoundingBox:
        "$ref": "#/definitions/SearchByBoundingBox"
      byDistance:
        "$ref": "#/definitions/SearchByDistance"
      byGeoPolygon:
        "$ref": "#/definitions/SearchByGeoPolygon"
  SearchCursorQueryResponse:
    type: object
    properties:
      cursor:
        type: string
      results:
        type: array
        items:
          type: object
          additionalProperties:
            type: object
      totalCount:
        type: integer
        format: int64
  SearchCursorQueryRequest:
    description: Json object to query the Search API
    type: object
    required:
    - kind
    properties:
      cursor:
        type: string
        description: The cursor value returned from a previous query.
      kind:
        type: string
        description: The kind of the record to query e.g. 'tenant1:test:well:1.0.0'.
      limit:
        type: integer
        format: int32
        minimum: 0
        description: The maximum number of results to return from the given offset. If no limit is provided, then it will return 10 items. Max number of items which can be fetched by the query is 1000.
      query:
        type: string
        description: The query string in Lucene query string syntax.
      spatialFilter:
        "$ref": "#/definitions/SearchSpatialFilter"
      returnedFields:
        type: array
        items:
          type: string
        description: The fields on which to project the results.
    example:
      cursor: yyyyyyy
      kind: tenant1:test:well:1.0.0
      limit: 30
      query: Status:Active
      spatialFilter:
        field: Location
        byBoundingBox:
          topLeft:
            latitude: 37.450727
            longitude: -122.174762
          bottomRight:
            latitude: 36.450727
            longitude: 122.174762
      returnedFields: [Location]

  SchemaError:
    type: object
    properties:
      message:
        type: string
      reason:
        type: string
      domain:
        type: string
  SchemaErrorModel:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/SchemaError'
      code:
        type: integer
        format: int32
      message:
        type: string
  SchemaErrorResponseFormat:
    type: object
    properties:
      error:
        $ref: '#/definitions/SchemaErrorModel'
    description: An error that occurs during normal application logic
  SchemaInfoResponse:
    description: The response for a GET schema request
    title: SchemaInfo Response
    properties:
      schemaInfos:
        type: array
        items:
          $ref: '#/definitions/SchemaInfo'
      offset:
        type: integer
        description: The offset for the next query
        title: Offset
        minimum: 0
      count:
        type: integer
        description: The number of schema versions in this response
        title: Count
        minimum: 0
      totalCount:
        type: integer
        description: The total number of entity type codes in the repositories
        title: Count
        minimum: 0
  SchemaInfo:
    type: object
    required:
      - schemaIdentity
      - status
    properties:
      createdBy:
        type: string
        example: user@opendes.com
        description: The user who created the schema. This value is taken from API caller token.
      dateCreated:
        type: string
        format: date-time
        example: 2019-05-23T11:16:03Z
        description: The UTC date time of the entity creation
      schemaIdentity:
        $ref: "#/definitions/SchemaIdentity"
      scope:
        type: string
        example: INTERNAL
        description: Schema Scope - is it internal or shared. This is a system defined attribute based on partition-id passed.
        enum:
          - INTERNAL
          - SHARED
      status:
        type: string
        description: Schema lifecycle status
        enum:
          - PUBLISHED
          - OBSOLETE
          - DEVELOPMENT
      supersededBy:
        $ref: "#/definitions/SchemaIdentity"
    title: Schema Info
    description: Schema info including status, creation and schemaIdentity
  SchemaIdentity:
    type: object
    required:
      - authority
      - entityType
      - source
      - schemaVersionMajor
      - schemaVersionMinor
      - schemaVersionPatch
    properties:
      authority:
        type: string
        example: osdu
        description: Entity authority
      entityType:
        type: string
        example: wellbore
        description: EntityType Code
      id:
        type: string
        example: osdu:wks:wellbore:1.0.0
        description: A read-only system defined id used for referencing of a
          schema.
      schemaVersionMajor:
        type: integer
        example: 1
        description: Major Schema Version Number
      schemaVersionMinor:
        type: integer
        example: 1
        description: Minor Schema Version Number
      schemaVersionPatch:
        type: integer
        example: 0
        description: Patch Schema Version Number
      source:
        type: string
        example: wks
        description: Entity source
    title: SchemaIdentity
    description: Schema authority source and type description
  SchemaRequest:
    type: object
    required:
      - schema
      - schemaInfo
    properties:
      schema:
        type: object
      schemaInfo:
        $ref: "#/definitions/SchemaInfo"
    title: SchemaRequest
    example:
      schemaInfo:
        schemaIdentity:
          authority: osdu
          source: wks
          entityType: wellbore
          schemaVersionMajor: 1
          schemaVersionMinor: 0
          schemaVersionPatch: 0
        status: PUBLISHED
      schema: {}



  FileID:
    type: string
    pattern: ^[\w,\s-]+(\.\w+)?$
  FileDriver:
    type: string
    enum:
      - AZURE
  FileDateTime:
    type: string
    format: date-time
  FileExtensionProperties:
    title: Extension Property
    type: object
    description: Useful for providing the user defined attributes to be associated with the file metadata record.
    properties:
      kind:
        title: Extension Schema ID
        type: string
        description: The schema ID for this schema fragment
        example: os:npd:csvFileExtDetails:1.0.0
  FileMetaItem:
    title: Frame of Reference Meta Data Item (FoR of File)
    required:
    - kind
    - persistableReference
    type: object
    properties:
      kind:
        title: Reference Kind
        type: string
        description: The kind of reference, unit, measurement, CRS or azimuth reference.
        enum:
        - CRS
        - Unit
        - Measurement
        - AzimuthReference
        - DateTime
      name:
        title: Name or Symbol
        type: string
        description: The name of the CRS or the symbol/name of the unit
        example: '["NAD27 * OGP-Usa Conus / North Dakota South [32021,15851]","ft"]'
      persistableReference:
        title: Persistable Reference
        type: string
        description: The persistable reference string uniquely identifying the CRS
          or Unit
        example: '{"scaleOffset":{"scale":0.3048006096012192,"offset":0.0},"symbol":"ftUS","baseMeasurement":{"ancestry":"Length","type":"UM"},"type":"USO"}'
      propertyNames:
        title: Attribute Names
        type: array
        description: The list of property names, to which this meta data item provides
          Unit/CRS context to. Data structures, which come in a single frame of
          reference, can register the property name, others require a full path
          like "data.structureA.propertyB" to define a unique context.
        example:
        - elevationFromMsl
        - '"totalDepthMdDriller'
        - wellHeadProjected
        items:
          type: string
      propertyValues:
        title: Attribute Names
        type: array
        description: The list of property values, to which this meta data item provides
          Unit/CRS context to. Typically a unit symbol is a value to a data structure;
          this symbol is then registered in this propertyValues array and the persistableReference
          provides the absolute reference.
        example:
        - F
        - ftUS
        - deg
        items:
          type: string
      uncertainty:
        title: Uncertainty
        type: number
        description: The uncertainty of the values measured given the unit or CRS
          unit.
    description: A meta data item, which allows the association of named properties
      or property values to a Unit/Measurement/CRS/Azimuth/Time context.
  FileLegal:
    title: Legal Meta Data
    type: object
    properties:
      legaltags:
        title: Legal Tags
        type: array
        description: The list of legal tags, see compliance API.
        items:
          type: string
      otherRelevantDataCountries:
        title: Other Relevant Data Countries
        type: array
        description: The list of other relevant data countries using the ISO 2-letter
          codes, see compliance API.
        items:
          type: string
      status:
        title: Legal Status
        type: string
        description: The legal status.
    description: Legal meta data like legal tags, relevant other countries, legal
      status.
  FileAcl:
    required:
    - owners
    - viewers
    type: object
    properties:
      viewers:
        type: array
        description: List of valid groups which will have view/read privileges over
          the record.
        items:
          type: string
      owners:
        type: array
        description: List of valid groups which will have write privileges over
          the record.
        items:
          type: string
  FileMetadataResponse:
    title: File Metadata response
    properties:
      Id:
        type: string
  FileDownloadResponse:
    title: Download URL response
    properties:
      SignedURL:
        type: string
  FileLinkList:
    title: Link List
    type: object
    additionalProperties:
      title: Link List
      type: array
      description: An array of one or more entity references in the data lake.
      items:
        type: string
    description: A named list of entities in the data lake as a dictionary item.
  FileError:
    type: object
    properties:
      message:
        type: string
      reason:
        type: string
      domain:
        type: string
  FileErrorModel:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/FileError'
      code:
        type: integer
        format: int32
      message:
        type: string
  FileApplicationError:
    type: object
    properties:
      error:
        $ref: '#/definitions/FileErrorModel'
    description: An error that occurs during normal application logic.



  FileToManyRelationship:
    properties:
      confidences:
        title: Relationship Confidences
        type: array
        description: The confidences of the relationships. Keep all the arrays ordered
          and aligned.
        items:
          type: number
      ids:
        title: Related Object Id
        type: array
        description: The ids of the related objects. It is populated for an explicit
          relationship where the target entity is present as a record in the data
          ecosystem. Keep all the arrays ordered and aligned.
        format: link
        items:
          type: string
      names:
        title: Related Object Names
        type: array
        description: The names or natural keys of the related objects. Keep all
          the arrays ordered and aligned.
        items:
          type: string
      versions:
        title: To Many Relationship
        type: array
        description: The specific version numbers of the related instances. This
          is only specified if a specific version is required. If not populated
          the last version is implied. Keep all the arrays ordered and aligned.
        items:
          type: number
          format: int64
    description: A relationship from this entity to many other entities either by
      natural key (name) or explicit id, optionally classified by confidence level.
  FileToOneRelationship:
    title: To One Relationship
    type: object
    properties:
      confidence:
        title: Relationship Confidence
        type: number
        description: The confidence of the relationship. If the property is absent
          a well-known relation is implied.
        example: 1
      id:
        title: Related Object Id
        type: string
        description: The id of the related object in the Data Ecosystem. If set,
          the id has priority over the natural key in the name property.
        format: link
        example: data_partition:namespace:entity_845934c40e8d922bc57b678990d55722
      name:
        title: Related Object Name
        type: string
        description: The name or natural key of the related object. This property
          is required if the target object id could not (yet) be identified.
        example: Survey ST2016
      version:
        title: Entity Version Number
        type: number
        description: The version number of the related entity. If no version number
          is specified, the last version is implied.
        format: int64
    description: A relationship from this entity to one other entity either by natural
      key (name) or id, optionally classified by confidence level
  FileRelationships:
    title: Relationships
    type: object
    properties:
      parentEntity:
        $ref: '#/definitions/FileToOneRelationship'
      relatedItems:
        $ref: '#/definitions/FileToManyRelationship'
    description: All relationships from this entity.
  FileDeliveryGetFileSignedURLRequest:
    type: object
    properties:
      srn:
        description: A list of SRNs to fetch
        type: array
        items:
          type: string
    example:
      srns:
        - srn:some-valid-srn
        - srn:some-invalid-srn
  FileDeliveryGetFileSignedURLResponse:
    type: object
    properties:
      unprocessed:
        description: A list of SRNs which could not be processed
        type: array
        items:
          type: string
      processed:
        description: Each key is equal to an SRN that was able to be processed
        type: object
        additionalProperties:
          description: Signed URL and/or related properties for the processed SRN
          type: object
          properties:
            signedUrl:
              type: string
    example:
      unprocessed:
        - srn:some-invalid-srn
      processed:
        srn:some-valid-srn:
          signedUrl: https://...
  FileDetails:
    title: Opaque/Generic File Content Details
    type: object
    properties:
      TargetKind:
        title: Target Schema ID
        type: string
        description: The target kind or schema ID which is to be used by the parser.
        example: os:npd:wellbore:1:*.*
      FileType:
        title: File Type
        type: string
        description: Type of File to decide what kind of ingestion to be triggered
        example: csv
      FrameOfReference:
        title: Frame of Reference for data present in file.
        type: array
        description: The list metaItem definitions which maps a named frame of
          reference symbol or name to the self-contained persistableReference.
        items:
          $ref: '#/definitions/FileMetaItem'
      ExtensionProperties:
        $ref: '#/definitions/FileExtensionProperties'
      ParentReference:
        title: Parent Reference
        type: string
        description: The parent reference for this file.
        example: CSBE0417
    description: Further information about File being uploaded.
  Files:
    title: File Metadata
    required:
      - Name
      - DatasetProperties
      - Endian
    type: object
    properties:
      Name:
        type: string
        description: An optional name of the dataset, e.g. a user friendly file or file collection name.
      Description:
        type: string
        description: An optional, textual description of the dataset.
      TotalSize:
        type: string
        description: Total size of the dataset in bytes; for files it is the same as declared in FileSourceInfo.FileSize or the sum of all individual files. Implemented as string. The value must be convertible to a long integer (sizes can become very large).
        pattern: ^[0-9]+$
      EncodingFormatTypeID:
        type: string
        description: Encoding Format Type ID
        pattern: ^srn:<namespace>:reference-data\\/EncodingFormatType:[^:]+:[0-9]*$
      SchemaFormatTypeID:
        type: string
        description: Schema Format Type ID
        pattern: ^srn:<namespace>:reference-data\\/SchemaFormatType:[^:]+:[0-9]*$
      Endian:
        description: Endianness of binary value. Enumeration- \BIG\ \LITTLE\.  If absent applications will need to interpret from context indicators.
        type: string
        enum: [
            BIG
            LITTLE
          ]
      Checksum:
        description: MD5 checksum of file bytes - a 32 byte hexadecimal number
        type: string
        pattern: ^[0-9a-fA-F]32}$
      DatasetProperties:
        type: object
        required:
        - FileSourceInfo
        properties:
          FileSourceInfo:
            type: object
            required:
              - FileSource
            properties:
              Name:
                type: string
                description: user-friendly file name.
              PreLoadFilePath:
                type: string
                description: File system path to the data file as it existed before loading to the data platform
              FileSource:
                type: string
                description: Relative file path for the data in the file
              PreloadFileCreateUser:
                type: string
                description: Optional user name or reference, who created the file prior to up-loading to the platform.
              PreloadFileCreateDate:
                type: string
                description: Optional create date and time of the file prior to uploading to the platform.
              PreloadFileModifyUser:
                type: string
                description: Optional user name or reference, who last modified the file prior to up-loading to the platform.
              PreloadFileModifyDate:
                type: string
                description: Optional last modified date and time of the file prior to up-loading to the platform.
              FileSize:
                type: string
                description: Length of file in bytes. Implemented as string. The value must be convertible to a long integer (sizes can become very large).
              EncodingFormatTypeID:
                type: string
                description: Encoding Format Type ID
                pattern: ^srn:<namespace>:reference-data\\/EncodingFormatType:[^:]+:[0-9]*$
      ExtensionProperties:
        title: File DMS Extension Properties
        type: object
        properties:
           Name:
              description: The name of the file. Note- this is an additional property, which is not part of OSDU File.1.0.0
              example: File
              title: File Name
              type: string
           Classification:
              description: The well-known entity classification code.
              example: Raw File
              title: File Classification
              type: string
           Description:
              description: A text describing the entity.
              example: An text further describing this file example.
              title: Entity Description
              type: string
           ExternalIds:
              description: An array of identities (e.g. some kind if URL to be resolved in an external data store) which links to external realizations of the same entity.
              format: link
              items:
                type: string
              title: Array of External IDs
              type: array
           FileDateCreated:
              description: The UTC date time of the file creation
              example: 2013-03-22T11:16:03Z
              format: date-time
              title: Creation Date and Time
              type: string
           FileDateModified:
              description: The UTC date time of the last file modification
              example: 2013-03-22T11:16:03Z
              format: date-time
              title: Last Modification Date and Time
              type: string
           FileContentsDetails:
              $ref: '#/definitions/FileDetails'
           relationships:
              $ref: '#/definitions/FileRelationships'
    description: >-
      The file data container containing all necessary details of the file
      record
  FileRecord:
    description: Metadata record.
    type: object
    required:
      - legal
      - data
      - acl
      - kind
    properties:
      id:
        type: string
        readOnly: true
        description: Unique identifier generated by the system for the file metadata record.
      kind:
        type: string
        example: osdu:wks:dataset--File.Generic:1.0.0
        description: Kind of data being ingested. Must follow the naming
          convention:data-Partition-Id}:dataset-name}:record-type}:version}.
      acl:
        $ref: '#/definitions/FileAcl'
      legal:
        $ref: '#/definitions/FileLegal'
      data:
        $ref: '#/definitions/Files'
      ancestry:
        $ref: '#/definitions/FileLinkList'
  FileRecordVersion:
    description: Metadata record.
    type: object
    properties:
      id:
        type: string
        readOnly: true
        description: Unique identifier generated by the system for the file metadata record.
      kind:
        type: string
        example: osdu:wks:dataset--File.Generic:1.0.0
        description: Kind of data being ingested. Must follow the naming
          convention:data-Partition-Id}:dataset-name}:record-type}:version}.
      acl:
        $ref: '#/definitions/FileAcl'
      legal:
        $ref: '#/definitions/FileLegal'
      data:
        $ref: '#/definitions/Files'
      ancestry:
        $ref: '#/definitions/FileLinkList'
      version:
        description: The version number of this OSDU resource; set by the framework.
        title: Version Number
        type: integer
        format: int64
        example: 1831253916104085
  FileListRequest:
    type: object
    properties:
      TimeFrom:
        $ref: '#/definitions/FileDateTime'
      TimeTo:
        $ref: '#/definitions/FileDateTime'
      PageNum:
        type: integer
      Items:
        type: integer
      UserID:
        type: string