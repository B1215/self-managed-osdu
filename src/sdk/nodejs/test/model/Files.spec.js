/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Files', function() {
      beforeEach(function() {
        instance = new SelfManagedOsdu.Files();
      });

      it('should create an instance of Files', function() {
        // TODO: update the code to test Files
        expect(instance).to.be.a(SelfManagedOsdu.Files);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property totalSize (base name: "TotalSize")', function() {
        // TODO: update the code to test the property totalSize
        expect(instance).to.have.property('totalSize');
        // expect(instance.totalSize).to.be(expectedValueLiteral);
      });

      it('should have the property encodingFormatTypeID (base name: "EncodingFormatTypeID")', function() {
        // TODO: update the code to test the property encodingFormatTypeID
        expect(instance).to.have.property('encodingFormatTypeID');
        // expect(instance.encodingFormatTypeID).to.be(expectedValueLiteral);
      });

      it('should have the property schemaFormatTypeID (base name: "SchemaFormatTypeID")', function() {
        // TODO: update the code to test the property schemaFormatTypeID
        expect(instance).to.have.property('schemaFormatTypeID');
        // expect(instance.schemaFormatTypeID).to.be(expectedValueLiteral);
      });

      it('should have the property endian (base name: "Endian")', function() {
        // TODO: update the code to test the property endian
        expect(instance).to.have.property('endian');
        // expect(instance.endian).to.be(expectedValueLiteral);
      });

      it('should have the property checksum (base name: "Checksum")', function() {
        // TODO: update the code to test the property checksum
        expect(instance).to.have.property('checksum');
        // expect(instance.checksum).to.be(expectedValueLiteral);
      });

      it('should have the property datasetProperties (base name: "DatasetProperties")', function() {
        // TODO: update the code to test the property datasetProperties
        expect(instance).to.have.property('datasetProperties');
        // expect(instance.datasetProperties).to.be(expectedValueLiteral);
      });

      it('should have the property extensionProperties (base name: "ExtensionProperties")', function() {
        // TODO: update the code to test the property extensionProperties
        expect(instance).to.have.property('extensionProperties');
        // expect(instance.extensionProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
