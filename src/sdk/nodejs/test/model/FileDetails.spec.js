/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FileDetails', function() {
      beforeEach(function() {
        instance = new SelfManagedOsdu.FileDetails();
      });

      it('should create an instance of FileDetails', function() {
        // TODO: update the code to test FileDetails
        expect(instance).to.be.a(SelfManagedOsdu.FileDetails);
      });

      it('should have the property targetKind (base name: "TargetKind")', function() {
        // TODO: update the code to test the property targetKind
        expect(instance).to.have.property('targetKind');
        // expect(instance.targetKind).to.be(expectedValueLiteral);
      });

      it('should have the property fileType (base name: "FileType")', function() {
        // TODO: update the code to test the property fileType
        expect(instance).to.have.property('fileType');
        // expect(instance.fileType).to.be(expectedValueLiteral);
      });

      it('should have the property frameOfReference (base name: "FrameOfReference")', function() {
        // TODO: update the code to test the property frameOfReference
        expect(instance).to.have.property('frameOfReference');
        // expect(instance.frameOfReference).to.be(expectedValueLiteral);
      });

      it('should have the property extensionProperties (base name: "ExtensionProperties")', function() {
        // TODO: update the code to test the property extensionProperties
        expect(instance).to.have.property('extensionProperties');
        // expect(instance.extensionProperties).to.be(expectedValueLiteral);
      });

      it('should have the property parentReference (base name: "ParentReference")', function() {
        // TODO: update the code to test the property parentReference
        expect(instance).to.have.property('parentReference');
        // expect(instance.parentReference).to.be(expectedValueLiteral);
      });

    });
  });

}));
