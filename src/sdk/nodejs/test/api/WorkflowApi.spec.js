/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SelfManagedOsdu.WorkflowApi();
  });

  describe('(package)', function() {
    describe('WorkflowApi', function() {
      describe('deleteWorkflow', function() {
        it('should call deleteWorkflow successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteWorkflow call
          /*
          var workflowName = "workflowName_example";

          instance.deleteWorkflow(workflowName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deployWorkflow', function() {
        it('should call deployWorkflow successfully', function(done) {
          // TODO: uncomment, update parameter values for deployWorkflow call and complete the assertions
          /*
          var opts = {};
          opts.body = new SelfManagedOsdu.Workflow();
          opts.body.workflowName = "";
          opts.body.registrationInstructions = ;
          opts.body.description = "";

          instance.deployWorkflow(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.Workflow);
            expect(data.workflowId).to.be.a('string');
            expect(data.workflowId).to.be("");
            expect(data.workflowName).to.be.a('string');
            expect(data.workflowName).to.be("");
            expect(data.registrationInstructions).to.be.a(Object);
            expect(data.registrationInstructions).to.be();
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.createdby).to.be.a('string');
            expect(data.createdby).to.be("");
            expect(data.creationTimestamp).to.be.a('number');
            expect(data.creationTimestamp).to.be();
            expect(data.version).to.be.a('string');
            expect(data.version).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllWorkflowRuns', function() {
        it('should call getAllWorkflowRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllWorkflowRuns call and complete the assertions
          /*
          var workflowName = "workflowName_example";
          var opts = {};
          opts.prefix = "prefix_example";
          opts.startDate = "startDate_example";
          opts.endDate = true;
          opts.limit = 56;
          opts.cursor = "cursor_example";
          opts.partial = true;
          opts.conf = "conf_example";

          instance.getAllWorkflowRuns(workflowName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SelfManagedOsdu.WorkflowRun);
              expect(data.workflowId).to.be.a('string');
              expect(data.workflowId).to.be("");
              expect(data.runId).to.be.a('string');
              expect(data.runId).to.be("");
              expect(data.startTimestamp).to.be.a('number');
              expect(data.startTimestamp).to.be();
              expect(data.endTimestamp).to.be.a('number');
              expect(data.endTimestamp).to.be();
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("INPROGRESS");
              expect(data.submittedBy).to.be.a('string');
              expect(data.submittedBy).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWorkflowRun', function() {
        it('should call getWorkflowRun successfully', function(done) {
          // TODO: uncomment, update parameter values for getWorkflowRun call and complete the assertions
          /*
          var workflowName = "workflowName_example";
          var runId = "runId_example";

          instance.getWorkflowRun(workflowName, runId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.WorkflowRun);
            expect(data.workflowId).to.be.a('string');
            expect(data.workflowId).to.be("");
            expect(data.runId).to.be.a('string');
            expect(data.runId).to.be("");
            expect(data.startTimestamp).to.be.a('number');
            expect(data.startTimestamp).to.be();
            expect(data.endTimestamp).to.be.a('number');
            expect(data.endTimestamp).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("INPROGRESS");
            expect(data.submittedBy).to.be.a('string');
            expect(data.submittedBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listAllWorkflow', function() {
        it('should call listAllWorkflow successfully', function(done) {
          // TODO: uncomment, update parameter values for listAllWorkflow call and complete the assertions
          /*
          var opts = {};
          opts.prefix = "prefix_example";

          instance.listAllWorkflow(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SelfManagedOsdu.Workflow);
              expect(data.workflowId).to.be.a('string');
              expect(data.workflowId).to.be("");
              expect(data.workflowName).to.be.a('string');
              expect(data.workflowName).to.be("");
              expect(data.registrationInstructions).to.be.a(Object);
              expect(data.registrationInstructions).to.be();
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.createdby).to.be.a('string');
              expect(data.createdby).to.be("");
              expect(data.creationTimestamp).to.be.a('number');
              expect(data.creationTimestamp).to.be();
              expect(data.version).to.be.a('string');
              expect(data.version).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('triggerWorkflow', function() {
        it('should call triggerWorkflow successfully', function(done) {
          // TODO: uncomment, update parameter values for triggerWorkflow call and complete the assertions
          /*
          var workflowName = "workflowName_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.WorkflowTriggerRequest();
          opts.body.runId = "";
          opts.body.executionContext = ;

          instance.triggerWorkflow(workflowName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.WorkflowRun);
            expect(data.workflowId).to.be.a('string');
            expect(data.workflowId).to.be("");
            expect(data.runId).to.be.a('string');
            expect(data.runId).to.be("");
            expect(data.startTimestamp).to.be.a('number');
            expect(data.startTimestamp).to.be();
            expect(data.endTimestamp).to.be.a('number');
            expect(data.endTimestamp).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("INPROGRESS");
            expect(data.submittedBy).to.be.a('string');
            expect(data.submittedBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateWorkflowRun', function() {
        it('should call updateWorkflowRun successfully', function(done) {
          // TODO: uncomment, update parameter values for updateWorkflowRun call and complete the assertions
          /*
          var workflowName = "workflowName_example";
          var runId = "runId_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.WorkflowRun();
          opts.body.status = "INPROGRESS";

          instance.updateWorkflowRun(workflowName, runId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.Workflow);
            expect(data.workflowId).to.be.a('string');
            expect(data.workflowId).to.be("");
            expect(data.workflowName).to.be.a('string');
            expect(data.workflowName).to.be("");
            expect(data.registrationInstructions).to.be.a(Object);
            expect(data.registrationInstructions).to.be();
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.createdby).to.be.a('string');
            expect(data.createdby).to.be("");
            expect(data.creationTimestamp).to.be.a('number');
            expect(data.creationTimestamp).to.be();
            expect(data.version).to.be.a('string');
            expect(data.version).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('viewWorkflow', function() {
        it('should call viewWorkflow successfully', function(done) {
          // TODO: uncomment, update parameter values for viewWorkflow call and complete the assertions
          /*
          var workflowName = "workflowName_example";

          instance.viewWorkflow(workflowName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.Workflow);
            expect(data.workflowId).to.be.a('string');
            expect(data.workflowId).to.be("");
            expect(data.workflowName).to.be.a('string');
            expect(data.workflowName).to.be("");
            expect(data.registrationInstructions).to.be.a(Object);
            expect(data.registrationInstructions).to.be();
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.createdby).to.be.a('string');
            expect(data.createdby).to.be("");
            expect(data.creationTimestamp).to.be.a('number');
            expect(data.creationTimestamp).to.be();
            expect(data.version).to.be.a('string');
            expect(data.version).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
