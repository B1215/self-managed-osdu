/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SelfManagedOsdu.PartitionApi();
  });

  describe('(package)', function() {
    describe('PartitionApi', function() {
      describe('createUsingPOST', function() {
        it('should call createUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for createUsingPOST call
          /*
          var partitionId = "partitionId_example";
          var partitionInfo = new SelfManagedOsdu.PartitionDto();
          partitionInfo.properties = {key: new SelfManagedOsdu.PartitionProperty()}new SelfManagedOsdu.PartitionProperty();
          partitionInfo.properties.key.sensitive = false;
          partitionInfo.properties.key.value = ;

          instance.createUsingPOST(partitionId, partitionInfo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUsingDELETE', function() {
        it('should call deleteUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUsingDELETE call
          /*
          var partitionId = "partitionId_example";

          instance.deleteUsingDELETE(partitionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUsingGET', function() {
        it('should call getUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getUsingGET call and complete the assertions
          /*
          var partitionId = "partitionId_example";

          instance.getUsingGET(partitionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SelfManagedOsdu.PartitionProperty);
              expect(data.sensitive).to.be.a('boolean');
              expect(data.sensitive).to.be(false);
              expect(data.value).to.be.a(Object);
              expect(data.value).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listUsingGET', function() {
        it('should call listUsingGET successfully', function(done) {
          // TODO: uncomment listUsingGET call and complete the assertions
          /*

          instance.listUsingGET(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUsingPATCH', function() {
        it('should call updateUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUsingPATCH call
          /*
          var partitionId = "partitionId_example";
          var partitionInfo = new SelfManagedOsdu.PartitionDto();
          partitionInfo.properties = {key: new SelfManagedOsdu.PartitionProperty()}new SelfManagedOsdu.PartitionProperty();
          partitionInfo.properties.key.sensitive = false;
          partitionInfo.properties.key.value = ;

          instance.updateUsingPATCH(partitionId, partitionInfo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
