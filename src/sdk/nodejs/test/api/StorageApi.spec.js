/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SelfManagedOsdu.StorageApi();
  });

  describe('(package)', function() {
    describe('StorageApi', function() {
      describe('createOrUpdateRecords', function() {
        it('should call createOrUpdateRecords successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrUpdateRecords call and complete the assertions
          /*
          var oSDUAccountId = "tenant1";
          var opts = {};
          opts.skipdupes = true;
          opts.body = [new SelfManagedOsdu.StorageRecord()];
          opts.body[0].id = "tenant1:well:123456789";
          opts.body[0].kind = "tenant1:public:well:1.0.2";
          opts.body[0].acl = new SelfManagedOsdu.StorageAcl();
          opts.body[0].acl.viewers = [""];
          opts.body[0].acl.owners = [""];
          opts.body[0].legal = new SelfManagedOsdu.StorageLegal();
          opts.body[0].legal.legaltags = [""];
          opts.body[0].legal.otherRelevantDataCountries = [""];
          opts.body[0].data = {key: };
          opts.body[0].history = new SelfManagedOsdu.StorageRecordHistory();
          opts.body[0].history.parents = [""];

          instance.createOrUpdateRecords(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageRecord);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("tenant1:well:123456789");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("tenant1:public:well:1.0.2");
            expect(data.acl).to.be.a(SelfManagedOsdu.StorageAcl);
                  {
                let dataCtr = data.acl.viewers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.acl.owners;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.legal).to.be.a(SelfManagedOsdu.StorageLegal);
                  {
                let dataCtr = data.legal.legaltags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.legal.otherRelevantDataCountries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.history).to.be.a(SelfManagedOsdu.StorageRecordHistory);
                  {
                let dataCtr = data.history.parents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRecord', function() {
        it('should call deleteRecord successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRecord call
          /*
          var id = "id_example";
          var oSDUAccountId = "tenant1";

          instance.deleteRecord(id, oSDUAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRecords', function() {
        it('should call deleteRecords successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRecords call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var partitionInfo = [new SelfManagedOsdu.[String]()];

          instance.deleteRecords(dataPartitionId, partitionInfo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fetchRecords', function() {
        it('should call fetchRecords successfully', function(done) {
          // TODO: uncomment, update parameter values for fetchRecords call and complete the assertions
          /*
          var oSDUAccountId = "tenant1";
          var opts = {};
          opts.body = new SelfManagedOsdu.StorageMultiRecordIds();
          opts.body.records = "tenant1:well:123456789";
          opts.body.attributes = "data.wellName";

          instance.fetchRecords(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageMultiRecordIds);
            {
              let dataCtr = data.records;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.attributes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllKinds', function() {
        it('should call getAllKinds successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllKinds call and complete the assertions
          /*
          var oSDUAccountId = "tenant1";
          var opts = {};
          opts.cursor = "cursor_example";
          opts.limit = 10;

          instance.getAllKinds(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageQueryResponse);
            expect(data.cursor).to.be.a('string');
            expect(data.cursor).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllRecordFromKind', function() {
        it('should call getAllRecordFromKind successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllRecordFromKind call and complete the assertions
          /*
          var oSDUAccountId = "tenant1";
          var opts = {};
          opts.cursor = "cursor_example";
          opts.limit = 10;
          opts.kind = "tenant1:public:well:1.0.2";

          instance.getAllRecordFromKind(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageQueryResponse);
            expect(data.cursor).to.be.a('string');
            expect(data.cursor).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllRecordVersions', function() {
        it('should call getAllRecordVersions successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllRecordVersions call and complete the assertions
          /*
          var id = "id_example";
          var oSDUAccountId = "tenant1";

          instance.getAllRecordVersions(id, oSDUAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageRecordVersions);
            expect(data.recordId).to.be.a('string');
            expect(data.recordId).to.be("");
            {
              let dataCtr = data.versions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRecord', function() {
        it('should call getRecord successfully', function(done) {
          // TODO: uncomment, update parameter values for getRecord call and complete the assertions
          /*
          var id = "id_example";
          var oSDUAccountId = "tenant1";
          var opts = {};
          opts.attribute = ["attribute_example"];

          instance.getRecord(id, oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageRecordData);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.meta;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be({key: });
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRecordVersion', function() {
        it('should call getRecordVersion successfully', function(done) {
          // TODO: uncomment, update parameter values for getRecordVersion call and complete the assertions
          /*
          var id = "id_example";
          var version = 789;
          var oSDUAccountId = "tenant1";
          var opts = {};
          opts.attribute = ["attribute_example"];

          instance.getRecordVersion(id, version, oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageRecordData);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.meta;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be({key: });
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchUpdateRecords', function() {
        it('should call patchUpdateRecords successfully', function(done) {
          // TODO: uncomment, update parameter values for patchUpdateRecords call and complete the assertions
          /*
          var oSDUAccountId = "tenant1";
          var opts = {};
          opts.body = [new SelfManagedOsdu.StorageRecordBulkUpdateParam()];
          opts.body[0].query = new SelfManagedOsdu.StorageRecordQuery();
          opts.body[0].query.ids = [""];
          opts.body[0].ops = [new SelfManagedOsdu.StoragePatchOperation()];
          opts.body[0].ops[0].op = "add";
          opts.body[0].ops[0].path = "";
          opts.body[0].ops[0].value = [""];

          instance.patchUpdateRecords(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.StorageBulkUpdateRecordsResponse);
            expect(data.recordCount).to.be.a('number');
            expect(data.recordCount).to.be(0);
            {
              let dataCtr = data.recordIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.notFoundRecordIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.unAuthorizedRecordIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.lockedRecordIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purgeRecord', function() {
        it('should call purgeRecord successfully', function(done) {
          // TODO: uncomment, update parameter values for purgeRecord call
          /*
          var id = "id_example";
          var oSDUAccountId = "tenant1";

          instance.purgeRecord(id, oSDUAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
