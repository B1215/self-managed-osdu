/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SelfManagedOsdu.SchemaApi();
  });

  describe('(package)', function() {
    describe('SchemaApi', function() {
      describe('createSchema', function() {
        it('should call createSchema successfully', function(done) {
          // TODO: uncomment, update parameter values for createSchema call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var body = new SelfManagedOsdu.SchemaRequest();
          body.schema = ;
          body.schemaInfo = new SelfManagedOsdu.SchemaInfo();
          body.schemaInfo.createdBy = "user@opendes.com";
          body.schemaInfo.dateCreated = 2019-05-23T11:16:03.000+0000;
          body.schemaInfo.schemaIdentity = new SelfManagedOsdu.SchemaIdentity();
          body.schemaInfo.schemaIdentity.authority = "osdu";
          body.schemaInfo.schemaIdentity.entityType = "wellbore";
          body.schemaInfo.schemaIdentity.id = "osdu:wks:wellbore:1.0.0";
          body.schemaInfo.schemaIdentity.schemaVersionMajor = 1;
          body.schemaInfo.schemaIdentity.schemaVersionMinor = 1;
          body.schemaInfo.schemaIdentity.schemaVersionPatch = 0;
          body.schemaInfo.schemaIdentity.source = "wks";
          body.schemaInfo.scope = "INTERNAL";
          body.schemaInfo.status = "PUBLISHED";
          body.schemaInfo.supersededBy = new SelfManagedOsdu.SchemaIdentity();
          body.schemaInfo.supersededBy.authority = "osdu";
          body.schemaInfo.supersededBy.entityType = "wellbore";
          body.schemaInfo.supersededBy.id = "osdu:wks:wellbore:1.0.0";
          body.schemaInfo.supersededBy.schemaVersionMajor = 1;
          body.schemaInfo.supersededBy.schemaVersionMinor = 1;
          body.schemaInfo.supersededBy.schemaVersionPatch = 0;
          body.schemaInfo.supersededBy.source = "wks";

          instance.createSchema(dataPartitionId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.SchemaInfo);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("user@opendes.com");
            expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(2019-05-23T11:16:03.000+0000);
            expect(data.schemaIdentity).to.be.a(SelfManagedOsdu.SchemaIdentity);
                  expect(data.schemaIdentity.authority).to.be.a('string');
              expect(data.schemaIdentity.authority).to.be("osdu");
              expect(data.schemaIdentity.entityType).to.be.a('string');
              expect(data.schemaIdentity.entityType).to.be("wellbore");
              expect(data.schemaIdentity.id).to.be.a('string');
              expect(data.schemaIdentity.id).to.be("osdu:wks:wellbore:1.0.0");
              expect(data.schemaIdentity.schemaVersionMajor).to.be.a('number');
              expect(data.schemaIdentity.schemaVersionMajor).to.be(1);
              expect(data.schemaIdentity.schemaVersionMinor).to.be.a('number');
              expect(data.schemaIdentity.schemaVersionMinor).to.be(1);
              expect(data.schemaIdentity.schemaVersionPatch).to.be.a('number');
              expect(data.schemaIdentity.schemaVersionPatch).to.be(0);
              expect(data.schemaIdentity.source).to.be.a('string');
              expect(data.schemaIdentity.source).to.be("wks");
            expect(data.scope).to.be.a('string');
            expect(data.scope).to.be("INTERNAL");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("PUBLISHED");
            expect(data.supersededBy).to.be.a(SelfManagedOsdu.SchemaIdentity);
                  expect(data.supersededBy.authority).to.be.a('string');
              expect(data.supersededBy.authority).to.be("osdu");
              expect(data.supersededBy.entityType).to.be.a('string');
              expect(data.supersededBy.entityType).to.be("wellbore");
              expect(data.supersededBy.id).to.be.a('string');
              expect(data.supersededBy.id).to.be("osdu:wks:wellbore:1.0.0");
              expect(data.supersededBy.schemaVersionMajor).to.be.a('number');
              expect(data.supersededBy.schemaVersionMajor).to.be(1);
              expect(data.supersededBy.schemaVersionMinor).to.be.a('number');
              expect(data.supersededBy.schemaVersionMinor).to.be(1);
              expect(data.supersededBy.schemaVersionPatch).to.be.a('number');
              expect(data.supersededBy.schemaVersionPatch).to.be(0);
              expect(data.supersededBy.source).to.be.a('string');
              expect(data.supersededBy.source).to.be("wks");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSchema', function() {
        it('should call getSchema successfully', function(done) {
          // TODO: uncomment, update parameter values for getSchema call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var id = "id_example";

          instance.getSchema(dataPartitionId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchSchemaInfoRepository', function() {
        it('should call searchSchemaInfoRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for searchSchemaInfoRepository call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var opts = {};
          opts.authority = "*";
          opts.source = "*";
          opts.entityType = "*";
          opts.schemaVersionMajor = "*";
          opts.schemaVersionMinor = "*";
          opts.status = "PUBLISHED";
          opts.scope = "INTERNAL";
          opts.latestVersion = false;
          opts.limit = 56;
          opts.offset = 56;

          instance.searchSchemaInfoRepository(dataPartitionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.SchemaInfoResponse);
            {
              let dataCtr = data.schemaInfos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SelfManagedOsdu.SchemaInfo);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("user@opendes.com");
                expect(data.dateCreated).to.be.a(Date);
                expect(data.dateCreated).to.be(2019-05-23T11:16:03.000+0000);
                expect(data.schemaIdentity).to.be.a(SelfManagedOsdu.SchemaIdentity);
                      expect(data.schemaIdentity.authority).to.be.a('string');
                  expect(data.schemaIdentity.authority).to.be("osdu");
                  expect(data.schemaIdentity.entityType).to.be.a('string');
                  expect(data.schemaIdentity.entityType).to.be("wellbore");
                  expect(data.schemaIdentity.id).to.be.a('string');
                  expect(data.schemaIdentity.id).to.be("osdu:wks:wellbore:1.0.0");
                  expect(data.schemaIdentity.schemaVersionMajor).to.be.a('number');
                  expect(data.schemaIdentity.schemaVersionMajor).to.be(1);
                  expect(data.schemaIdentity.schemaVersionMinor).to.be.a('number');
                  expect(data.schemaIdentity.schemaVersionMinor).to.be(1);
                  expect(data.schemaIdentity.schemaVersionPatch).to.be.a('number');
                  expect(data.schemaIdentity.schemaVersionPatch).to.be(0);
                  expect(data.schemaIdentity.source).to.be.a('string');
                  expect(data.schemaIdentity.source).to.be("wks");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("INTERNAL");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("PUBLISHED");
                expect(data.supersededBy).to.be.a(SelfManagedOsdu.SchemaIdentity);
                      expect(data.supersededBy.authority).to.be.a('string');
                  expect(data.supersededBy.authority).to.be("osdu");
                  expect(data.supersededBy.entityType).to.be.a('string');
                  expect(data.supersededBy.entityType).to.be("wellbore");
                  expect(data.supersededBy.id).to.be.a('string');
                  expect(data.supersededBy.id).to.be("osdu:wks:wellbore:1.0.0");
                  expect(data.supersededBy.schemaVersionMajor).to.be.a('number');
                  expect(data.supersededBy.schemaVersionMajor).to.be(1);
                  expect(data.supersededBy.schemaVersionMinor).to.be.a('number');
                  expect(data.supersededBy.schemaVersionMinor).to.be(1);
                  expect(data.supersededBy.schemaVersionPatch).to.be.a('number');
                  expect(data.supersededBy.schemaVersionPatch).to.be(0);
                  expect(data.supersededBy.source).to.be.a('string');
                  expect(data.supersededBy.source).to.be("wks");

                      }
            }
            expect(data.offset).to.be.a('number');
            expect(data.offset).to.be(0);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.totalCount).to.be.a('number');
            expect(data.totalCount).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSchema', function() {
        it('should call updateSchema successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSchema call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var body = new SelfManagedOsdu.SchemaRequest();
          body.schema = ;
          body.schemaInfo = new SelfManagedOsdu.SchemaInfo();
          body.schemaInfo.createdBy = "user@opendes.com";
          body.schemaInfo.dateCreated = 2019-05-23T11:16:03.000+0000;
          body.schemaInfo.schemaIdentity = new SelfManagedOsdu.SchemaIdentity();
          body.schemaInfo.schemaIdentity.authority = "osdu";
          body.schemaInfo.schemaIdentity.entityType = "wellbore";
          body.schemaInfo.schemaIdentity.id = "osdu:wks:wellbore:1.0.0";
          body.schemaInfo.schemaIdentity.schemaVersionMajor = 1;
          body.schemaInfo.schemaIdentity.schemaVersionMinor = 1;
          body.schemaInfo.schemaIdentity.schemaVersionPatch = 0;
          body.schemaInfo.schemaIdentity.source = "wks";
          body.schemaInfo.scope = "INTERNAL";
          body.schemaInfo.status = "PUBLISHED";
          body.schemaInfo.supersededBy = new SelfManagedOsdu.SchemaIdentity();
          body.schemaInfo.supersededBy.authority = "osdu";
          body.schemaInfo.supersededBy.entityType = "wellbore";
          body.schemaInfo.supersededBy.id = "osdu:wks:wellbore:1.0.0";
          body.schemaInfo.supersededBy.schemaVersionMajor = 1;
          body.schemaInfo.supersededBy.schemaVersionMinor = 1;
          body.schemaInfo.supersededBy.schemaVersionPatch = 0;
          body.schemaInfo.supersededBy.source = "wks";

          instance.updateSchema(dataPartitionId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.SchemaInfo);
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("user@opendes.com");
            expect(data.dateCreated).to.be.a(Date);
            expect(data.dateCreated).to.be(2019-05-23T11:16:03.000+0000);
            expect(data.schemaIdentity).to.be.a(SelfManagedOsdu.SchemaIdentity);
                  expect(data.schemaIdentity.authority).to.be.a('string');
              expect(data.schemaIdentity.authority).to.be("osdu");
              expect(data.schemaIdentity.entityType).to.be.a('string');
              expect(data.schemaIdentity.entityType).to.be("wellbore");
              expect(data.schemaIdentity.id).to.be.a('string');
              expect(data.schemaIdentity.id).to.be("osdu:wks:wellbore:1.0.0");
              expect(data.schemaIdentity.schemaVersionMajor).to.be.a('number');
              expect(data.schemaIdentity.schemaVersionMajor).to.be(1);
              expect(data.schemaIdentity.schemaVersionMinor).to.be.a('number');
              expect(data.schemaIdentity.schemaVersionMinor).to.be(1);
              expect(data.schemaIdentity.schemaVersionPatch).to.be.a('number');
              expect(data.schemaIdentity.schemaVersionPatch).to.be(0);
              expect(data.schemaIdentity.source).to.be.a('string');
              expect(data.schemaIdentity.source).to.be("wks");
            expect(data.scope).to.be.a('string');
            expect(data.scope).to.be("INTERNAL");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("PUBLISHED");
            expect(data.supersededBy).to.be.a(SelfManagedOsdu.SchemaIdentity);
                  expect(data.supersededBy.authority).to.be.a('string');
              expect(data.supersededBy.authority).to.be("osdu");
              expect(data.supersededBy.entityType).to.be.a('string');
              expect(data.supersededBy.entityType).to.be("wellbore");
              expect(data.supersededBy.id).to.be.a('string');
              expect(data.supersededBy.id).to.be("osdu:wks:wellbore:1.0.0");
              expect(data.supersededBy.schemaVersionMajor).to.be.a('number');
              expect(data.supersededBy.schemaVersionMajor).to.be(1);
              expect(data.supersededBy.schemaVersionMinor).to.be.a('number');
              expect(data.supersededBy.schemaVersionMinor).to.be(1);
              expect(data.supersededBy.schemaVersionPatch).to.be.a('number');
              expect(data.supersededBy.schemaVersionPatch).to.be(0);
              expect(data.supersededBy.source).to.be.a('string');
              expect(data.supersededBy.source).to.be("wks");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
