/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SelfManagedOsdu.FileServiceApi();
  });

  describe('(package)', function() {
    describe('FileServiceApi', function() {
      describe('deletesMetadataRecordFileForTheGivenId', function() {
        it('should call deletesMetadataRecordFileForTheGivenId successfully', function(done) {
          // TODO: uncomment, update parameter values for deletesMetadataRecordFileForTheGivenId call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var id = "id_example";

          instance.deletesMetadataRecordFileForTheGivenId(dataPartitionId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getALocationInLandingZoneToUploadAFile_', function() {
        it('should call getALocationInLandingZoneToUploadAFile_ successfully', function(done) {
          // TODO: uncomment, update parameter values for getALocationInLandingZoneToUploadAFile_ call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.FileLocationRequest();
          opts.body.fileID = new SelfManagedOsdu.FileID();

          instance.getALocationInLandingZoneToUploadAFile_(dataPartitionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.FileLandingZoneLocationResponse);
            expect(data.fileID).to.be.a(SelfManagedOsdu.FileID);
                {
              let dataCtr = data.location;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTheLocationToUploadAFile', function() {
        it('should call getTheLocationToUploadAFile successfully', function(done) {
          // TODO: uncomment, update parameter values for getTheLocationToUploadAFile call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";

          instance.getTheLocationToUploadAFile(dataPartitionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.FileSourceLocationResponse);
            expect(data.fileID).to.be.a(SelfManagedOsdu.FileID);
                {
              let dataCtr = data.location;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getsMetadataRecordForTheGivenId', function() {
        it('should call getsMetadataRecordForTheGivenId successfully', function(done) {
          // TODO: uncomment, update parameter values for getsMetadataRecordForTheGivenId call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var id = "id_example";

          instance.getsMetadataRecordForTheGivenId(dataPartitionId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.FileRecordVersion);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("osdu:wks:dataset--File.Generic:1.0.0");
            expect(data.acl).to.be.a(SelfManagedOsdu.FileAcl);
                  {
                let dataCtr = data.acl.viewers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.acl.owners;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.legal).to.be.a(SelfManagedOsdu.FileLegal);
                  {
                let dataCtr = data.legal.legaltags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.legal.otherRelevantDataCountries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.legal.status).to.be.a('string');
              expect(data.legal.status).to.be("");
            expect(data.data).to.be.a(SelfManagedOsdu.Files);
                  expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.totalSize).to.be.a('string');
              expect(data.data.totalSize).to.be("");
              expect(data.data.encodingFormatTypeID).to.be.a('string');
              expect(data.data.encodingFormatTypeID).to.be("");
              expect(data.data.schemaFormatTypeID).to.be.a('string');
              expect(data.data.schemaFormatTypeID).to.be("");
              expect(data.data.endian).to.be.a('string');
              expect(data.data.endian).to.be("BIG LITTLE");
              expect(data.data.checksum).to.be.a('string');
              expect(data.data.checksum).to.be("");
              expect(data.data.datasetProperties).to.be.a(Object);
              expect(data.data.datasetProperties).to.be();
              expect(data.data.extensionProperties).to.be.a(Object);
              expect(data.data.extensionProperties).to.be();
            expect(data.ancestry).to.be.a(SelfManagedOsdu.FileAncestry);
                  {
                let dataCtr = data.ancestry.parents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(1831253916104085);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getsURLToDownloadTheFileAssociatedWithTheGivenId_', function() {
        it('should call getsURLToDownloadTheFileAssociatedWithTheGivenId_ successfully', function(done) {
          // TODO: uncomment, update parameter values for getsURLToDownloadTheFileAssociatedWithTheGivenId_ call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var id = "id_example";
          var opts = {};
          opts.expiryTime = "expiryTime_example";

          instance.getsURLToDownloadTheFileAssociatedWithTheGivenId_(dataPartitionId, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.FileDownloadResponse);
            expect(data.signedURL).to.be.a('string');
            expect(data.signedURL).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publishFileMetadataForAFile_', function() {
        it('should call publishFileMetadataForAFile_ successfully', function(done) {
          // TODO: uncomment, update parameter values for publishFileMetadataForAFile_ call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.FileMetadata();
          opts.body.kind = "osdu:wks:dataset--File.Generic:1.0.0";
          opts.body.acl = new SelfManagedOsdu.FileAcl();
          opts.body.acl.viewers = [""];
          opts.body.acl.owners = [""];
          opts.body.legal = new SelfManagedOsdu.FileLegal();
          opts.body.legal.legaltags = [""];
          opts.body.legal.otherRelevantDataCountries = [""];
          opts.body.legal.status = "";
          opts.body.data = new SelfManagedOsdu.Files();
          opts.body.data.name = "";
          opts.body.data.description = "";
          opts.body.data.totalSize = "";
          opts.body.data.encodingFormatTypeID = "";
          opts.body.data.schemaFormatTypeID = "";
          opts.body.data.endian = "BIG LITTLE";
          opts.body.data.checksum = "";
          opts.body.data.datasetProperties = ;
          opts.body.data.extensionProperties = ;
          opts.body.ancestry = new SelfManagedOsdu.FileAncestry();
          opts.body.ancestry.parents = [""];

          instance.publishFileMetadataForAFile_(dataPartitionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.FileMetadataResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
