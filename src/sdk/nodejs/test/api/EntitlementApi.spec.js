/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SelfManagedOsdu.EntitlementApi();
  });

  describe('(package)', function() {
    describe('EntitlementApi', function() {
      describe('addMemberUsingPOST', function() {
        it('should call addMemberUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for addMemberUsingPOST call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var groupEmail = "groupEmail_example";
          var partitionInfo = new SelfManagedOsdu.EntitlementMemberDto();
          partitionInfo.email = "email@domain.com";
          partitionInfo.role = "MEMBER";

          instance.addMemberUsingPOST(dataPartitionId, groupEmail, partitionInfo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.EntitlementMemberDto);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("email@domain.com");
            expect(data.role).to.be.a('string');
            expect(data.role).to.be("MEMBER");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createGroupUsingPOST', function() {
        it('should call createGroupUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for createGroupUsingPOST call
          /*
          var dataPartitionId = "dataPartitionId_example";

          instance.createGroupUsingPOST(dataPartitionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteGroupUsingDELETE', function() {
        it('should call deleteGroupUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteGroupUsingDELETE call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var groupEmail = "groupEmail_example";

          instance.deleteGroupUsingDELETE(dataPartitionId, groupEmail, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMemberUsingDELETE', function() {
        it('should call deleteMemberUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMemberUsingDELETE call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var memberEmail = "memberEmail_example";

          instance.deleteMemberUsingDELETE(dataPartitionId, memberEmail, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMemberUsingDELETE1', function() {
        it('should call deleteMemberUsingDELETE1 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMemberUsingDELETE1 call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var groupEmail = "groupEmail_example";
          var memberEmail = "memberEmail_example";

          instance.deleteMemberUsingDELETE1(dataPartitionId, groupEmail, memberEmail, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listGroupMembersUsingGET', function() {
        it('should call listGroupMembersUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for listGroupMembersUsingGET call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var groupEmail = "groupEmail_example";
          var opts = {};
          opts.role = "role_example";
          opts.includeType = true;

          instance.listGroupMembersUsingGET(dataPartitionId, groupEmail, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listGroupsOnBehalfOfUsingGET', function() {
        it('should call listGroupsOnBehalfOfUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for listGroupsOnBehalfOfUsingGET call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var memberEmail = "memberEmail_example";
          var opts = {};
          opts.type = "type_example";
          opts.appid = "appid_example";

          instance.listGroupsOnBehalfOfUsingGET(dataPartitionId, memberEmail, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listGroupsUsingGET', function() {
        it('should call listGroupsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for listGroupsUsingGET call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";

          instance.listGroupsUsingGET(dataPartitionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.EntitlementGroupResponse);
            expect(data.desId).to.be.a('string');
            expect(data.desId).to.be("");
            expect(data.memberEmail).to.be.a('string');
            expect(data.memberEmail).to.be("");
            {
              let dataCtr = data.groups;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SelfManagedOsdu.EntitlementGroupProperties);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("service.entitlements.user");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("A service entitlement");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("service.entitlements.user@partition.contoso.com");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateGroupUsingPATCH', function() {
        it('should call updateGroupUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for updateGroupUsingPATCH call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var groupEmail = "groupEmail_example";

          instance.updateGroupUsingPATCH(dataPartitionId, groupEmail, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
