/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SelfManagedOsdu);
  }
}(this, function(expect, SelfManagedOsdu) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SelfManagedOsdu.LegalApi();
  });

  describe('(package)', function() {
    describe('LegalApi', function() {
      describe('createLegalTag', function() {
        it('should call createLegalTag successfully', function(done) {
          // TODO: uncomment, update parameter values for createLegalTag call and complete the assertions
          /*
          var oSDUAccountId = "oSDUAccountId_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.LegalTagDto();
          opts.body.name = "OSDU-Private-EHCData";
          opts.body.description = "";
          opts.body.properties = new SelfManagedOsdu.LegalTagProperties();
          opts.body.properties.contractId = "No Contract Related";
          opts.body.properties.countryOfOrigin = "US";
          opts.body.properties.dataType = "Third Party Data";
          opts.body.properties.expirationDate = "2025-12-25";
          opts.body.properties.exportClassification = "EAR99";
          opts.body.properties.originator = "Contoso";
          opts.body.properties.personalData = "No Personal Data";
          opts.body.properties.securityClassification = "Private";
          opts.oSDUOnBehalfOf = "oSDUOnBehalfOf_example";

          instance.createLegalTag(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.LegalTagDto);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("OSDU-Private-EHCData");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.properties).to.be.a(SelfManagedOsdu.LegalTagProperties);
                  expect(data.properties.contractId).to.be.a('string');
              expect(data.properties.contractId).to.be("No Contract Related");
              {
                let dataCtr = data.properties.countryOfOrigin;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.properties.dataType).to.be.a('string');
              expect(data.properties.dataType).to.be("Third Party Data");
              expect(data.properties.expirationDate).to.be.a('string');
              expect(data.properties.expirationDate).to.be("2025-12-25");
              expect(data.properties.exportClassification).to.be.a('string');
              expect(data.properties.exportClassification).to.be("EAR99");
              expect(data.properties.originator).to.be.a('string');
              expect(data.properties.originator).to.be("Contoso");
              expect(data.properties.personalData).to.be.a('string');
              expect(data.properties.personalData).to.be("No Personal Data");
              expect(data.properties.securityClassification).to.be.a('string');
              expect(data.properties.securityClassification).to.be("Private");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteLegalTag', function() {
        it('should call deleteLegalTag successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteLegalTag call
          /*
          var dataPartitionId = "dataPartitionId_example";
          var name = "name_example";

          instance.deleteLegalTag(dataPartitionId, name, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLegalTag', function() {
        it('should call getLegalTag successfully', function(done) {
          // TODO: uncomment, update parameter values for getLegalTag call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";
          var name = "name_example";

          instance.getLegalTag(dataPartitionId, name, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.LegalTagDto);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("OSDU-Private-EHCData");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.properties).to.be.a(SelfManagedOsdu.LegalTagProperties);
                  expect(data.properties.contractId).to.be.a('string');
              expect(data.properties.contractId).to.be("No Contract Related");
              {
                let dataCtr = data.properties.countryOfOrigin;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.properties.dataType).to.be.a('string');
              expect(data.properties.dataType).to.be("Third Party Data");
              expect(data.properties.expirationDate).to.be.a('string');
              expect(data.properties.expirationDate).to.be("2025-12-25");
              expect(data.properties.exportClassification).to.be.a('string');
              expect(data.properties.exportClassification).to.be("EAR99");
              expect(data.properties.originator).to.be.a('string');
              expect(data.properties.originator).to.be("Contoso");
              expect(data.properties.personalData).to.be.a('string');
              expect(data.properties.personalData).to.be("No Personal Data");
              expect(data.properties.securityClassification).to.be.a('string');
              expect(data.properties.securityClassification).to.be("Private");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLegalTagProperties', function() {
        it('should call getLegalTagProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for getLegalTagProperties call and complete the assertions
          /*
          var dataPartitionId = "dataPartitionId_example";

          instance.getLegalTagProperties(dataPartitionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.LegalTagPropertyValues);
            {
              let dataCtr = data.countriesOfOrigin;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.otherRelevantDataCountries;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.securityClassifications;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.exportClassificationControlNumbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.personalDataTypes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLegalTags', function() {
        it('should call getLegalTags successfully', function(done) {
          // TODO: uncomment, update parameter values for getLegalTags call and complete the assertions
          /*
          var oSDUAccountId = "oSDUAccountId_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.LegalTagRequest();
          opts.body.names = [""];
          opts.oSDUOnBehalfOf = "oSDUOnBehalfOf_example";

          instance.getLegalTags(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.LegalTagDtos);
            {
              let dataCtr = data.legalTags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SelfManagedOsdu.LegalTagDto);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("OSDU-Private-EHCData");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.properties).to.be.a(SelfManagedOsdu.LegalTagProperties);
                      expect(data.properties.contractId).to.be.a('string');
                  expect(data.properties.contractId).to.be("No Contract Related");
                  {
                    let dataCtr = data.properties.countryOfOrigin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.properties.dataType).to.be.a('string');
                  expect(data.properties.dataType).to.be("Third Party Data");
                  expect(data.properties.expirationDate).to.be.a('string');
                  expect(data.properties.expirationDate).to.be("2025-12-25");
                  expect(data.properties.exportClassification).to.be.a('string');
                  expect(data.properties.exportClassification).to.be("EAR99");
                  expect(data.properties.originator).to.be.a('string');
                  expect(data.properties.originator).to.be("Contoso");
                  expect(data.properties.personalData).to.be.a('string');
                  expect(data.properties.personalData).to.be("No Personal Data");
                  expect(data.properties.securityClassification).to.be.a('string');
                  expect(data.properties.securityClassification).to.be("Private");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listLegalTags', function() {
        it('should call listLegalTags successfully', function(done) {
          // TODO: uncomment, update parameter values for listLegalTags call and complete the assertions
          /*
          var oSDUAccountId = "oSDUAccountId_example";
          var opts = {};
          opts.valid = true;
          opts.oSDUOnBehalfOf = "oSDUOnBehalfOf_example";

          instance.listLegalTags(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.LegalTagDtos);
            {
              let dataCtr = data.legalTags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SelfManagedOsdu.LegalTagDto);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("OSDU-Private-EHCData");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.properties).to.be.a(SelfManagedOsdu.LegalTagProperties);
                      expect(data.properties.contractId).to.be.a('string');
                  expect(data.properties.contractId).to.be("No Contract Related");
                  {
                    let dataCtr = data.properties.countryOfOrigin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.properties.dataType).to.be.a('string');
                  expect(data.properties.dataType).to.be("Third Party Data");
                  expect(data.properties.expirationDate).to.be.a('string');
                  expect(data.properties.expirationDate).to.be("2025-12-25");
                  expect(data.properties.exportClassification).to.be.a('string');
                  expect(data.properties.exportClassification).to.be("EAR99");
                  expect(data.properties.originator).to.be.a('string');
                  expect(data.properties.originator).to.be("Contoso");
                  expect(data.properties.personalData).to.be.a('string');
                  expect(data.properties.personalData).to.be("No Personal Data");
                  expect(data.properties.securityClassification).to.be.a('string');
                  expect(data.properties.securityClassification).to.be("Private");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLegalTag', function() {
        it('should call updateLegalTag successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLegalTag call and complete the assertions
          /*
          var oSDUAccountId = "oSDUAccountId_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.LegalTagUpdateDto();
          opts.body.name = "";
          opts.body.contractId = "No Contract Related";
          opts.body.description = "";
          opts.body.expirationDate = "2025-12-25";
          opts.oSDUOnBehalfOf = "oSDUOnBehalfOf_example";

          instance.updateLegalTag(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.LegalTagDto);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("OSDU-Private-EHCData");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.properties).to.be.a(SelfManagedOsdu.LegalTagProperties);
                  expect(data.properties.contractId).to.be.a('string');
              expect(data.properties.contractId).to.be("No Contract Related");
              {
                let dataCtr = data.properties.countryOfOrigin;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.properties.dataType).to.be.a('string');
              expect(data.properties.dataType).to.be("Third Party Data");
              expect(data.properties.expirationDate).to.be.a('string');
              expect(data.properties.expirationDate).to.be("2025-12-25");
              expect(data.properties.exportClassification).to.be.a('string');
              expect(data.properties.exportClassification).to.be("EAR99");
              expect(data.properties.originator).to.be.a('string');
              expect(data.properties.originator).to.be("Contoso");
              expect(data.properties.personalData).to.be.a('string');
              expect(data.properties.personalData).to.be("No Personal Data");
              expect(data.properties.securityClassification).to.be.a('string');
              expect(data.properties.securityClassification).to.be("Private");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('validateLegalTags', function() {
        it('should call validateLegalTags successfully', function(done) {
          // TODO: uncomment, update parameter values for validateLegalTags call and complete the assertions
          /*
          var oSDUAccountId = "oSDUAccountId_example";
          var opts = {};
          opts.body = new SelfManagedOsdu.LegalTagRequest();
          opts.body.names = [""];
          opts.oSDUOnBehalfOf = "oSDUOnBehalfOf_example";

          instance.validateLegalTags(oSDUAccountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SelfManagedOsdu.LegalTagInvalidResponseList);
            {
              let dataCtr = data.invalidLegalTags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SelfManagedOsdu.LegalTagInvalidResponse);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
