/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.SearchQueryResponse = factory(root.SelfManagedOsdu.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The SearchQueryResponse model module.
   * @module model/SearchQueryResponse
   * @version 0.11.0
   */

  /**
   * Constructs a new <code>SearchQueryResponse</code>.
   * @alias module:model/SearchQueryResponse
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SearchQueryResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SearchQueryResponse} obj Optional instance to populate.
   * @return {module:model/SearchQueryResponse} The populated <code>SearchQueryResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('results'))
        obj.results = ApiClient.convertToType(data['results'], [{'String': Object}]);
      if (data.hasOwnProperty('totalCount'))
        obj.totalCount = ApiClient.convertToType(data['totalCount'], 'Number');
    }
    return obj;
  }

  /**
   * @member {Array.<Object.<String, Object>>} results
   */
  exports.prototype.results = undefined;

  /**
   * @member {Number} totalCount
   */
  exports.prototype.totalCount = undefined;


  return exports;

}));
