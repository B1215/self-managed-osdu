/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.Files = factory(root.SelfManagedOsdu.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Files model module.
   * @module model/Files
   * @version 0.11.0
   */

  /**
   * Constructs a new <code>Files</code>.
   * The file data container containing all necessary details of the file record
   * @alias module:model/Files
   * @class
   * @param name {String} An optional name of the dataset, e.g. a user friendly file or file collection name.
   * @param endian {module:model/Files.EndianEnum} Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.
   * @param datasetProperties {Object} 
   */
  var exports = function(name, endian, datasetProperties) {
    this.name = name;
    this.endian = endian;
    this.datasetProperties = datasetProperties;
  };

  /**
   * Constructs a <code>Files</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Files} obj Optional instance to populate.
   * @return {module:model/Files} The populated <code>Files</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Description'))
        obj.description = ApiClient.convertToType(data['Description'], 'String');
      if (data.hasOwnProperty('TotalSize'))
        obj.totalSize = ApiClient.convertToType(data['TotalSize'], 'String');
      if (data.hasOwnProperty('EncodingFormatTypeID'))
        obj.encodingFormatTypeID = ApiClient.convertToType(data['EncodingFormatTypeID'], 'String');
      if (data.hasOwnProperty('SchemaFormatTypeID'))
        obj.schemaFormatTypeID = ApiClient.convertToType(data['SchemaFormatTypeID'], 'String');
      if (data.hasOwnProperty('Endian'))
        obj.endian = ApiClient.convertToType(data['Endian'], 'String');
      if (data.hasOwnProperty('Checksum'))
        obj.checksum = ApiClient.convertToType(data['Checksum'], 'String');
      if (data.hasOwnProperty('DatasetProperties'))
        obj.datasetProperties = ApiClient.convertToType(data['DatasetProperties'], Object);
      if (data.hasOwnProperty('ExtensionProperties'))
        obj.extensionProperties = ApiClient.convertToType(data['ExtensionProperties'], Object);
    }
    return obj;
  }

  /**
   * An optional name of the dataset, e.g. a user friendly file or file collection name.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * An optional, textual description of the dataset.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * Total size of the dataset in bytes; for files it is the same as declared in FileSourceInfo.FileSize or the sum of all individual files. Implemented as string. The value must be convertible to a long integer (sizes can become very large).
   * @member {String} totalSize
   */
  exports.prototype.totalSize = undefined;

  /**
   * Encoding Format Type ID
   * @member {String} encodingFormatTypeID
   */
  exports.prototype.encodingFormatTypeID = undefined;

  /**
   * Schema Format Type ID
   * @member {String} schemaFormatTypeID
   */
  exports.prototype.schemaFormatTypeID = undefined;

  /**
   * Endianness of binary value. Enumeration- \\BIG\\ \\LITTLE\\.  If absent applications will need to interpret from context indicators.
   * @member {module:model/Files.EndianEnum} endian
   */
  exports.prototype.endian = undefined;

  /**
   * MD5 checksum of file bytes - a 32 byte hexadecimal number
   * @member {String} checksum
   */
  exports.prototype.checksum = undefined;

  /**
   * @member {Object} datasetProperties
   */
  exports.prototype.datasetProperties = undefined;

  /**
   * @member {Object} extensionProperties
   */
  exports.prototype.extensionProperties = undefined;



  /**
   * Allowed values for the <code>endian</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EndianEnum = {
    /**
     * value: "BIG LITTLE"
     * @const
     */
    BIG_LITTLE: "BIG LITTLE"
  };

  return exports;

}));
