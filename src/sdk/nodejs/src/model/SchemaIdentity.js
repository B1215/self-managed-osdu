/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.SchemaIdentity = factory(root.SelfManagedOsdu.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The SchemaIdentity model module.
   * @module model/SchemaIdentity
   * @version 0.11.0
   */

  /**
   * Constructs a new <code>SchemaIdentity</code>.
   * Schema authority source and type description
   * @alias module:model/SchemaIdentity
   * @class
   * @param authority {String} Entity authority
   * @param entityType {String} EntityType Code
   * @param schemaVersionMajor {Number} Major Schema Version Number
   * @param schemaVersionMinor {Number} Minor Schema Version Number
   * @param schemaVersionPatch {Number} Patch Schema Version Number
   * @param source {String} Entity source
   */
  var exports = function(authority, entityType, schemaVersionMajor, schemaVersionMinor, schemaVersionPatch, source) {
    this.authority = authority;
    this.entityType = entityType;
    this.schemaVersionMajor = schemaVersionMajor;
    this.schemaVersionMinor = schemaVersionMinor;
    this.schemaVersionPatch = schemaVersionPatch;
    this.source = source;
  };

  /**
   * Constructs a <code>SchemaIdentity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SchemaIdentity} obj Optional instance to populate.
   * @return {module:model/SchemaIdentity} The populated <code>SchemaIdentity</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('authority'))
        obj.authority = ApiClient.convertToType(data['authority'], 'String');
      if (data.hasOwnProperty('entityType'))
        obj.entityType = ApiClient.convertToType(data['entityType'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('schemaVersionMajor'))
        obj.schemaVersionMajor = ApiClient.convertToType(data['schemaVersionMajor'], 'Number');
      if (data.hasOwnProperty('schemaVersionMinor'))
        obj.schemaVersionMinor = ApiClient.convertToType(data['schemaVersionMinor'], 'Number');
      if (data.hasOwnProperty('schemaVersionPatch'))
        obj.schemaVersionPatch = ApiClient.convertToType(data['schemaVersionPatch'], 'Number');
      if (data.hasOwnProperty('source'))
        obj.source = ApiClient.convertToType(data['source'], 'String');
    }
    return obj;
  }

  /**
   * Entity authority
   * @member {String} authority
   */
  exports.prototype.authority = undefined;

  /**
   * EntityType Code
   * @member {String} entityType
   */
  exports.prototype.entityType = undefined;

  /**
   * A read-only system defined id used for referencing of a schema.
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Major Schema Version Number
   * @member {Number} schemaVersionMajor
   */
  exports.prototype.schemaVersionMajor = undefined;

  /**
   * Minor Schema Version Number
   * @member {Number} schemaVersionMinor
   */
  exports.prototype.schemaVersionMinor = undefined;

  /**
   * Patch Schema Version Number
   * @member {Number} schemaVersionPatch
   */
  exports.prototype.schemaVersionPatch = undefined;

  /**
   * Entity source
   * @member {String} source
   */
  exports.prototype.source = undefined;


  return exports;

}));
