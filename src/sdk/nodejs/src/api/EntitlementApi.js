/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntitlementGroupResponse', 'model/EntitlementMemberDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EntitlementGroupResponse'), require('../model/EntitlementMemberDto'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.EntitlementApi = factory(root.SelfManagedOsdu.ApiClient, root.SelfManagedOsdu.EntitlementGroupResponse, root.SelfManagedOsdu.EntitlementMemberDto);
  }
}(this, function(ApiClient, EntitlementGroupResponse, EntitlementMemberDto) {
  'use strict';

  /**
   * Entitlement service.
   * @module api/EntitlementApi
   * @version 0.11.0
   */

  /**
   * Constructs a new EntitlementApi. 
   * @alias module:api/EntitlementApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addMemberUsingPOST operation.
     * @callback module:api/EntitlementApi~addMemberUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitlementMemberDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Member to Group
     * @param {String} dataPartitionId Partition Name
     * @param {String} groupEmail group_email
     * @param {module:model/EntitlementMemberDto} partitionInfo partitionInfo
     * @param {module:api/EntitlementApi~addMemberUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitlementMemberDto}
     */
    this.addMemberUsingPOST = function(dataPartitionId, groupEmail, partitionInfo, callback) {
      var postBody = partitionInfo;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling addMemberUsingPOST");
      }

      // verify the required parameter 'groupEmail' is set
      if (groupEmail === undefined || groupEmail === null) {
        throw new Error("Missing the required parameter 'groupEmail' when calling addMemberUsingPOST");
      }

      // verify the required parameter 'partitionInfo' is set
      if (partitionInfo === undefined || partitionInfo === null) {
        throw new Error("Missing the required parameter 'partitionInfo' when calling addMemberUsingPOST");
      }


      var pathParams = {
        'group_email': groupEmail
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EntitlementMemberDto;

      return this.apiClient.callApi(
        '/api/entitlements/v2/groups/{group_email}/members', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupUsingPOST operation.
     * @callback module:api/EntitlementApi~createGroupUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Group
     * @param {String} dataPartitionId Partition Id
     * @param {module:api/EntitlementApi~createGroupUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createGroupUsingPOST = function(dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling createGroupUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/entitlements/v2/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupUsingDELETE operation.
     * @callback module:api/EntitlementApi~deleteGroupUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Group
     * @param {String} dataPartitionId tenant
     * @param {String} groupEmail group_email
     * @param {module:api/EntitlementApi~deleteGroupUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteGroupUsingDELETE = function(dataPartitionId, groupEmail, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling deleteGroupUsingDELETE");
      }

      // verify the required parameter 'groupEmail' is set
      if (groupEmail === undefined || groupEmail === null) {
        throw new Error("Missing the required parameter 'groupEmail' when calling deleteGroupUsingDELETE");
      }


      var pathParams = {
        'group_email': groupEmail
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/entitlements/v2/groups/{group_email}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMemberUsingDELETE operation.
     * @callback module:api/EntitlementApi~deleteMemberUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User
     * @param {String} dataPartitionId Data Partition Id
     * @param {String} memberEmail member_email
     * @param {module:api/EntitlementApi~deleteMemberUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMemberUsingDELETE = function(dataPartitionId, memberEmail, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling deleteMemberUsingDELETE");
      }

      // verify the required parameter 'memberEmail' is set
      if (memberEmail === undefined || memberEmail === null) {
        throw new Error("Missing the required parameter 'memberEmail' when calling deleteMemberUsingDELETE");
      }


      var pathParams = {
        'member_email': memberEmail
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/entitlements/v2/members/{member_email}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMemberUsingDELETE1 operation.
     * @callback module:api/EntitlementApi~deleteMemberUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Member from Group
     * @param {String} dataPartitionId Data Partition Id
     * @param {String} groupEmail group_email
     * @param {String} memberEmail member_email
     * @param {module:api/EntitlementApi~deleteMemberUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteMemberUsingDELETE1 = function(dataPartitionId, groupEmail, memberEmail, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling deleteMemberUsingDELETE1");
      }

      // verify the required parameter 'groupEmail' is set
      if (groupEmail === undefined || groupEmail === null) {
        throw new Error("Missing the required parameter 'groupEmail' when calling deleteMemberUsingDELETE1");
      }

      // verify the required parameter 'memberEmail' is set
      if (memberEmail === undefined || memberEmail === null) {
        throw new Error("Missing the required parameter 'memberEmail' when calling deleteMemberUsingDELETE1");
      }


      var pathParams = {
        'group_email': groupEmail,
        'member_email': memberEmail
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/entitlements/v2/groups/{group_email}/members/{member_email}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupMembersUsingGET operation.
     * @callback module:api/EntitlementApi~listGroupMembersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Group Members
     * @param {String} dataPartitionId Data Partition Id
     * @param {String} groupEmail group_email
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.role role
     * @param {Boolean} opts.includeType includeType
     * @param {module:api/EntitlementApi~listGroupMembersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.listGroupMembersUsingGET = function(dataPartitionId, groupEmail, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling listGroupMembersUsingGET");
      }

      // verify the required parameter 'groupEmail' is set
      if (groupEmail === undefined || groupEmail === null) {
        throw new Error("Missing the required parameter 'groupEmail' when calling listGroupMembersUsingGET");
      }


      var pathParams = {
        'group_email': groupEmail
      };
      var queryParams = {
        'role': opts['role'],
        'includeType': opts['includeType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/entitlements/v2/groups/{group_email}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupsOnBehalfOfUsingGET operation.
     * @callback module:api/EntitlementApi~listGroupsOnBehalfOfUsingGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Assigned Groups for User
     * @param {String} dataPartitionId tenant
     * @param {String} memberEmail member_email
     * @param {Object} opts Optional parameters
     * @param {String} opts.type type
     * @param {String} opts.appid appid
     * @param {module:api/EntitlementApi~listGroupsOnBehalfOfUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.listGroupsOnBehalfOfUsingGET = function(dataPartitionId, memberEmail, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling listGroupsOnBehalfOfUsingGET");
      }

      // verify the required parameter 'memberEmail' is set
      if (memberEmail === undefined || memberEmail === null) {
        throw new Error("Missing the required parameter 'memberEmail' when calling listGroupsOnBehalfOfUsingGET");
      }


      var pathParams = {
        'member_email': memberEmail
      };
      var queryParams = {
        'type': opts['type'],
        'appid': opts['appid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/entitlements/v2/members/{member_email}/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupsUsingGET operation.
     * @callback module:api/EntitlementApi~listGroupsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitlementGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Assigned Groups
     * @param {String} dataPartitionId tenant
     * @param {module:api/EntitlementApi~listGroupsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitlementGroupResponse}
     */
    this.listGroupsUsingGET = function(dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling listGroupsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EntitlementGroupResponse;

      return this.apiClient.callApi(
        '/api/entitlements/v2/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupUsingPATCH operation.
     * @callback module:api/EntitlementApi~updateGroupUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Items in Group
     * @param {String} dataPartitionId tenant
     * @param {String} groupEmail group_email
     * @param {module:api/EntitlementApi~updateGroupUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateGroupUsingPATCH = function(dataPartitionId, groupEmail, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling updateGroupUsingPATCH");
      }

      // verify the required parameter 'groupEmail' is set
      if (groupEmail === undefined || groupEmail === null) {
        throw new Error("Missing the required parameter 'groupEmail' when calling updateGroupUsingPATCH");
      }


      var pathParams = {
        'group_email': groupEmail
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/entitlements/v2/groups/{group_email}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
