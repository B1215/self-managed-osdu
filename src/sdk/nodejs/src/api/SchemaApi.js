/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SchemaErrorResponseFormat', 'model/SchemaInfo', 'model/SchemaInfoResponse', 'model/SchemaRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SchemaErrorResponseFormat'), require('../model/SchemaInfo'), require('../model/SchemaInfoResponse'), require('../model/SchemaRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.SchemaApi = factory(root.SelfManagedOsdu.ApiClient, root.SelfManagedOsdu.SchemaErrorResponseFormat, root.SelfManagedOsdu.SchemaInfo, root.SelfManagedOsdu.SchemaInfoResponse, root.SelfManagedOsdu.SchemaRequest);
  }
}(this, function(ApiClient, SchemaErrorResponseFormat, SchemaInfo, SchemaInfoResponse, SchemaRequest) {
  'use strict';

  /**
   * Schema service.
   * @module api/SchemaApi
   * @version 0.11.0
   */

  /**
   * Constructs a new SchemaApi. 
   * @alias module:api/SchemaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSchema operation.
     * @callback module:api/SchemaApi~createSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a schema to the schema repository.
     * Adds a schema to the schema repository. The schemaIdentity must be unique. The `authority`, `source` and `entityType` will be registered if not present. If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails. **Note:** The schema must not reference other schemas with status `DEVELOPMENT`. Scope to a schema will be set by system based on partition id (`SHARED` for common tenant and `INTERNAL` for private tenant). Required roles 'users.datalake.editors' or 'users.datalake.admins' groups to create schema.
     * @param {String} dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
     * @param {module:model/SchemaRequest} body 
     * @param {module:api/SchemaApi~createSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaInfo}
     */
    this.createSchema = function(dataPartitionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling createSchema");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSchema");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SchemaInfo;

      return this.apiClient.callApi(
        '/api/schema-service/v1/schema', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchema operation.
     * @callback module:api/SchemaApi~getSchemaCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets schema from the schema repository.
     * Retrieve a schema using its system defined id. Required roles 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' groups to get the schema.
     * @param {String} dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
     * @param {String} id the system id of the schema
     * @param {module:api/SchemaApi~getSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getSchema = function(dataPartitionId, id, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getSchema");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchema");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/schema-service/v1/schema/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSchemaInfoRepository operation.
     * @callback module:api/SchemaApi~searchSchemaInfoRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches schemaInfo repository
     * Searches for information of available schema (SchemInfo) in schema repository. Supports options to filter out the search contents. Required roles 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' groups to get the schema.
     * @param {String} dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authority pass an optional string to search for a specific authority (default to *)
     * @param {String} opts.source pass an optional string to search for a specific source (default to *)
     * @param {String} opts.entityType pass an optional string to search for a specific entityType (default to *)
     * @param {String} opts.schemaVersionMajor pass an optional string to search for a specific schemaVersionMajor (default to *)
     * @param {String} opts.schemaVersionMinor pass an optional string to search for a specific schemaVersionMinor (default to *)
     * @param {module:model/String} opts.status The schema status specification (default to PUBLISHED)
     * @param {module:model/String} opts.scope The scope or schema visibility specification (default to INTERNAL)
     * @param {Boolean} opts.latestVersion if True, only return the latest version (default to false)
     * @param {Number} opts.limit maximum number of schema records to return
     * @param {Number} opts.offset number of records to skip for pagination
     * @param {module:api/SchemaApi~searchSchemaInfoRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaInfoResponse}
     */
    this.searchSchemaInfoRepository = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling searchSchemaInfoRepository");
      }


      var pathParams = {
      };
      var queryParams = {
        'authority': opts['authority'],
        'source': opts['source'],
        'entityType': opts['entityType'],
        'schemaVersionMajor': opts['schemaVersionMajor'],
        'schemaVersionMinor': opts['schemaVersionMinor'],
        'status': opts['status'],
        'scope': opts['scope'],
        'latestVersion': opts['latestVersion'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SchemaInfoResponse;

      return this.apiClient.callApi(
        '/api/schema-service/v1/schema', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSchema operation.
     * @callback module:api/SchemaApi~updateSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates/Updates a schema in development status
     * Creates a new schema or updates an already existing schema with status `DEVELOPMENT` in the schema repository. If a user tries to create/update a schema with status other then `DEVELOPMENT`, API will throw an exception. Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of `PUBLISHED` or `OBSOLETE` schemas). A schema state can also be changed from `DEVELOPMENT` to `PUBLISHED` or `OBSOLETE` while updating schema content or by providing the same schema content. **Note:** The schema may refer to other schema definitions in `DEVELOPMENT` state. If those schemas are updated themselves, it is the developer's responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can't be updated, its a system defined value. Required roles  'users.datalake.editors' or 'users.datalake.admins' groups to update schema.
     * @param {String} dataPartitionId Specifies the data partition to use. This should be either the partition name or crm account ID associated with the partition.
     * @param {module:model/SchemaRequest} body SchemaRequest
     * @param {module:api/SchemaApi~updateSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaInfo}
     */
    this.updateSchema = function(dataPartitionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling updateSchema");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSchema");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SchemaInfo;

      return this.apiClient.callApi(
        '/api/schema-service/v1/schema', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
