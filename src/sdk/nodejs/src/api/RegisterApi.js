/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RegisterAction', 'model/RegisterAppError', 'model/RegisterCreateAction', 'model/RegisterDdms', 'model/RegisterGetSubscriptionResult', 'model/RegisterRecord', 'model/RegisterSecret', 'model/RegisterSubscription', 'model/RegisterSubscriptionCreateResult', 'model/RegisterTestAction', 'model/RegisterTestActionResult', 'model/RegisterTopic'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RegisterAction'), require('../model/RegisterAppError'), require('../model/RegisterCreateAction'), require('../model/RegisterDdms'), require('../model/RegisterGetSubscriptionResult'), require('../model/RegisterRecord'), require('../model/RegisterSecret'), require('../model/RegisterSubscription'), require('../model/RegisterSubscriptionCreateResult'), require('../model/RegisterTestAction'), require('../model/RegisterTestActionResult'), require('../model/RegisterTopic'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.RegisterApi = factory(root.SelfManagedOsdu.ApiClient, root.SelfManagedOsdu.RegisterAction, root.SelfManagedOsdu.RegisterAppError, root.SelfManagedOsdu.RegisterCreateAction, root.SelfManagedOsdu.RegisterDdms, root.SelfManagedOsdu.RegisterGetSubscriptionResult, root.SelfManagedOsdu.RegisterRecord, root.SelfManagedOsdu.RegisterSecret, root.SelfManagedOsdu.RegisterSubscription, root.SelfManagedOsdu.RegisterSubscriptionCreateResult, root.SelfManagedOsdu.RegisterTestAction, root.SelfManagedOsdu.RegisterTestActionResult, root.SelfManagedOsdu.RegisterTopic);
  }
}(this, function(ApiClient, RegisterAction, RegisterAppError, RegisterCreateAction, RegisterDdms, RegisterGetSubscriptionResult, RegisterRecord, RegisterSecret, RegisterSubscription, RegisterSubscriptionCreateResult, RegisterTestAction, RegisterTestActionResult, RegisterTopic) {
  'use strict';

  /**
   * Register service.
   * @module api/RegisterApi
   * @version 0.11.0
   */

  /**
   * Constructs a new RegisterApi. 
   * @alias module:api/RegisterApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createADDMSRegistration operation.
     * @callback module:api/RegisterApi~createADDMSRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterDdms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a DDMS registration
     * Create a DDMS registration using an OpenApi spec V3 document. Required roles: 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterDdms} opts.body 
     * @param {module:api/RegisterApi~createADDMSRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterDdms}
     */
    this.createADDMSRegistration = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling createADDMSRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterDdms;

      return this.apiClient.callApi(
        '/api/register/v1/ddms', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createASubscription operation.
     * @callback module:api/RegisterApi~createASubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterSubscriptionCreateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a subscription
     * Create a subscription. Required roles: 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterSubscription} opts.body 
     * @param {module:api/RegisterApi~createASubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterSubscriptionCreateResult}
     */
    this.createASubscription = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling createASubscription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterSubscriptionCreateResult;

      return this.apiClient.callApi(
        '/api/register/v1/subscription', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnActionRegistration operation.
     * @callback module:api/RegisterApi~createAnActionRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an action registration
     * Create an action registration. Required role: 'users.datalake.admins'
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterCreateAction} opts.body 
     * @param {module:api/RegisterApi~createAnActionRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterAction}
     */
    this.createAnActionRegistration = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling createAnActionRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterAction;

      return this.apiClient.callApi(
        '/api/register/v1/action', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteADDMSRegistration operation.
     * @callback module:api/RegisterApi~deleteADDMSRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a DDMS registration
     * Delete a DDMS registration with the given id. Required roles: 'users.datalake.admins'
     * @param {String} id 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~deleteADDMSRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteADDMSRegistration = function(id, dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteADDMSRegistration");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling deleteADDMSRegistration");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/register/v1/ddms/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteASubscriptionById operation.
     * @callback module:api/RegisterApi~deleteASubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a subscription
     * Delete a subscription with its Id. Required role: 'users.datalake.admins'
     * @param {String} id 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~deleteASubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteASubscriptionById = function(id, dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteASubscriptionById");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling deleteASubscriptionById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/register/v1/subscription/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnActionRegistration operation.
     * @callback module:api/RegisterApi~deleteAnActionRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action  registration
     * Delete an action registration with the given id. Required role: 'users.datalake.admins'
     * @param {String} id 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~deleteAnActionRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAnActionRegistration = function(id, dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAnActionRegistration");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling deleteAnActionRegistration");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/register/v1/action/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getADDMSRegistration operation.
     * @callback module:api/RegisterApi~getADDMSRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterDdms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a DDMS registration
     * Get a DDMS registration with the given id. Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} id 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~getADDMSRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterDdms}
     */
    this.getADDMSRegistration = function(id, dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getADDMSRegistration");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getADDMSRegistration");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterDdms;

      return this.apiClient.callApi(
        '/api/register/v1/ddms/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getASubscriptionById operation.
     * @callback module:api/RegisterApi~getASubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterGetSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a subscription
     * Get a subscription with its Id. Required role: 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} id 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~getASubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterGetSubscriptionResult}
     */
    this.getASubscriptionById = function(id, dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getASubscriptionById");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getASubscriptionById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterGetSubscriptionResult;

      return this.apiClient.callApi(
        '/api/register/v1/subscription/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnActionRegistration operation.
     * @callback module:api/RegisterApi~getAnActionRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an action registration
     * Get an action registration with the given id. Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} id 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~getAnActionRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterAction}
     */
    this.getAnActionRegistration = function(id, dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnActionRegistration");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getAnActionRegistration");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterAction;

      return this.apiClient.callApi(
        '/api/register/v1/action/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllTopics operation.
     * @callback module:api/RegisterApi~listAllTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegisterTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all topics
     * List all topics that you can create a subscription for, along with the corresponding sample messages. Required role: 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~listAllTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegisterTopic>}
     */
    this.listAllTopics = function(dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling listAllTopics");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RegisterTopic];

      return this.apiClient.callApi(
        '/api/register/v1/topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryADDMSRegistration operation.
     * @callback module:api/RegisterApi~queryADDMSRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegisterDdms>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query for DDMS registrations
     * Query for DDMS registrations allowing retrievals by type. Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} type 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {module:api/RegisterApi~queryADDMSRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegisterDdms>}
     */
    this.queryADDMSRegistration = function(type, dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling queryADDMSRegistration");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling queryADDMSRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RegisterDdms];

      return this.apiClient.callApi(
        '/api/register/v1/ddms', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnActionRegistration operation.
     * @callback module:api/RegisterApi~retrieveAnActionRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegisterAction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query for action registrations and substitutes any action with the given parameters
     * Retrieve an action registration. Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterRecord} opts.body The Record to find matching actions for and apply the template for.
     * @param {module:api/RegisterApi~retrieveAnActionRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegisterAction>}
     */
    this.retrieveAnActionRegistration = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling retrieveAnActionRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RegisterAction];

      return this.apiClient.callApi(
        '/api/register/v1/action:retrieve', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testAnActionRegistration operation.
     * @callback module:api/RegisterApi~testAnActionRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterTestActionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test an action registration
     * Test an action registration. Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterTestAction} opts.body 
     * @param {module:api/RegisterApi~testAnActionRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterTestActionResult}
     */
    this.testAnActionRegistration = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling testAnActionRegistration");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterTestActionResult;

      return this.apiClient.callApi(
        '/api/register/v1/action:test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecretForSubscription operation.
     * @callback module:api/RegisterApi~updateSecretForSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update secret for subscription
     * Update secret for a subscription. Required role: 'users.datalake.editors' or 'users.datalake.admins'
     * @param {String} id 
     * @param {String} dataPartitionId Specifies the partition to use. This should be either the partition name associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterSecret} opts.body 
     * @param {module:api/RegisterApi~updateSecretForSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSecretForSubscription = function(id, dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSecretForSubscription");
      }

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling updateSecretForSubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/register/v1/subscription/{id}/secret', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
