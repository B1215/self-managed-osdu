/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SearchAppError', 'model/SearchCursorQueryRequest', 'model/SearchCursorQueryResponse', 'model/SearchQueryRequest', 'model/SearchQueryResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SearchAppError'), require('../model/SearchCursorQueryRequest'), require('../model/SearchCursorQueryResponse'), require('../model/SearchQueryRequest'), require('../model/SearchQueryResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.SearchApi = factory(root.SelfManagedOsdu.ApiClient, root.SelfManagedOsdu.SearchAppError, root.SelfManagedOsdu.SearchCursorQueryRequest, root.SelfManagedOsdu.SearchCursorQueryResponse, root.SelfManagedOsdu.SearchQueryRequest, root.SelfManagedOsdu.SearchQueryResponse);
  }
}(this, function(ApiClient, SearchAppError, SearchCursorQueryRequest, SearchCursorQueryResponse, SearchQueryRequest, SearchQueryResponse) {
  'use strict';

  /**
   * Search service.
   * @module api/SearchApi
   * @version 0.11.0
   */

  /**
   * Constructs a new SearchApi. 
   * @alias module:api/SearchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteIndex operation.
     * @callback module:api/SearchApi~deleteIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all documents from index for given 'kind'.
     * The API can be used  to purge all indexed documents for a kind. Required access level to use this API is service.search.admin
     * @param {String} oSDUAccountId Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
     * @param {String} kind Kind of the record.
     * @param {Object} opts Optional parameters
     * @param {String} opts.oSDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
     * @param {module:api/SearchApi~deleteIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteIndex = function(oSDUAccountId, kind, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'oSDUAccountId' is set
      if (oSDUAccountId === undefined || oSDUAccountId === null) {
        throw new Error("Missing the required parameter 'oSDUAccountId' when calling deleteIndex");
      }

      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling deleteIndex");
      }


      var pathParams = {
        'kind': kind
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'OSDU-Account-Id': oSDUAccountId,
        'OSDU-On-Behalf-Of': opts['oSDUOnBehalfOf']
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/search/v2/index/{kind}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKindSchema operation.
     * @callback module:api/SearchApi~getKindSchemaCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the index schema for given 'kind'.
     * The API returns the schema for a given kind which is used find what attributes are indexed and their respective data types (at index time). Required access levels to use this API are service.search.user, service.search.admin
     * @param {String} oSDUAccountId Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
     * @param {String} kind Kind of the record.
     * @param {Object} opts Optional parameters
     * @param {String} opts.oSDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
     * @param {module:api/SearchApi~getKindSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getKindSchema = function(oSDUAccountId, kind, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'oSDUAccountId' is set
      if (oSDUAccountId === undefined || oSDUAccountId === null) {
        throw new Error("Missing the required parameter 'oSDUAccountId' when calling getKindSchema");
      }

      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getKindSchema");
      }


      var pathParams = {
        'kind': kind
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'OSDU-Account-Id': oSDUAccountId,
        'OSDU-On-Behalf-Of': opts['oSDUOnBehalfOf']
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/search/v2/index/schema/{kind}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryRecords operation.
     * @callback module:api/SearchApi~queryRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries the index for the specified kind using the input query string.
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data.
     * @param {String} oSDUAccountId Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
     * @param {module:model/SearchQueryRequest} body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly.
     * @param {Object} opts Optional parameters
     * @param {String} opts.oSDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
     * @param {module:api/SearchApi~queryRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchQueryResponse}
     */
    this.queryRecords = function(oSDUAccountId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'oSDUAccountId' is set
      if (oSDUAccountId === undefined || oSDUAccountId === null) {
        throw new Error("Missing the required parameter 'oSDUAccountId' when calling queryRecords");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling queryRecords");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'OSDU-Account-Id': oSDUAccountId,
        'OSDU-On-Behalf-Of': opts['oSDUOnBehalfOf']
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SearchQueryResponse;

      return this.apiClient.callApi(
        '/api/search/v2/query', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryWithCursor operation.
     * @callback module:api/SearchApi~queryWithCursorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchCursorQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the index using cursor and optionally return only requested fields.
     * The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required access levels to use this API are service.search.user, service.search.admin. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.
     * @param {String} oSDUAccountId Account ID is the active OSDU account (OSDU account or customer's account) which the users choose to use with the Search API.
     * @param {module:model/SearchCursorQueryRequest} body Specifies the API parameters. The only required parameter is the kind which needs to be formatted correctly.
     * @param {Object} opts Optional parameters
     * @param {String} opts.oSDUOnBehalfOf On behalf email or token is the token/email of the original user making the call. For now, only email is supported but eventually, primary usage will be token.
     * @param {module:api/SearchApi~queryWithCursorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchCursorQueryResponse}
     */
    this.queryWithCursor = function(oSDUAccountId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'oSDUAccountId' is set
      if (oSDUAccountId === undefined || oSDUAccountId === null) {
        throw new Error("Missing the required parameter 'oSDUAccountId' when calling queryWithCursor");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling queryWithCursor");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'OSDU-Account-Id': oSDUAccountId,
        'OSDU-On-Behalf-Of': opts['oSDUOnBehalfOf']
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SearchCursorQueryResponse;

      return this.apiClient.callApi(
        '/api/search/v2/query_with_cursor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
