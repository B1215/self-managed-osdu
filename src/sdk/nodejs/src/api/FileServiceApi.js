/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FileApplicationError', 'model/FileDownloadResponse', 'model/FileLandingZoneLocationResponse', 'model/FileLocationRequest', 'model/FileMetadata', 'model/FileMetadataResponse', 'model/FileRecordVersion', 'model/FileSourceLocationResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FileApplicationError'), require('../model/FileDownloadResponse'), require('../model/FileLandingZoneLocationResponse'), require('../model/FileLocationRequest'), require('../model/FileMetadata'), require('../model/FileMetadataResponse'), require('../model/FileRecordVersion'), require('../model/FileSourceLocationResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.FileServiceApi = factory(root.SelfManagedOsdu.ApiClient, root.SelfManagedOsdu.FileApplicationError, root.SelfManagedOsdu.FileDownloadResponse, root.SelfManagedOsdu.FileLandingZoneLocationResponse, root.SelfManagedOsdu.FileLocationRequest, root.SelfManagedOsdu.FileMetadata, root.SelfManagedOsdu.FileMetadataResponse, root.SelfManagedOsdu.FileRecordVersion, root.SelfManagedOsdu.FileSourceLocationResponse);
  }
}(this, function(ApiClient, FileApplicationError, FileDownloadResponse, FileLandingZoneLocationResponse, FileLocationRequest, FileMetadata, FileMetadataResponse, FileRecordVersion, FileSourceLocationResponse) {
  'use strict';

  /**
   * FileService service.
   * @module api/FileServiceApi
   * @version 0.11.0
   */

  /**
   * Constructs a new FileServiceApi. 
   * @alias module:api/FileServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deletesMetadataRecordFileForTheGivenId operation.
     * @callback module:api/FileServiceApi~deletesMetadataRecordFileForTheGivenIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes metadata record & file assocaited with that record for the given id
     * Deletes the File metadata record identified by the given id and file associated with that metadata record. **Required roles**: 'users.datalake.editors'  or 'users.datalake.admins'.
     * @param {String} dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.
     * @param {String} id File metadata record Id.
     * @param {module:api/FileServiceApi~deletesMetadataRecordFileForTheGivenIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletesMetadataRecordFileForTheGivenId = function(dataPartitionId, id, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling deletesMetadataRecordFileForTheGivenId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletesMetadataRecordFileForTheGivenId");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/file/v2/files/{Id}/metadata', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getALocationInLandingZoneToUploadAFile_ operation.
     * @callback module:api/FileServiceApi~getALocationInLandingZoneToUploadAFile_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileLandingZoneLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a location in Landing Zone to upload a file.
     * Create a new location in the landing zone to upload a file. **Required roles**: 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'. 
     * @param {String} dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/FileLocationRequest} opts.body 
     * @param {module:api/FileServiceApi~getALocationInLandingZoneToUploadAFile_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileLandingZoneLocationResponse}
     */
    this.getALocationInLandingZoneToUploadAFile_ = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getALocationInLandingZoneToUploadAFile_");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileLandingZoneLocationResponse;

      return this.apiClient.callApi(
        '/api/file/v2/getLocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTheLocationToUploadAFile operation.
     * @callback module:api/FileServiceApi~getTheLocationToUploadAFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileSourceLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a location in Landing Zone to upload a file.
     * Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours. User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
     * @param {String} dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.
     * @param {module:api/FileServiceApi~getTheLocationToUploadAFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileSourceLocationResponse}
     */
    this.getTheLocationToUploadAFile = function(dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getTheLocationToUploadAFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileSourceLocationResponse;

      return this.apiClient.callApi(
        '/api/file/v2/files/uploadURL', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getsMetadataRecordForTheGivenId operation.
     * @callback module:api/FileServiceApi~getsMetadataRecordForTheGivenIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileRecordVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata record for the given id
     * Gets the latest version of File metadata record identified by the given id. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
     * @param {String} dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.
     * @param {String} id File metadata record Id.
     * @param {module:api/FileServiceApi~getsMetadataRecordForTheGivenIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileRecordVersion}
     */
    this.getsMetadataRecordForTheGivenId = function(dataPartitionId, id, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getsMetadataRecordForTheGivenId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getsMetadataRecordForTheGivenId");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileRecordVersion;

      return this.apiClient.callApi(
        '/api/file/v2/files/{Id}/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getsURLToDownloadTheFileAssociatedWithTheGivenId_ operation.
     * @callback module:api/FileServiceApi~getsURLToDownloadTheFileAssociatedWithTheGivenId_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDownloadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a URL to download the file
     * Gets a URL for downloading the file associated with the unique `id`. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
     * @param {String} dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.
     * @param {String} id File Metadata record Id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expiryTime The Time for which Signed URL to be valid. Accepted Regex patterns are \"^[0-9]+M$\", \"^[0-9]+H$\", \"^[0-9]+D$\" denoting Integer values in Minutes, Hours, Days respectively. In absence of this parameter the URL would be valid for 7 Days.
     * @param {module:api/FileServiceApi~getsURLToDownloadTheFileAssociatedWithTheGivenId_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDownloadResponse}
     */
    this.getsURLToDownloadTheFileAssociatedWithTheGivenId_ = function(dataPartitionId, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling getsURLToDownloadTheFileAssociatedWithTheGivenId_");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getsURLToDownloadTheFileAssociatedWithTheGivenId_");
      }


      var pathParams = {
        'Id': id
      };
      var queryParams = {
        'expiryTime': opts['expiryTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileDownloadResponse;

      return this.apiClient.callApi(
        '/api/file/v2/files/{Id}/DownloadURL', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publishFileMetadataForAFile_ operation.
     * @callback module:api/FileServiceApi~publishFileMetadataForAFile_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates metadata for a file
     * This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via `FileSource` provided in the request body. If `FileSource` attribute is missing in the request body or there is no file present, then the request fails with an error. When metadata is successfully updated in the system, it returns the `Id` of the file metadata record. **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
     * @param {String} dataPartitionId Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.
     * @param {Object} opts Optional parameters
     * @param {module:model/FileMetadata} opts.body File metadata content
     * @param {module:api/FileServiceApi~publishFileMetadataForAFile_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetadataResponse}
     */
    this.publishFileMetadataForAFile_ = function(dataPartitionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling publishFileMetadataForAFile_");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileMetadataResponse;

      return this.apiClient.callApi(
        '/api/file/v2/files/metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
