/*
 * self-managed-osdu
 * Rest API Documentation for Self Managed OSDU
 *
 * OpenAPI spec version: 0.11.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NotificationResponseEntity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/NotificationResponseEntity'));
  } else {
    // Browser globals (root is window)
    if (!root.SelfManagedOsdu) {
      root.SelfManagedOsdu = {};
    }
    root.SelfManagedOsdu.NotificationApi = factory(root.SelfManagedOsdu.ApiClient, root.SelfManagedOsdu.NotificationResponseEntity);
  }
}(this, function(ApiClient, NotificationResponseEntity) {
  'use strict';

  /**
   * Notification service.
   * @module api/NotificationApi
   * @version 0.11.0
   */

  /**
   * Constructs a new NotificationApi. 
   * @alias module:api/NotificationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the recordChangedUsingPOST operation.
     * @callback module:api/NotificationApi~recordChangedUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifies subscribers that records have changed
     * @param {String} dataPartitionId tenant
     * @param {module:api/NotificationApi~recordChangedUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationResponseEntity}
     */
    this.recordChangedUsingPOST = function(dataPartitionId, callback) {
      var postBody = null;

      // verify the required parameter 'dataPartitionId' is set
      if (dataPartitionId === undefined || dataPartitionId === null) {
        throw new Error("Missing the required parameter 'dataPartitionId' when calling recordChangedUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'data-partition-id': dataPartitionId
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = NotificationResponseEntity;

      return this.apiClient.callApi(
        '/api/notification/v1/push-handlers/records-changed', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
