name: '4. Stamp Configure'

on:
  workflow_dispatch:

env:
  OSDU_VERSION: v0.11.0

jobs:

  fileshare-data:
    name: Load Persistant Storage
    runs-on: ubuntu-latest
    steps:

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload CRS Catalog
        env:
          SERVICE: crs-catalog-service
          FILE: crs_catalog_v2.json
          FILE_SHARE: crs
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.gz https://community.opengroup.org/osdu/platform/system/reference/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE}}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=2 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/data/${{ env.FILE }}

            GROUP=$(az group list --query "[?contains(name, 'ctl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --share-name ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results/${{ env.FILE }}

      - name: Upload Unit Catalog
        env:
          SERVICE: unit-service
          FILE: unit_catalog_v2.json
          FILE_SHARE: unit
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.gz https://community.opengroup.org/osdu/platform/system/reference/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE }}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=2 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/data/${{ env.FILE }}

            GROUP=$(az group list --query "[?contains(name, 'ctl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --share-name ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results/${{ env.FILE }}

      - name: Upload CRS Conversion
        env:
          SERVICE: crs-conversion-service
          FOLDER: apachesis_setup
          FILE_SHARE: crs-conversion
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.tar.gz https://community.opengroup.org/osdu/platform/system/reference/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE }}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.tar.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=1 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/${{ env.FOLDER }}

            GROUP=$(az group list --query "[?contains(name, 'ctl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload-batch \
            --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
            --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
            --destination ${{ env.FILE_SHARE }} \
            --source ${{ env.RUNNER_TEMP }}/results \
            --pattern ${{ env.FOLDER }}/**

      - name: Upload Ingestion Manifest
        env:
          SERVICE: ingestion-dags
          FOLDER: src/osdu_dags
          FILE_SHARE: airflowdags
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.tar.gz https://community.opengroup.org/osdu/platform/data-flow/ingestion/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE }}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.tar.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=1 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/${{ env.FOLDER }}

            GROUP=$(az group list --query "[?contains(name, 'ctl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload-batch \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --destination ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results \
              --pattern "*.ini"

            az storage file upload-batch \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --destination ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results \
              --pattern "*.py"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Upload Legal Country Objects
        env:
          PARTITION_NAME: opendes
          CONTAINER: legal-service-azure-configuration
          FILE: Legal_COO.json
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            GROUP=$(az group list --query "[?contains(name, 'ctl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage blob upload \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${{ env.PARTITION_NAME }}-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${{ env.PARTITION_NAME }}-storage-key --query value -otsv) \
              --file $GITHUB_WORKSPACE/configuration/Legal_COO.json \
              --container-name ${{ env.CONTAINER }} \
              --name ${{ env.FILE }}


  flux-setup:
    name: Initialize GitOps
    env:
      GITHUB_TOKEN: ${{ secrets.GH_REPO_TOKEN }}
      CLUSTER: osdu-stamp

    runs-on: ubuntu-latest
    steps:

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Environment Settings
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            GROUP=$(az group list --query "[?contains(name, 'dpl${{ secrets.RAND }}')].name" -otsv |grep -v MC)
            ENV_CLUSTER=$(az aks list --resource-group $GROUP --query [].name -otsv)
            echo "CLUSTER_RESOURCE_GROUP=$GROUP" >> $GITHUB_ENV
            echo "CLUSTER_NAME=$ENV_CLUSTER" >> $GITHUB_ENV

      - name: AKS Context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - name: Install Flux
        run: curl -s https://fluxcd.io/install.sh | bash;

      - name: Bootstrap Flux
        run: flux bootstrap github --owner=${{ github.repository_owner }} --repository=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2	) --branch=main --path=./clusters/${{ env.CLUSTER }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure Gitops Software - $GITHUB_REPOSITORY/deploy
        run: |
          flux create source git self-managed-osdu-source \
            --url $GITHUB_SERVER_URL/$GITHUB_REPOSITORY \
            --interval 1m \
            --branch main \
            --export > $GITHUB_WORKSPACE/clusters/$CLUSTER/self-managed-osdu-source.yaml

          cat > $GITHUB_WORKSPACE/clusters/$CLUSTER/self-managed-osdu-kustomization.yaml <<EOF
          ---
          # Installation of Sealed Secrets
          apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
          kind: Kustomization
          metadata:
            name: sealed-secrets
            namespace: flux-system
          spec:
            interval: 5m0s
            sourceRef:
              kind: GitRepository
              name: self-managed-osdu-source
            path: ./deploy/sealed-secrets
            prune: true
            validation: client
            healthChecks:
              - kind: Deployment
                name: sealed-secrets
                namespace: kube-system
          EOF

      - name: Configure Gitops Software - $GITHUB_REPOSITORY/apps
        run: |
          flux create source git helm-charts-azure-source \
            --url https://community.opengroup.org/osdu/platform/deployment-and-operations/helm-charts-azure \
            --interval 1m \
            --branch master \
            --export > $GITHUB_WORKSPACE/clusters/$CLUSTER/helm-charts-azure-source.yaml

          flux create kustomization osdu-azure \
            --source=flux-system \
            --path=./apps/$CLUSTER \
            --prune=true \
            --interval=5m \
            --depends-on=sealed-secrets \
            --export > $GITHUB_WORKSPACE/clusters/$CLUSTER/osdu-azure-kustomization.yaml

      - name: Commit changes
        uses: EndBug/add-and-commit@v7
        with:
          message: 'Initialize Software Install'
          add: 'clusters'
