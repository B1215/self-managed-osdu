name: 'Stuff'

on:
  workflow_dispatch:

jobs:

  cosmos-data:
    name: Load - TenantInfo
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve Stamp Env Variables
        env:
          PARTITION_NAME: opendes
        run: |
          GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
          ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

          COSMOS_ENDPOINT=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${PARTITION_NAME}-cosmos-endpoint --query value -otsv)
          COSMOS_KEY=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${PARTITION_NAME}-cosmos-primary-key --query value -otsv)
          SERVICE_PRINCIPAL_ID=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/app-dev-sp-username --query value -otsv)
          SERVICE_PRINCIPAL_OID=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/app-dev-sp-id --query value -otsv)

          echo "COSMOS_ENDPOINT=$COSMOS_ENDPOINT" >> $GITHUB_ENV
          echo "COSMOS_KEY=$COSMOS_KEY" >> $GITHUB_ENV
          echo "SERVICE_PRINCIPAL_ID=$SERVICE_PRINCIPAL_ID" >> $GITHUB_ENV
          echo "SERVICE_PRINCIPAL_OID=$SERVICE_PRINCIPAL_OID" >> $GITHUB_ENV

      - name: Install dependencies
        run: python -m pip install --upgrade pip azure-cosmos

      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            from azure.cosmos import CosmosClient, PartitionKey
            import json
            import pprint
            import os
            import time

            cosmos_url = os.environ['COSMOS_ENDPOINT']
            cosmos_key = os.environ['COSMOS_KEY']
            service_principal_id = os.environ['SERVICE_PRINCIPAL_ID']
            service_principal_oid = os.environ['SERVICE_PRINCIPAL_OID']

            cosmos_client = CosmosClient(cosmos_url, credential = cosmos_key)
            db = cosmos_client.get_database_client('osdu-db')

            def tenant_info(db):
              container = db.get_container_client("TenantInfo")
              with open("../configuration/tenant_info_1.json", "r") as f :
                tenant_info_1 = json.load(f)
              tenant_info_1["serviceprincipalAppId"] = service_principal_id
              container.upsert_item(tenant_info_1)
              return

            if __name__ == "__main__":
              tenant_info(db)



      # - uses: jannekem/run-python-script-action@v1
      #   with:
      #     script: |
      #       import os
      #       print("Directory contents:")
      #       for f in os.listdir():
      #           print(f)
