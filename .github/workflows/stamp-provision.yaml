name: '3. Stamp Provision'

on:
  workflow_dispatch:

env:
  AZURE_PRINCIPAL_NAME: osdu-azure-credentials
  OSDU_PRINCIPAL_NAME: osdu-credentials
  OSDU_APPLICATION_NAME: osdu-application
  CONTROLPLANE_WORKSPACE: "cpl-${{ secrets.RAND }}"
  DATAPLANE_WORKSPACE: "dpl-${{ secrets.RAND }}"
  PARTITION_WORKSPACE: "prt-${{ secrets.RAND }}"
  OSDU_VERSION: v0.11.0
  PARTITION_NAME: opendes

  IMAGE_TAG: latest

jobs:

  control-plane:
    name: Control Plane
    env:
      TEMPLATE: /osdu-azure/templates/osdu-r3-mvp/central_resources
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          push: false
          build-args: WORKING_DIRECTORY=${{ env.TEMPLATE }}
          tags: self-managed-osdu:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/self-managed-osdu.tar

      - name: Load Docker Image
        run: docker load --input /tmp/self-managed-osdu.tar

      - name: Retrieve Environment Settings
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            VAULT=$(az keyvault list --resource-group ${{ secrets.BUILDER_GROUP }} --query [].name -otsv)
            STORAGE=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/storage --query value -otsv)

            cat > $GITHUB_WORKSPACE/.env << EOF
            ## These variables support AzureRM Backend Storage State
            ARM_TENANT_ID=$(az account show --query homeTenantId -otsv)
            ARM_SUBSCRIPTION_ID=$(az account show --query id -otsv)
            ARM_CLIENT_ID=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-id --query value -otsv)
            ARM_CLIENT_SECRET=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-secret --query value -otsv)
            ARM_ACCESS_KEY=$(az storage account keys list --resource-group ${{ secrets.BUILDER_GROUP }} --account-name $STORAGE --query '[0].value' -o tsv)
            TF_VAR_remote_state_account=$STORAGE
            TF_VAR_remote_state_container=remote-state-container

            # Global Region Pair Location
            TF_VAR_cosmosdb_replica_location=$(az account list-locations --query "[?name == '${{ secrets.AZURE_LOCATION }}'].metadata.pairedRegion[0].name" -otsv)

            # Central Resources
            TF_VAR_principal_appId=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/client-id --query value -otsv)
            TF_VAR_principal_password=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/client-secret --query value -otsv)
            TF_VAR_principal_objectId=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/client-oid --query value -otsv)
            TF_VAR_aad_client_id=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/application-id --query value -otsv)
            EOF

      - name: Deploy Resources
        run: |
          docker run --rm --env-file $GITHUB_WORKSPACE/.env \
            --env TF_VAR_workspace=${{ env.CONTROLPLANE_WORKSPACE }} \
            --env TF_VAR_resource_group_location="${{ secrets.AZURE_LOCATION }}" \
            --env TF_VAR_principal_name=${{ env.OSDU_PRINCIPAL_NAME }} \
            self-managed-osdu:${{ env.IMAGE_TAG }}

          rm $GITHUB_WORKSPACE/.env
        shell: bash

  data-plane:
    name: Data Plane
    env:
      TEMPLATE: /osdu-azure/templates/osdu-r3-mvp/service_resources
    runs-on: ubuntu-latest
    needs: control-plane
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          push: false
          build-args: |
            WORKING_DIRECTORY=${{ env.TEMPLATE }}
            SSH_PUBLIC_KEY=${{ secrets.SSH_PUBLIC_KEY }}
          tags: self-managed-osdu:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/self-managed-osdu.tar

      - name: Load Docker Image
        run: docker load --input /tmp/self-managed-osdu.tar

      - name: Retrieve Environment Settings
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            VAULT=$(az keyvault list --resource-group ${{ secrets.BUILDER_GROUP }} --query [].name -otsv)
            STORAGE=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/storage --query value -otsv)

            cat > $GITHUB_WORKSPACE/.env << EOF
            ## These variables support AzureRM Backend Storage State
            ARM_TENANT_ID=$(az account show --query homeTenantId -otsv)
            ARM_SUBSCRIPTION_ID=$(az account show --query id -otsv)
            ARM_CLIENT_ID=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-id --query value -otsv)
            ARM_CLIENT_SECRET=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-secret --query value -otsv)
            ARM_ACCESS_KEY=$(az storage account keys list --resource-group ${{ secrets.BUILDER_GROUP }} --account-name $STORAGE --query '[0].value' -o tsv)
            TF_VAR_remote_state_account=$STORAGE
            TF_VAR_remote_state_container=remote-state-container

            # Global Region Pair Location
            TF_VAR_cosmosdb_replica_location=$(az account list-locations --query "[?name == '${{ secrets.AZURE_LOCATION }}'].metadata.pairedRegion[0].name" -otsv)
            EOF


      - name: Deploy Resources
        run: |
          docker run --rm --env-file $GITHUB_WORKSPACE/.env \
            --env TF_VAR_workspace=${{ env.DATAPLANE_WORKSPACE }} \
            --env TF_VAR_resource_group_location="${{ secrets.AZURE_LOCATION }}" \
            --env TF_VAR_gitops_ssh_url=git@github.com/$GITHUB_REPOSITORY.git \
            --env TF_VAR_central_resources_workspace_name=${{ env.CONTROLPLANE_WORKSPACE }} \
            --env TF_VAR_ssh_public_key_file=/osdu-azure/.ssh/id_rsa.pub \
            --env TF_VAR_gitops_ssh_key_file=/osdu-azure/.ssh/id_rsa \
            self-managed-osdu:${{ env.IMAGE_TAG }}

          rm $GITHUB_WORKSPACE/.env
        shell: bash

  partition:
    name: Partition
    env:
      TEMPLATE: /osdu-azure/templates/osdu-r3-mvp/data_partition
      ELASTIC_USERNAME: elastic
    runs-on: ubuntu-latest
    needs: data-plane
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          push: false
          build-args: WORKING_DIRECTORY=${{ env.TEMPLATE }}
          tags: self-managed-osdu:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/self-managed-osdu.tar

      - name: Load Docker Image
        run: docker load --input /tmp/self-managed-osdu.tar

      - name: Retrieve Environment Settings
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            VAULT=$(az keyvault list --resource-group ${{ secrets.BUILDER_GROUP }} --query [].name -otsv)
            STORAGE=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/storage --query value -otsv)

            cat > $GITHUB_WORKSPACE/.env << EOF
            ## These variables support AzureRM Backend Storage State
            ARM_TENANT_ID=$(az account show --query homeTenantId -otsv)
            ARM_SUBSCRIPTION_ID=$(az account show --query id -otsv)
            ARM_CLIENT_ID=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-id --query value -otsv)
            ARM_CLIENT_SECRET=$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-secret --query value -otsv)
            ARM_ACCESS_KEY=$(az storage account keys list --resource-group ${{ secrets.BUILDER_GROUP }} --account-name $STORAGE --query '[0].value' -o tsv)
            TF_VAR_remote_state_account=$STORAGE
            TF_VAR_remote_state_container=remote-state-container

            # Global Region Pair Location
            TF_VAR_cosmosdb_replica_location=$(az account list-locations --query "[?name == '${{ secrets.AZURE_LOCATION }}'].metadata.pairedRegion[0].name" -otsv)
            EOF

      - name: Deploy Azure Resources
        run: |
          docker run --rm --env-file $GITHUB_WORKSPACE/.env \
            --env TF_VAR_workspace=${{ env.PARTITION_WORKSPACE }} \
            --env TF_VAR_resource_group_location="${{ secrets.AZURE_LOCATION }}" \
            --env TF_VAR_central_resources_workspace_name=${{ env.CONTROLPLANE_WORKSPACE }}  \
            --env TF_VAR_service_resources_workspace_name=${{ env.DATAPLANE_WORKSPACE }}  \
            --env TF_VAR_elasticsearch_endpoint=${{ secrets.ELASTIC_ENDPOINT }} \
            --env TF_VAR_elasticsearch_username=${{ env.ELASTIC_USERNAME }} \
            --env TF_VAR_elasticsearch_password=${{ secrets.ELASTIC_PASSWORD }} \
            self-managed-osdu:${{ env.IMAGE_TAG }}

          rm $GITHUB_WORKSPACE/.env
        shell: bash

  fileshare-data:
    name: Load Data - File Shares
    runs-on: ubuntu-latest
    needs: partition
    steps:

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload CRS Catalog
        env:
          SERVICE: crs-catalog-service
          FILE: crs_catalog_v2.json
          FILE_SHARE: crs
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.gz https://community.opengroup.org/osdu/platform/system/reference/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE}}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=2 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/data/${{ env.FILE }}

            GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --share-name ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results/${{ env.FILE }}

      - name: Upload Unit Catalog
        env:
          SERVICE: unit-service
          FILE: unit_catalog_v2.json
          FILE_SHARE: unit
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.gz https://community.opengroup.org/osdu/platform/system/reference/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE }}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=2 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/data/${{ env.FILE }}

            GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --share-name ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results/${{ env.FILE }}

      - name: Upload CRS Conversion
        env:
          SERVICE: crs-conversion-service
          FOLDER: apachesis_setup
          FILE_SHARE: crs-conversion
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.tar.gz https://community.opengroup.org/osdu/platform/system/reference/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE }}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.tar.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=1 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/${{ env.FOLDER }}

            GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload-batch \
            --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
            --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
            --destination ${{ env.FILE_SHARE }} \
            --source ${{ env.RUNNER_TEMP }}/results \
            --pattern ${{ env.FOLDER }}/**

      - name: Upload Ingestion Manifest
        env:
          SERVICE: ingestion-dags
          FOLDER: src/osdu_dags
          FILE_SHARE: airflowdags
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            mkdir ${{ env.RUNNER_TEMP }}/results
            curl -sSL -o ${{ env.RUNNER_TEMP }}/download.tar.gz https://community.opengroup.org/osdu/platform/data-flow/ingestion/${{ env.SERVICE }}/-/archive/${{ env.OSDU_VERSION }}/${{ env.SERVICE }}-${{ env.OSDU_VERSION }}.tar.gz
            tar -xzvf ${{ env.RUNNER_TEMP }}/download.tar.gz -C ${{ env.RUNNER_TEMP }}/results --strip-components=1 ${{ env.SERVICE }}-${{ env.OSDU_VERSION }}/${{ env.FOLDER }}

            GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage file upload-batch \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --destination ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results \
              --pattern "*.ini"

            az storage file upload-batch \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/airflow-storage-key --query value -otsv) \
              --destination ${{ env.FILE_SHARE }} \
              --source ${{ env.RUNNER_TEMP }}/results \
              --pattern "*.py"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Upload Legal Country Objects
        env:
          PARTITION_NAME: opendes
          CONTAINER: legal-service-azure-configuration
          FILE: Legal_COO.json
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
            ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

            az storage blob upload \
              --account-name $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${{ env.PARTITION_NAME }}-storage --query value -otsv) \
              --account-key $(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${{ env.PARTITION_NAME }}-storage-key --query value -otsv) \
              --file $GITHUB_WORKSPACE/configuration/Legal_COO.json \
              --container-name ${{ env.CONTAINER }} \
              --name ${{ env.FILE }}

  cosmos-data:
    name: Load Data - TenantInfo
    runs-on: ubuntu-latest
    needs: partition
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Install dependencies
        run: python -m pip install --upgrade pip azure-cosmos

      - name: Load Record
        run: |
          GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
          ENV_VAULT=$(az keyvault list --resource-group $GROUP --query [].name -otsv)

          export COSMOS_ENDPOINT=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${PARTITION_NAME}-cosmos-endpoint --query value -otsv)
          export COSMOS_KEY=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/${PARTITION_NAME}-cosmos-primary-key --query value -otsv)
          export SERVICE_PRINCIPAL_ID=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/app-dev-sp-username --query value -otsv)
          export SERVICE_PRINCIPAL_OID=$(az keyvault secret show --id https://${ENV_VAULT}.vault.azure.net/secrets/app-dev-sp-id --query value -otsv)

          python3 scripts/upload-data.py

  table-data:
    name: Load Data - PartitionInfo
    runs-on: ubuntu-latest
    needs: partition
    steps:

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload Partition Info
        env:
          TABLE: PartitionInfo
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            GROUP=$(az group list --query "[?contains(name, 'cpl${{ secrets.RAND }}')].name" -otsv)
            STORAGE_NAME=$(az storage account list --resource-group $GROUP --query [].name -otsv)
            STORAGE_KEY=$(az storage account keys list -g $GROUP -n $STORAGE_NAME --query [0].value -otsv)

            az storage entity insert --account-name $STORAGE_NAME --account-key $STORAGE_KEY \
                --if-exists replace --table-name $TABLE \
                --entity PARTITIONKEY=opendes ROWKEY=id SENSITIVE=false VALUE=$PARTITION_NAME

            az storage entity insert --account-name $STORAGE_NAME --account-key $STORAGE_KEY \
                --if-exists replace --table-name $TABLE \
                --entity PARTITIONKEY=opendes ROWKEY=compliance-ruleset SENSITIVE=false VALUE=shared

            DATASET=('elastic-endpoint' \
                     'elastic-username' \
                     'elastic-password' \
                     'cosmos-connection' \
                     'cosmos-endpoint' \
                     'cosmos-primary-key' \
                     'sb-connection' \
                     'sb-namespace' \
                     'storage-account-key' \
                     'storage-account-name' \
                     'ingest-storage-account-name' \
                     'ingest-storage-account-key' \
                     'eventgrid-recordstopic' \
                     'eventgrid-recordstopic-accesskey' \
                     'eventgrid-legaltagschangedtopic' \
                     'eventgrid-legaltagschangedtopic-accesskey' \
                     'eventgrid-resourcegroup' \
                     'encryption-key-identifier' \
                     'sdms-storage-account-name' \
                     'sdms-storage-account-key' \
                     'eventgrid-schemanotificationtopic' \
                     'eventgrid-schemanotificationtopic-accesskey' \
                     'eventgrid-gsmtopic' \
                     'eventgrid-gsmtopic-accesskey' \
                     'eventgrid-statuschangedtopic' \
                     'eventgrid-statuschangedtopic-accesskey' \
                     'eventgrid-schemachangedtopic' \
                     'eventgrid-schemachangedtopic-accesskey')

            for item in "${DATASET[@]}"
            do
              az storage entity insert --account-name $STORAGE_NAME --account-key $STORAGE_KEY \
                --if-exists replace --table-name $TABLE \
                --entity PARTITIONKEY=$PARTITION_NAME ROWKEY=$item SENSITIVE=true VALUE=$PARTITION_NAME-$item
            done
